using Microsoft.Extensions.DependencyInjection;
using Neatoo.RemoteFactory.Internal;
using Neatoo;
using Neatoo.RemoteFactory;
using static Neatoo.UnitTest.RemoteFactory.AuthorizationAllCombinationTests;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Neatoo.AuthorizationRules;
using Neatoo.Internal;
using Neatoo.RemoteFactory.Internal;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text.RegularExpressions;

/*
                    Debugging Messages:
                    Parent class: AuthorizationAllCombinationTests
: IAuthorizedAllCombinations
No MethodDeclarationSyntax for GetType
No MethodDeclarationSyntax for MemberwiseClone
No MethodDeclarationSyntax for get_ReadReceived
No MethodDeclarationSyntax for set_ReadReceived
No MethodDeclarationSyntax for get_WriteReceived
No MethodDeclarationSyntax for set_WriteReceived
No MethodDeclarationSyntax for .ctor
No MethodDeclarationSyntax for .ctor
No MethodDeclarationSyntax for Equals
No MethodDeclarationSyntax for Equals
No MethodDeclarationSyntax for Finalize
No MethodDeclarationSyntax for GetHashCode
No MethodDeclarationSyntax for GetType
No MethodDeclarationSyntax for MemberwiseClone
No MethodDeclarationSyntax for ReferenceEquals
No MethodDeclarationSyntax for ToString
                    */
namespace Neatoo.UnitTest.RemoteFactory
{
    public interface IAuthorizedAllCombinationsFactory
    {
        IAuthorizedAllCombinations Create(VoidBool v);
        IAuthorizedAllCombinations Create(VoidString v);
        Task<IAuthorizedAllCombinations> Create(VoidTaskBool v);
        Task<IAuthorizedAllCombinations> Create(VoidTaskString v);
        IAuthorizedAllCombinations? Create(TrueBoolBool v);
        IAuthorizedAllCombinations? Create(TrueBoolString v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskString v);
        IAuthorizedAllCombinations? Create(FalseBoolBool v);
        IAuthorizedAllCombinations? Create(FalseBoolString v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskString v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidBool v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidString v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidTaskBool v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidTaskString v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolBool v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolString v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolBool v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolString v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskString v);
        Task<IAuthorizedAllCombinations> Create(VoidBoolRemote v);
        Task<IAuthorizedAllCombinations> Create(VoidStringRemote v);
        Task<IAuthorizedAllCombinations> Create(VoidTaskBoolRemote v);
        Task<IAuthorizedAllCombinations> Create(VoidTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidBoolRemote v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidStringRemote v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidTaskBoolRemote v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidBool v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidString v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskBool v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskString v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolBool v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolString v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolBool v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolString v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskString v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidBool v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidString v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskBool v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskString v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolBool v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolString v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolBool v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolString v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskString v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidBoolRemote v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidStringRemote v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskBoolRemote v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidBoolRemote v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidStringRemote v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskBoolRemote v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskStringRemote v);
        IAuthorizedAllCombinations Create(VoidBoolDeny v);
        IAuthorizedAllCombinations Create(VoidStringDeny v);
        Task<IAuthorizedAllCombinations> Create(VoidTaskBoolDeny v);
        Task<IAuthorizedAllCombinations> Create(VoidTaskStringDeny v);
        IAuthorizedAllCombinations? Create(TrueBoolBoolDeny v);
        IAuthorizedAllCombinations? Create(TrueBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskStringDeny v);
        IAuthorizedAllCombinations? Create(FalseBoolBoolDeny v);
        IAuthorizedAllCombinations? Create(FalseBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidBoolDeny v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidStringDeny v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidTaskBoolDeny v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations> Create(VoidBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(VoidStringRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(VoidTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(VoidTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidStringRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(TaskVoidTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidBoolDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidStringDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskBoolDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidBoolDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidStringDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskBoolDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidStringRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidStringRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskStringRemoteDeny v);
        Authorized CanCreate(VoidBool v);
        Authorized CanCreate(VoidString v);
        Task<Authorized> CanCreate(VoidTaskBool v);
        Task<Authorized> CanCreate(VoidTaskString v);
        Authorized CanInsert(VoidBool v);
        Authorized CanInsert(VoidString v);
        Task<Authorized> CanInsert(VoidTaskBool v);
        Task<Authorized> CanInsert(VoidTaskString v);
        Authorized CanCreate(TrueBoolBool v);
        Authorized CanCreate(TrueBoolString v);
        Task<Authorized> CanCreate(TrueBoolTaskBool v);
        Task<Authorized> CanCreate(TrueBoolTaskString v);
        Authorized CanInsert(TrueBoolBool v);
        Authorized CanInsert(TrueBoolString v);
        Task<Authorized> CanInsert(TrueBoolTaskBool v);
        Task<Authorized> CanInsert(TrueBoolTaskString v);
        Authorized CanCreate(FalseBoolBool v);
        Authorized CanCreate(FalseBoolString v);
        Task<Authorized> CanCreate(FalseBoolTaskBool v);
        Task<Authorized> CanCreate(FalseBoolTaskString v);
        Authorized CanInsert(FalseBoolBool v);
        Authorized CanInsert(FalseBoolString v);
        Task<Authorized> CanInsert(FalseBoolTaskBool v);
        Task<Authorized> CanInsert(FalseBoolTaskString v);
        Authorized CanCreate(TaskVoidBool v);
        Authorized CanCreate(TaskVoidString v);
        Task<Authorized> CanCreate(TaskVoidTaskBool v);
        Task<Authorized> CanCreate(TaskVoidTaskString v);
        Authorized CanInsert(TaskVoidBool v);
        Authorized CanInsert(TaskVoidString v);
        Task<Authorized> CanInsert(TaskVoidTaskBool v);
        Task<Authorized> CanInsert(TaskVoidTaskString v);
        Authorized CanCreate(TaskTrueBoolBool v);
        Authorized CanCreate(TaskTrueBoolString v);
        Task<Authorized> CanCreate(TaskTrueBoolTaskBool v);
        Task<Authorized> CanCreate(TaskTrueBoolTaskString v);
        Authorized CanInsert(TaskTrueBoolBool v);
        Authorized CanInsert(TaskTrueBoolString v);
        Task<Authorized> CanInsert(TaskTrueBoolTaskBool v);
        Task<Authorized> CanInsert(TaskTrueBoolTaskString v);
        Authorized CanCreate(TaskFalseBoolBool v);
        Authorized CanCreate(TaskFalseBoolString v);
        Task<Authorized> CanCreate(TaskFalseBoolTaskBool v);
        Task<Authorized> CanCreate(TaskFalseBoolTaskString v);
        Authorized CanInsert(TaskFalseBoolBool v);
        Authorized CanInsert(TaskFalseBoolString v);
        Task<Authorized> CanInsert(TaskFalseBoolTaskBool v);
        Task<Authorized> CanInsert(TaskFalseBoolTaskString v);
        Task<Authorized> CanCreate(VoidBoolRemote v);
        Task<Authorized> CanCreate(VoidStringRemote v);
        Task<Authorized> CanCreate(VoidTaskBoolRemote v);
        Task<Authorized> CanCreate(VoidTaskStringRemote v);
        Task<Authorized> CanInsert(VoidBoolRemote v);
        Task<Authorized> CanInsert(VoidStringRemote v);
        Task<Authorized> CanInsert(VoidTaskBoolRemote v);
        Task<Authorized> CanInsert(VoidTaskStringRemote v);
        Task<Authorized> CanCreate(TrueBoolBoolRemote v);
        Task<Authorized> CanCreate(TrueBoolStringRemote v);
        Task<Authorized> CanCreate(TrueBoolTaskBoolRemote v);
        Task<Authorized> CanCreate(TrueBoolTaskStringRemote v);
        Task<Authorized> CanInsert(TrueBoolBoolRemote v);
        Task<Authorized> CanInsert(TrueBoolStringRemote v);
        Task<Authorized> CanInsert(TrueBoolTaskBoolRemote v);
        Task<Authorized> CanInsert(TrueBoolTaskStringRemote v);
        Task<Authorized> CanCreate(FalseBoolBoolRemote v);
        Task<Authorized> CanCreate(FalseBoolStringRemote v);
        Task<Authorized> CanCreate(FalseBoolTaskBoolRemote v);
        Task<Authorized> CanCreate(FalseBoolTaskStringRemote v);
        Task<Authorized> CanInsert(FalseBoolBoolRemote v);
        Task<Authorized> CanInsert(FalseBoolStringRemote v);
        Task<Authorized> CanInsert(FalseBoolTaskBoolRemote v);
        Task<Authorized> CanInsert(FalseBoolTaskStringRemote v);
        Task<Authorized> CanCreate(TaskVoidBoolRemote v);
        Task<Authorized> CanCreate(TaskVoidStringRemote v);
        Task<Authorized> CanCreate(TaskVoidTaskBoolRemote v);
        Task<Authorized> CanCreate(TaskVoidTaskStringRemote v);
        Task<Authorized> CanInsert(TaskVoidBoolRemote v);
        Task<Authorized> CanInsert(TaskVoidStringRemote v);
        Task<Authorized> CanInsert(TaskVoidTaskBoolRemote v);
        Task<Authorized> CanInsert(TaskVoidTaskStringRemote v);
        Task<Authorized> CanCreate(TaskTrueBoolBoolRemote v);
        Task<Authorized> CanCreate(TaskTrueBoolStringRemote v);
        Task<Authorized> CanCreate(TaskTrueBoolTaskBoolRemote v);
        Task<Authorized> CanCreate(TaskTrueBoolTaskStringRemote v);
        Task<Authorized> CanInsert(TaskTrueBoolBoolRemote v);
        Task<Authorized> CanInsert(TaskTrueBoolStringRemote v);
        Task<Authorized> CanInsert(TaskTrueBoolTaskBoolRemote v);
        Task<Authorized> CanInsert(TaskTrueBoolTaskStringRemote v);
        Task<Authorized> CanCreate(TaskFalseBoolBoolRemote v);
        Task<Authorized> CanCreate(TaskFalseBoolStringRemote v);
        Task<Authorized> CanCreate(TaskFalseBoolTaskBoolRemote v);
        Task<Authorized> CanCreate(TaskFalseBoolTaskStringRemote v);
        Task<Authorized> CanInsert(TaskFalseBoolBoolRemote v);
        Task<Authorized> CanInsert(TaskFalseBoolStringRemote v);
        Task<Authorized> CanInsert(TaskFalseBoolTaskBoolRemote v);
        Task<Authorized> CanInsert(TaskFalseBoolTaskStringRemote v);
        Authorized CanCreate(RemoteVoidBool v);
        Authorized CanCreate(RemoteVoidString v);
        Task<Authorized> CanCreate(RemoteVoidTaskBool v);
        Task<Authorized> CanCreate(RemoteVoidTaskString v);
        Authorized CanInsert(RemoteVoidBool v);
        Authorized CanInsert(RemoteVoidString v);
        Task<Authorized> CanInsert(RemoteVoidTaskBool v);
        Task<Authorized> CanInsert(RemoteVoidTaskString v);
        Authorized CanCreate(RemoteTrueBoolBool v);
        Authorized CanCreate(RemoteTrueBoolString v);
        Task<Authorized> CanCreate(RemoteTrueBoolTaskBool v);
        Task<Authorized> CanCreate(RemoteTrueBoolTaskString v);
        Authorized CanInsert(RemoteTrueBoolBool v);
        Authorized CanInsert(RemoteTrueBoolString v);
        Task<Authorized> CanInsert(RemoteTrueBoolTaskBool v);
        Task<Authorized> CanInsert(RemoteTrueBoolTaskString v);
        Authorized CanCreate(RemoteFalseBoolBool v);
        Authorized CanCreate(RemoteFalseBoolString v);
        Task<Authorized> CanCreate(RemoteFalseBoolTaskBool v);
        Task<Authorized> CanCreate(RemoteFalseBoolTaskString v);
        Authorized CanInsert(RemoteFalseBoolBool v);
        Authorized CanInsert(RemoteFalseBoolString v);
        Task<Authorized> CanInsert(RemoteFalseBoolTaskBool v);
        Task<Authorized> CanInsert(RemoteFalseBoolTaskString v);
        Authorized CanCreate(RemoteTaskVoidBool v);
        Authorized CanCreate(RemoteTaskVoidString v);
        Task<Authorized> CanCreate(RemoteTaskVoidTaskBool v);
        Task<Authorized> CanCreate(RemoteTaskVoidTaskString v);
        Authorized CanInsert(RemoteTaskVoidBool v);
        Authorized CanInsert(RemoteTaskVoidString v);
        Task<Authorized> CanInsert(RemoteTaskVoidTaskBool v);
        Task<Authorized> CanInsert(RemoteTaskVoidTaskString v);
        Authorized CanCreate(RemoteTaskTrueBoolBool v);
        Authorized CanCreate(RemoteTaskTrueBoolString v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskBool v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskString v);
        Authorized CanInsert(RemoteTaskTrueBoolBool v);
        Authorized CanInsert(RemoteTaskTrueBoolString v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskBool v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskString v);
        Authorized CanCreate(RemoteTaskFalseBoolBool v);
        Authorized CanCreate(RemoteTaskFalseBoolString v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskBool v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskString v);
        Authorized CanInsert(RemoteTaskFalseBoolBool v);
        Authorized CanInsert(RemoteTaskFalseBoolString v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskBool v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskString v);
        Task<Authorized> CanCreate(RemoteVoidBoolRemote v);
        Task<Authorized> CanCreate(RemoteVoidStringRemote v);
        Task<Authorized> CanCreate(RemoteVoidTaskBoolRemote v);
        Task<Authorized> CanCreate(RemoteVoidTaskStringRemote v);
        Task<Authorized> CanInsert(RemoteVoidBoolRemote v);
        Task<Authorized> CanInsert(RemoteVoidStringRemote v);
        Task<Authorized> CanInsert(RemoteVoidTaskBoolRemote v);
        Task<Authorized> CanInsert(RemoteVoidTaskStringRemote v);
        Task<Authorized> CanCreate(RemoteTrueBoolBoolRemote v);
        Task<Authorized> CanCreate(RemoteTrueBoolStringRemote v);
        Task<Authorized> CanCreate(RemoteTrueBoolTaskBoolRemote v);
        Task<Authorized> CanCreate(RemoteTrueBoolTaskStringRemote v);
        Task<Authorized> CanInsert(RemoteTrueBoolBoolRemote v);
        Task<Authorized> CanInsert(RemoteTrueBoolStringRemote v);
        Task<Authorized> CanInsert(RemoteTrueBoolTaskBoolRemote v);
        Task<Authorized> CanInsert(RemoteTrueBoolTaskStringRemote v);
        Task<Authorized> CanCreate(RemoteFalseBoolBoolRemote v);
        Task<Authorized> CanCreate(RemoteFalseBoolStringRemote v);
        Task<Authorized> CanCreate(RemoteFalseBoolTaskBoolRemote v);
        Task<Authorized> CanCreate(RemoteFalseBoolTaskStringRemote v);
        Task<Authorized> CanInsert(RemoteFalseBoolBoolRemote v);
        Task<Authorized> CanInsert(RemoteFalseBoolStringRemote v);
        Task<Authorized> CanInsert(RemoteFalseBoolTaskBoolRemote v);
        Task<Authorized> CanInsert(RemoteFalseBoolTaskStringRemote v);
        Task<Authorized> CanCreate(RemoteTaskVoidBoolRemote v);
        Task<Authorized> CanCreate(RemoteTaskVoidStringRemote v);
        Task<Authorized> CanCreate(RemoteTaskVoidTaskBoolRemote v);
        Task<Authorized> CanCreate(RemoteTaskVoidTaskStringRemote v);
        Task<Authorized> CanInsert(RemoteTaskVoidBoolRemote v);
        Task<Authorized> CanInsert(RemoteTaskVoidStringRemote v);
        Task<Authorized> CanInsert(RemoteTaskVoidTaskBoolRemote v);
        Task<Authorized> CanInsert(RemoteTaskVoidTaskStringRemote v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolBoolRemote v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolStringRemote v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskBoolRemote v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskStringRemote v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolBoolRemote v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolStringRemote v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskBoolRemote v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskStringRemote v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolBoolRemote v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolStringRemote v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskBoolRemote v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskStringRemote v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolBoolRemote v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolStringRemote v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskBoolRemote v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskStringRemote v);
        Authorized CanCreate(VoidBoolDeny v);
        Authorized CanCreate(VoidStringDeny v);
        Task<Authorized> CanCreate(VoidTaskBoolDeny v);
        Task<Authorized> CanCreate(VoidTaskStringDeny v);
        Authorized CanInsert(VoidBoolDeny v);
        Authorized CanInsert(VoidStringDeny v);
        Task<Authorized> CanInsert(VoidTaskBoolDeny v);
        Task<Authorized> CanInsert(VoidTaskStringDeny v);
        Authorized CanCreate(TrueBoolBoolDeny v);
        Authorized CanCreate(TrueBoolStringDeny v);
        Task<Authorized> CanCreate(TrueBoolTaskBoolDeny v);
        Task<Authorized> CanCreate(TrueBoolTaskStringDeny v);
        Authorized CanInsert(TrueBoolBoolDeny v);
        Authorized CanInsert(TrueBoolStringDeny v);
        Task<Authorized> CanInsert(TrueBoolTaskBoolDeny v);
        Task<Authorized> CanInsert(TrueBoolTaskStringDeny v);
        Authorized CanCreate(FalseBoolBoolDeny v);
        Authorized CanCreate(FalseBoolStringDeny v);
        Task<Authorized> CanCreate(FalseBoolTaskBoolDeny v);
        Task<Authorized> CanCreate(FalseBoolTaskStringDeny v);
        Authorized CanInsert(FalseBoolBoolDeny v);
        Authorized CanInsert(FalseBoolStringDeny v);
        Task<Authorized> CanInsert(FalseBoolTaskBoolDeny v);
        Task<Authorized> CanInsert(FalseBoolTaskStringDeny v);
        Authorized CanCreate(TaskVoidBoolDeny v);
        Authorized CanCreate(TaskVoidStringDeny v);
        Task<Authorized> CanCreate(TaskVoidTaskBoolDeny v);
        Task<Authorized> CanCreate(TaskVoidTaskStringDeny v);
        Authorized CanInsert(TaskVoidBoolDeny v);
        Authorized CanInsert(TaskVoidStringDeny v);
        Task<Authorized> CanInsert(TaskVoidTaskBoolDeny v);
        Task<Authorized> CanInsert(TaskVoidTaskStringDeny v);
        Authorized CanCreate(TaskTrueBoolBoolDeny v);
        Authorized CanCreate(TaskTrueBoolStringDeny v);
        Task<Authorized> CanCreate(TaskTrueBoolTaskBoolDeny v);
        Task<Authorized> CanCreate(TaskTrueBoolTaskStringDeny v);
        Authorized CanInsert(TaskTrueBoolBoolDeny v);
        Authorized CanInsert(TaskTrueBoolStringDeny v);
        Task<Authorized> CanInsert(TaskTrueBoolTaskBoolDeny v);
        Task<Authorized> CanInsert(TaskTrueBoolTaskStringDeny v);
        Authorized CanCreate(TaskFalseBoolBoolDeny v);
        Authorized CanCreate(TaskFalseBoolStringDeny v);
        Task<Authorized> CanCreate(TaskFalseBoolTaskBoolDeny v);
        Task<Authorized> CanCreate(TaskFalseBoolTaskStringDeny v);
        Authorized CanInsert(TaskFalseBoolBoolDeny v);
        Authorized CanInsert(TaskFalseBoolStringDeny v);
        Task<Authorized> CanInsert(TaskFalseBoolTaskBoolDeny v);
        Task<Authorized> CanInsert(TaskFalseBoolTaskStringDeny v);
        Task<Authorized> CanCreate(VoidBoolRemoteDeny v);
        Task<Authorized> CanCreate(VoidStringRemoteDeny v);
        Task<Authorized> CanCreate(VoidTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(VoidTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(VoidBoolRemoteDeny v);
        Task<Authorized> CanInsert(VoidStringRemoteDeny v);
        Task<Authorized> CanInsert(VoidTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(VoidTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(TrueBoolBoolRemoteDeny v);
        Task<Authorized> CanCreate(TrueBoolStringRemoteDeny v);
        Task<Authorized> CanCreate(TrueBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(TrueBoolTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(TrueBoolBoolRemoteDeny v);
        Task<Authorized> CanInsert(TrueBoolStringRemoteDeny v);
        Task<Authorized> CanInsert(TrueBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(TrueBoolTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(FalseBoolBoolRemoteDeny v);
        Task<Authorized> CanCreate(FalseBoolStringRemoteDeny v);
        Task<Authorized> CanCreate(FalseBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(FalseBoolTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(FalseBoolBoolRemoteDeny v);
        Task<Authorized> CanInsert(FalseBoolStringRemoteDeny v);
        Task<Authorized> CanInsert(FalseBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(FalseBoolTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(TaskVoidBoolRemoteDeny v);
        Task<Authorized> CanCreate(TaskVoidStringRemoteDeny v);
        Task<Authorized> CanCreate(TaskVoidTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(TaskVoidTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(TaskVoidBoolRemoteDeny v);
        Task<Authorized> CanInsert(TaskVoidStringRemoteDeny v);
        Task<Authorized> CanInsert(TaskVoidTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(TaskVoidTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(TaskTrueBoolBoolRemoteDeny v);
        Task<Authorized> CanCreate(TaskTrueBoolStringRemoteDeny v);
        Task<Authorized> CanCreate(TaskTrueBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(TaskTrueBoolTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(TaskTrueBoolBoolRemoteDeny v);
        Task<Authorized> CanInsert(TaskTrueBoolStringRemoteDeny v);
        Task<Authorized> CanInsert(TaskTrueBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(TaskTrueBoolTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(TaskFalseBoolBoolRemoteDeny v);
        Task<Authorized> CanCreate(TaskFalseBoolStringRemoteDeny v);
        Task<Authorized> CanCreate(TaskFalseBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(TaskFalseBoolTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(TaskFalseBoolBoolRemoteDeny v);
        Task<Authorized> CanInsert(TaskFalseBoolStringRemoteDeny v);
        Task<Authorized> CanInsert(TaskFalseBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(TaskFalseBoolTaskStringRemoteDeny v);
        Authorized CanCreate(RemoteVoidBoolDeny v);
        Authorized CanCreate(RemoteVoidStringDeny v);
        Task<Authorized> CanCreate(RemoteVoidTaskBoolDeny v);
        Task<Authorized> CanCreate(RemoteVoidTaskStringDeny v);
        Authorized CanInsert(RemoteVoidBoolDeny v);
        Authorized CanInsert(RemoteVoidStringDeny v);
        Task<Authorized> CanInsert(RemoteVoidTaskBoolDeny v);
        Task<Authorized> CanInsert(RemoteVoidTaskStringDeny v);
        Authorized CanCreate(RemoteTrueBoolBoolDeny v);
        Authorized CanCreate(RemoteTrueBoolStringDeny v);
        Task<Authorized> CanCreate(RemoteTrueBoolTaskBoolDeny v);
        Task<Authorized> CanCreate(RemoteTrueBoolTaskStringDeny v);
        Authorized CanInsert(RemoteTrueBoolBoolDeny v);
        Authorized CanInsert(RemoteTrueBoolStringDeny v);
        Task<Authorized> CanInsert(RemoteTrueBoolTaskBoolDeny v);
        Task<Authorized> CanInsert(RemoteTrueBoolTaskStringDeny v);
        Authorized CanCreate(RemoteFalseBoolBoolDeny v);
        Authorized CanCreate(RemoteFalseBoolStringDeny v);
        Task<Authorized> CanCreate(RemoteFalseBoolTaskBoolDeny v);
        Task<Authorized> CanCreate(RemoteFalseBoolTaskStringDeny v);
        Authorized CanInsert(RemoteFalseBoolBoolDeny v);
        Authorized CanInsert(RemoteFalseBoolStringDeny v);
        Task<Authorized> CanInsert(RemoteFalseBoolTaskBoolDeny v);
        Task<Authorized> CanInsert(RemoteFalseBoolTaskStringDeny v);
        Authorized CanCreate(RemoteTaskVoidBoolDeny v);
        Authorized CanCreate(RemoteTaskVoidStringDeny v);
        Task<Authorized> CanCreate(RemoteTaskVoidTaskBoolDeny v);
        Task<Authorized> CanCreate(RemoteTaskVoidTaskStringDeny v);
        Authorized CanInsert(RemoteTaskVoidBoolDeny v);
        Authorized CanInsert(RemoteTaskVoidStringDeny v);
        Task<Authorized> CanInsert(RemoteTaskVoidTaskBoolDeny v);
        Task<Authorized> CanInsert(RemoteTaskVoidTaskStringDeny v);
        Authorized CanCreate(RemoteTaskTrueBoolBoolDeny v);
        Authorized CanCreate(RemoteTaskTrueBoolStringDeny v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskBoolDeny v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskStringDeny v);
        Authorized CanInsert(RemoteTaskTrueBoolBoolDeny v);
        Authorized CanInsert(RemoteTaskTrueBoolStringDeny v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskBoolDeny v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskStringDeny v);
        Authorized CanCreate(RemoteTaskFalseBoolBoolDeny v);
        Authorized CanCreate(RemoteTaskFalseBoolStringDeny v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskBoolDeny v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskStringDeny v);
        Authorized CanInsert(RemoteTaskFalseBoolBoolDeny v);
        Authorized CanInsert(RemoteTaskFalseBoolStringDeny v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskBoolDeny v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskStringDeny v);
        Task<Authorized> CanCreate(RemoteVoidBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteVoidStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteVoidTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteVoidTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteVoidBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteVoidStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteVoidTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteVoidTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTrueBoolBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTrueBoolStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTrueBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTrueBoolTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTrueBoolBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTrueBoolStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTrueBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTrueBoolTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteFalseBoolBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteFalseBoolStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteFalseBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteFalseBoolTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteFalseBoolBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteFalseBoolStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteFalseBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteFalseBoolTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskVoidBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskVoidStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskVoidTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskVoidTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskVoidBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskVoidStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskVoidTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskVoidTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolStringRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolStringRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskBoolRemoteDeny v);
        Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskStringRemoteDeny v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, VoidBool v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, VoidBool v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, VoidString v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, VoidString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskString v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, TrueBoolBool v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, TrueBoolBool v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, TrueBoolString v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, TrueBoolString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskString v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, FalseBoolBool v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, FalseBoolBool v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, FalseBoolString v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, FalseBoolString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBool v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBool v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskString v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskString v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemote v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemote v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemote v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, VoidBoolDeny v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, VoidBoolDeny v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, VoidStringDeny v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, VoidStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskStringDeny v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, TrueBoolBoolDeny v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, TrueBoolBoolDeny v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, TrueBoolStringDeny v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, TrueBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskStringDeny v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, FalseBoolBoolDeny v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, FalseBoolBoolDeny v);
        IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, FalseBoolStringDeny v);
        Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, FalseBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemoteDeny v);
        Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemoteDeny v);
        Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemoteDeny v);
    }

    internal class AuthorizedAllCombinationsFactory : FactoryEditBase<AuthorizedAllCombinations>, IFactoryEditBase<AuthorizedAllCombinations>, IAuthorizedAllCombinationsFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IDoRemoteRequest DoRemoteRequest;
        // Delegates
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create24Delegate(VoidBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create25Delegate(VoidStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create26Delegate(VoidTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create27Delegate(VoidTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create28Delegate(TrueBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create29Delegate(TrueBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create30Delegate(TrueBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create31Delegate(TrueBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create32Delegate(FalseBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create33Delegate(FalseBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create34Delegate(FalseBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create35Delegate(FalseBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create36Delegate(TaskVoidBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create37Delegate(TaskVoidStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create38Delegate(TaskVoidTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create39Delegate(TaskVoidTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create40Delegate(TaskTrueBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create41Delegate(TaskTrueBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create42Delegate(TaskTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create43Delegate(TaskTrueBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create44Delegate(TaskFalseBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create45Delegate(TaskFalseBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create46Delegate(TaskFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create47Delegate(TaskFalseBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create48Delegate(RemoteVoidBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create49Delegate(RemoteVoidString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create50Delegate(RemoteVoidTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create51Delegate(RemoteVoidTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create52Delegate(RemoteTrueBoolBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create53Delegate(RemoteTrueBoolString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create54Delegate(RemoteTrueBoolTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create55Delegate(RemoteTrueBoolTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create56Delegate(RemoteFalseBoolBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create57Delegate(RemoteFalseBoolString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create58Delegate(RemoteFalseBoolTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create59Delegate(RemoteFalseBoolTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create60Delegate(RemoteTaskVoidBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create61Delegate(RemoteTaskVoidString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create62Delegate(RemoteTaskVoidTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create63Delegate(RemoteTaskVoidTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create64Delegate(RemoteTaskTrueBoolBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create65Delegate(RemoteTaskTrueBoolString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create66Delegate(RemoteTaskTrueBoolTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create67Delegate(RemoteTaskTrueBoolTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create68Delegate(RemoteTaskFalseBoolBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create69Delegate(RemoteTaskFalseBoolString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create70Delegate(RemoteTaskFalseBoolTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create71Delegate(RemoteTaskFalseBoolTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create72Delegate(RemoteVoidBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create73Delegate(RemoteVoidStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create74Delegate(RemoteVoidTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create75Delegate(RemoteVoidTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create76Delegate(RemoteTrueBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create77Delegate(RemoteTrueBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create78Delegate(RemoteTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create79Delegate(RemoteTrueBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create80Delegate(RemoteFalseBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create81Delegate(RemoteFalseBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create82Delegate(RemoteFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create83Delegate(RemoteFalseBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create84Delegate(RemoteTaskVoidBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create85Delegate(RemoteTaskVoidStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create86Delegate(RemoteTaskVoidTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create87Delegate(RemoteTaskVoidTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create88Delegate(RemoteTaskTrueBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create89Delegate(RemoteTaskTrueBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create90Delegate(RemoteTaskTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create91Delegate(RemoteTaskTrueBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create92Delegate(RemoteTaskFalseBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create93Delegate(RemoteTaskFalseBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create94Delegate(RemoteTaskFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create95Delegate(RemoteTaskFalseBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create120Delegate(VoidBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create121Delegate(VoidStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create122Delegate(VoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create123Delegate(VoidTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create124Delegate(TrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create125Delegate(TrueBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create126Delegate(TrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create127Delegate(TrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create128Delegate(FalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create129Delegate(FalseBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create130Delegate(FalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create131Delegate(FalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create132Delegate(TaskVoidBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create133Delegate(TaskVoidStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create134Delegate(TaskVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create135Delegate(TaskVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create136Delegate(TaskTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create137Delegate(TaskTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create138Delegate(TaskTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create139Delegate(TaskTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create140Delegate(TaskFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create141Delegate(TaskFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create142Delegate(TaskFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create143Delegate(TaskFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create144Delegate(RemoteVoidBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create145Delegate(RemoteVoidStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create146Delegate(RemoteVoidTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create147Delegate(RemoteVoidTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create148Delegate(RemoteTrueBoolBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create149Delegate(RemoteTrueBoolStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create150Delegate(RemoteTrueBoolTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create151Delegate(RemoteTrueBoolTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create152Delegate(RemoteFalseBoolBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create153Delegate(RemoteFalseBoolStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create154Delegate(RemoteFalseBoolTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create155Delegate(RemoteFalseBoolTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create156Delegate(RemoteTaskVoidBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create157Delegate(RemoteTaskVoidStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create158Delegate(RemoteTaskVoidTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create159Delegate(RemoteTaskVoidTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create160Delegate(RemoteTaskTrueBoolBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create161Delegate(RemoteTaskTrueBoolStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create162Delegate(RemoteTaskTrueBoolTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create163Delegate(RemoteTaskTrueBoolTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create164Delegate(RemoteTaskFalseBoolBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create165Delegate(RemoteTaskFalseBoolStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create166Delegate(RemoteTaskFalseBoolTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create167Delegate(RemoteTaskFalseBoolTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create168Delegate(RemoteVoidBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create169Delegate(RemoteVoidStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create170Delegate(RemoteVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create171Delegate(RemoteVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create172Delegate(RemoteTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create173Delegate(RemoteTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create174Delegate(RemoteTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create175Delegate(RemoteTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create176Delegate(RemoteFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create177Delegate(RemoteFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create178Delegate(RemoteFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create179Delegate(RemoteFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create180Delegate(RemoteTaskVoidBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create181Delegate(RemoteTaskVoidStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create182Delegate(RemoteTaskVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create183Delegate(RemoteTaskVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create184Delegate(RemoteTaskTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create185Delegate(RemoteTaskTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create186Delegate(RemoteTaskTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create187Delegate(RemoteTaskTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create188Delegate(RemoteTaskFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create189Delegate(RemoteTaskFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create190Delegate(RemoteTaskFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Create191Delegate(RemoteTaskFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate24Delegate(VoidBoolRemote v);
        public delegate Task<Authorized> CanCreate25Delegate(VoidStringRemote v);
        public delegate Task<Authorized> CanCreate26Delegate(VoidTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate27Delegate(VoidTaskStringRemote v);
        public delegate Task<Authorized> CanInsert24Delegate(VoidBoolRemote v);
        public delegate Task<Authorized> CanInsert25Delegate(VoidStringRemote v);
        public delegate Task<Authorized> CanInsert26Delegate(VoidTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert27Delegate(VoidTaskStringRemote v);
        public delegate Task<Authorized> CanCreate28Delegate(TrueBoolBoolRemote v);
        public delegate Task<Authorized> CanCreate29Delegate(TrueBoolStringRemote v);
        public delegate Task<Authorized> CanCreate30Delegate(TrueBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate31Delegate(TrueBoolTaskStringRemote v);
        public delegate Task<Authorized> CanInsert28Delegate(TrueBoolBoolRemote v);
        public delegate Task<Authorized> CanInsert29Delegate(TrueBoolStringRemote v);
        public delegate Task<Authorized> CanInsert30Delegate(TrueBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert31Delegate(TrueBoolTaskStringRemote v);
        public delegate Task<Authorized> CanCreate32Delegate(FalseBoolBoolRemote v);
        public delegate Task<Authorized> CanCreate33Delegate(FalseBoolStringRemote v);
        public delegate Task<Authorized> CanCreate34Delegate(FalseBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate35Delegate(FalseBoolTaskStringRemote v);
        public delegate Task<Authorized> CanInsert32Delegate(FalseBoolBoolRemote v);
        public delegate Task<Authorized> CanInsert33Delegate(FalseBoolStringRemote v);
        public delegate Task<Authorized> CanInsert34Delegate(FalseBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert35Delegate(FalseBoolTaskStringRemote v);
        public delegate Task<Authorized> CanCreate36Delegate(TaskVoidBoolRemote v);
        public delegate Task<Authorized> CanCreate37Delegate(TaskVoidStringRemote v);
        public delegate Task<Authorized> CanCreate38Delegate(TaskVoidTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate39Delegate(TaskVoidTaskStringRemote v);
        public delegate Task<Authorized> CanInsert36Delegate(TaskVoidBoolRemote v);
        public delegate Task<Authorized> CanInsert37Delegate(TaskVoidStringRemote v);
        public delegate Task<Authorized> CanInsert38Delegate(TaskVoidTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert39Delegate(TaskVoidTaskStringRemote v);
        public delegate Task<Authorized> CanCreate40Delegate(TaskTrueBoolBoolRemote v);
        public delegate Task<Authorized> CanCreate41Delegate(TaskTrueBoolStringRemote v);
        public delegate Task<Authorized> CanCreate42Delegate(TaskTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate43Delegate(TaskTrueBoolTaskStringRemote v);
        public delegate Task<Authorized> CanInsert40Delegate(TaskTrueBoolBoolRemote v);
        public delegate Task<Authorized> CanInsert41Delegate(TaskTrueBoolStringRemote v);
        public delegate Task<Authorized> CanInsert42Delegate(TaskTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert43Delegate(TaskTrueBoolTaskStringRemote v);
        public delegate Task<Authorized> CanCreate44Delegate(TaskFalseBoolBoolRemote v);
        public delegate Task<Authorized> CanCreate45Delegate(TaskFalseBoolStringRemote v);
        public delegate Task<Authorized> CanCreate46Delegate(TaskFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate47Delegate(TaskFalseBoolTaskStringRemote v);
        public delegate Task<Authorized> CanInsert44Delegate(TaskFalseBoolBoolRemote v);
        public delegate Task<Authorized> CanInsert45Delegate(TaskFalseBoolStringRemote v);
        public delegate Task<Authorized> CanInsert46Delegate(TaskFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert47Delegate(TaskFalseBoolTaskStringRemote v);
        public delegate Task<Authorized> CanCreate72Delegate(RemoteVoidBoolRemote v);
        public delegate Task<Authorized> CanCreate73Delegate(RemoteVoidStringRemote v);
        public delegate Task<Authorized> CanCreate74Delegate(RemoteVoidTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate75Delegate(RemoteVoidTaskStringRemote v);
        public delegate Task<Authorized> CanInsert72Delegate(RemoteVoidBoolRemote v);
        public delegate Task<Authorized> CanInsert73Delegate(RemoteVoidStringRemote v);
        public delegate Task<Authorized> CanInsert74Delegate(RemoteVoidTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert75Delegate(RemoteVoidTaskStringRemote v);
        public delegate Task<Authorized> CanCreate76Delegate(RemoteTrueBoolBoolRemote v);
        public delegate Task<Authorized> CanCreate77Delegate(RemoteTrueBoolStringRemote v);
        public delegate Task<Authorized> CanCreate78Delegate(RemoteTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate79Delegate(RemoteTrueBoolTaskStringRemote v);
        public delegate Task<Authorized> CanInsert76Delegate(RemoteTrueBoolBoolRemote v);
        public delegate Task<Authorized> CanInsert77Delegate(RemoteTrueBoolStringRemote v);
        public delegate Task<Authorized> CanInsert78Delegate(RemoteTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert79Delegate(RemoteTrueBoolTaskStringRemote v);
        public delegate Task<Authorized> CanCreate80Delegate(RemoteFalseBoolBoolRemote v);
        public delegate Task<Authorized> CanCreate81Delegate(RemoteFalseBoolStringRemote v);
        public delegate Task<Authorized> CanCreate82Delegate(RemoteFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate83Delegate(RemoteFalseBoolTaskStringRemote v);
        public delegate Task<Authorized> CanInsert80Delegate(RemoteFalseBoolBoolRemote v);
        public delegate Task<Authorized> CanInsert81Delegate(RemoteFalseBoolStringRemote v);
        public delegate Task<Authorized> CanInsert82Delegate(RemoteFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert83Delegate(RemoteFalseBoolTaskStringRemote v);
        public delegate Task<Authorized> CanCreate84Delegate(RemoteTaskVoidBoolRemote v);
        public delegate Task<Authorized> CanCreate85Delegate(RemoteTaskVoidStringRemote v);
        public delegate Task<Authorized> CanCreate86Delegate(RemoteTaskVoidTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate87Delegate(RemoteTaskVoidTaskStringRemote v);
        public delegate Task<Authorized> CanInsert84Delegate(RemoteTaskVoidBoolRemote v);
        public delegate Task<Authorized> CanInsert85Delegate(RemoteTaskVoidStringRemote v);
        public delegate Task<Authorized> CanInsert86Delegate(RemoteTaskVoidTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert87Delegate(RemoteTaskVoidTaskStringRemote v);
        public delegate Task<Authorized> CanCreate88Delegate(RemoteTaskTrueBoolBoolRemote v);
        public delegate Task<Authorized> CanCreate89Delegate(RemoteTaskTrueBoolStringRemote v);
        public delegate Task<Authorized> CanCreate90Delegate(RemoteTaskTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate91Delegate(RemoteTaskTrueBoolTaskStringRemote v);
        public delegate Task<Authorized> CanInsert88Delegate(RemoteTaskTrueBoolBoolRemote v);
        public delegate Task<Authorized> CanInsert89Delegate(RemoteTaskTrueBoolStringRemote v);
        public delegate Task<Authorized> CanInsert90Delegate(RemoteTaskTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert91Delegate(RemoteTaskTrueBoolTaskStringRemote v);
        public delegate Task<Authorized> CanCreate92Delegate(RemoteTaskFalseBoolBoolRemote v);
        public delegate Task<Authorized> CanCreate93Delegate(RemoteTaskFalseBoolStringRemote v);
        public delegate Task<Authorized> CanCreate94Delegate(RemoteTaskFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanCreate95Delegate(RemoteTaskFalseBoolTaskStringRemote v);
        public delegate Task<Authorized> CanInsert92Delegate(RemoteTaskFalseBoolBoolRemote v);
        public delegate Task<Authorized> CanInsert93Delegate(RemoteTaskFalseBoolStringRemote v);
        public delegate Task<Authorized> CanInsert94Delegate(RemoteTaskFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized> CanInsert95Delegate(RemoteTaskFalseBoolTaskStringRemote v);
        public delegate Task<Authorized> CanCreate120Delegate(VoidBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate121Delegate(VoidStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate122Delegate(VoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate123Delegate(VoidTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert120Delegate(VoidBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert121Delegate(VoidStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert122Delegate(VoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert123Delegate(VoidTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate124Delegate(TrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate125Delegate(TrueBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate126Delegate(TrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate127Delegate(TrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert124Delegate(TrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert125Delegate(TrueBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert126Delegate(TrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert127Delegate(TrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate128Delegate(FalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate129Delegate(FalseBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate130Delegate(FalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate131Delegate(FalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert128Delegate(FalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert129Delegate(FalseBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert130Delegate(FalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert131Delegate(FalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate132Delegate(TaskVoidBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate133Delegate(TaskVoidStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate134Delegate(TaskVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate135Delegate(TaskVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert132Delegate(TaskVoidBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert133Delegate(TaskVoidStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert134Delegate(TaskVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert135Delegate(TaskVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate136Delegate(TaskTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate137Delegate(TaskTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate138Delegate(TaskTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate139Delegate(TaskTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert136Delegate(TaskTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert137Delegate(TaskTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert138Delegate(TaskTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert139Delegate(TaskTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate140Delegate(TaskFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate141Delegate(TaskFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate142Delegate(TaskFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate143Delegate(TaskFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert140Delegate(TaskFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert141Delegate(TaskFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert142Delegate(TaskFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert143Delegate(TaskFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate168Delegate(RemoteVoidBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate169Delegate(RemoteVoidStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate170Delegate(RemoteVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate171Delegate(RemoteVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert168Delegate(RemoteVoidBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert169Delegate(RemoteVoidStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert170Delegate(RemoteVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert171Delegate(RemoteVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate172Delegate(RemoteTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate173Delegate(RemoteTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate174Delegate(RemoteTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate175Delegate(RemoteTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert172Delegate(RemoteTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert173Delegate(RemoteTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert174Delegate(RemoteTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert175Delegate(RemoteTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate176Delegate(RemoteFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate177Delegate(RemoteFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate178Delegate(RemoteFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate179Delegate(RemoteFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert176Delegate(RemoteFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert177Delegate(RemoteFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert178Delegate(RemoteFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert179Delegate(RemoteFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate180Delegate(RemoteTaskVoidBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate181Delegate(RemoteTaskVoidStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate182Delegate(RemoteTaskVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate183Delegate(RemoteTaskVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert180Delegate(RemoteTaskVoidBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert181Delegate(RemoteTaskVoidStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert182Delegate(RemoteTaskVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert183Delegate(RemoteTaskVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate184Delegate(RemoteTaskTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate185Delegate(RemoteTaskTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate186Delegate(RemoteTaskTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate187Delegate(RemoteTaskTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert184Delegate(RemoteTaskTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert185Delegate(RemoteTaskTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert186Delegate(RemoteTaskTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert187Delegate(RemoteTaskTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate188Delegate(RemoteTaskFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate189Delegate(RemoteTaskFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanCreate190Delegate(RemoteTaskFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanCreate191Delegate(RemoteTaskFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert188Delegate(RemoteTaskFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert189Delegate(RemoteTaskFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized> CanInsert190Delegate(RemoteTaskFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized> CanInsert191Delegate(RemoteTaskFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save24Delegate(IAuthorizedAllCombinations target, VoidBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save25Delegate(IAuthorizedAllCombinations target, VoidStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save26Delegate(IAuthorizedAllCombinations target, VoidTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save27Delegate(IAuthorizedAllCombinations target, VoidTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save28Delegate(IAuthorizedAllCombinations target, TrueBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save29Delegate(IAuthorizedAllCombinations target, TrueBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save30Delegate(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save31Delegate(IAuthorizedAllCombinations target, TrueBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save32Delegate(IAuthorizedAllCombinations target, FalseBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save33Delegate(IAuthorizedAllCombinations target, FalseBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save34Delegate(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save35Delegate(IAuthorizedAllCombinations target, FalseBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save36Delegate(IAuthorizedAllCombinations target, TaskVoidBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save37Delegate(IAuthorizedAllCombinations target, TaskVoidStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save38Delegate(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save39Delegate(IAuthorizedAllCombinations target, TaskVoidTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save40Delegate(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save41Delegate(IAuthorizedAllCombinations target, TaskTrueBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save42Delegate(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save43Delegate(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save44Delegate(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save45Delegate(IAuthorizedAllCombinations target, TaskFalseBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save46Delegate(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save47Delegate(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save48Delegate(IAuthorizedAllCombinations target, RemoteVoidBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save49Delegate(IAuthorizedAllCombinations target, RemoteVoidString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save50Delegate(IAuthorizedAllCombinations target, RemoteVoidTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save51Delegate(IAuthorizedAllCombinations target, RemoteVoidTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save52Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save53Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save54Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save55Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save56Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save57Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save58Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save59Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save60Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save61Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save62Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save63Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save64Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save65Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save66Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save67Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save68Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save69Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save70Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBool v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save71Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskString v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save72Delegate(IAuthorizedAllCombinations target, RemoteVoidBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save73Delegate(IAuthorizedAllCombinations target, RemoteVoidStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save74Delegate(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save75Delegate(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save76Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save77Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save78Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save79Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save80Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save81Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save82Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save83Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save84Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save85Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save86Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save87Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save88Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save89Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save90Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save91Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save92Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save93Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save94Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save95Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemote v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save120Delegate(IAuthorizedAllCombinations target, VoidBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save121Delegate(IAuthorizedAllCombinations target, VoidStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save122Delegate(IAuthorizedAllCombinations target, VoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save123Delegate(IAuthorizedAllCombinations target, VoidTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save124Delegate(IAuthorizedAllCombinations target, TrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save125Delegate(IAuthorizedAllCombinations target, TrueBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save126Delegate(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save127Delegate(IAuthorizedAllCombinations target, TrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save128Delegate(IAuthorizedAllCombinations target, FalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save129Delegate(IAuthorizedAllCombinations target, FalseBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save130Delegate(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save131Delegate(IAuthorizedAllCombinations target, FalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save132Delegate(IAuthorizedAllCombinations target, TaskVoidBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save133Delegate(IAuthorizedAllCombinations target, TaskVoidStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save134Delegate(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save135Delegate(IAuthorizedAllCombinations target, TaskVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save136Delegate(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save137Delegate(IAuthorizedAllCombinations target, TaskTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save138Delegate(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save139Delegate(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save140Delegate(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save141Delegate(IAuthorizedAllCombinations target, TaskFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save142Delegate(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save143Delegate(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save144Delegate(IAuthorizedAllCombinations target, RemoteVoidBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save145Delegate(IAuthorizedAllCombinations target, RemoteVoidStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save146Delegate(IAuthorizedAllCombinations target, RemoteVoidTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save147Delegate(IAuthorizedAllCombinations target, RemoteVoidTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save148Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save149Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save150Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save151Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save152Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save153Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save154Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save155Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save156Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save157Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save158Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save159Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save160Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save161Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save162Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save163Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save164Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save165Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save166Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save167Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save168Delegate(IAuthorizedAllCombinations target, RemoteVoidBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save169Delegate(IAuthorizedAllCombinations target, RemoteVoidStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save170Delegate(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save171Delegate(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save172Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save173Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save174Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save175Delegate(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save176Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save177Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save178Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save179Delegate(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save180Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save181Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save182Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save183Delegate(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save184Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save185Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save186Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save187Delegate(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save188Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save189Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save190Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemoteDeny v);
        public delegate Task<Authorized<IAuthorizedAllCombinations>> Save191Delegate(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemoteDeny v);
        // Delegate Properties to provide Local or Remote fork in execution
        public AuthorizationAllCombinations AuthorizationAllCombinations { get; }
        public Create24Delegate Create24Property { get; }
        public Create25Delegate Create25Property { get; }
        public Create26Delegate Create26Property { get; }
        public Create27Delegate Create27Property { get; }
        public Create28Delegate Create28Property { get; }
        public Create29Delegate Create29Property { get; }
        public Create30Delegate Create30Property { get; }
        public Create31Delegate Create31Property { get; }
        public Create32Delegate Create32Property { get; }
        public Create33Delegate Create33Property { get; }
        public Create34Delegate Create34Property { get; }
        public Create35Delegate Create35Property { get; }
        public Create36Delegate Create36Property { get; }
        public Create37Delegate Create37Property { get; }
        public Create38Delegate Create38Property { get; }
        public Create39Delegate Create39Property { get; }
        public Create40Delegate Create40Property { get; }
        public Create41Delegate Create41Property { get; }
        public Create42Delegate Create42Property { get; }
        public Create43Delegate Create43Property { get; }
        public Create44Delegate Create44Property { get; }
        public Create45Delegate Create45Property { get; }
        public Create46Delegate Create46Property { get; }
        public Create47Delegate Create47Property { get; }
        public Create48Delegate Create48Property { get; }
        public Create49Delegate Create49Property { get; }
        public Create50Delegate Create50Property { get; }
        public Create51Delegate Create51Property { get; }
        public Create52Delegate Create52Property { get; }
        public Create53Delegate Create53Property { get; }
        public Create54Delegate Create54Property { get; }
        public Create55Delegate Create55Property { get; }
        public Create56Delegate Create56Property { get; }
        public Create57Delegate Create57Property { get; }
        public Create58Delegate Create58Property { get; }
        public Create59Delegate Create59Property { get; }
        public Create60Delegate Create60Property { get; }
        public Create61Delegate Create61Property { get; }
        public Create62Delegate Create62Property { get; }
        public Create63Delegate Create63Property { get; }
        public Create64Delegate Create64Property { get; }
        public Create65Delegate Create65Property { get; }
        public Create66Delegate Create66Property { get; }
        public Create67Delegate Create67Property { get; }
        public Create68Delegate Create68Property { get; }
        public Create69Delegate Create69Property { get; }
        public Create70Delegate Create70Property { get; }
        public Create71Delegate Create71Property { get; }
        public Create72Delegate Create72Property { get; }
        public Create73Delegate Create73Property { get; }
        public Create74Delegate Create74Property { get; }
        public Create75Delegate Create75Property { get; }
        public Create76Delegate Create76Property { get; }
        public Create77Delegate Create77Property { get; }
        public Create78Delegate Create78Property { get; }
        public Create79Delegate Create79Property { get; }
        public Create80Delegate Create80Property { get; }
        public Create81Delegate Create81Property { get; }
        public Create82Delegate Create82Property { get; }
        public Create83Delegate Create83Property { get; }
        public Create84Delegate Create84Property { get; }
        public Create85Delegate Create85Property { get; }
        public Create86Delegate Create86Property { get; }
        public Create87Delegate Create87Property { get; }
        public Create88Delegate Create88Property { get; }
        public Create89Delegate Create89Property { get; }
        public Create90Delegate Create90Property { get; }
        public Create91Delegate Create91Property { get; }
        public Create92Delegate Create92Property { get; }
        public Create93Delegate Create93Property { get; }
        public Create94Delegate Create94Property { get; }
        public Create95Delegate Create95Property { get; }
        public Create120Delegate Create120Property { get; }
        public Create121Delegate Create121Property { get; }
        public Create122Delegate Create122Property { get; }
        public Create123Delegate Create123Property { get; }
        public Create124Delegate Create124Property { get; }
        public Create125Delegate Create125Property { get; }
        public Create126Delegate Create126Property { get; }
        public Create127Delegate Create127Property { get; }
        public Create128Delegate Create128Property { get; }
        public Create129Delegate Create129Property { get; }
        public Create130Delegate Create130Property { get; }
        public Create131Delegate Create131Property { get; }
        public Create132Delegate Create132Property { get; }
        public Create133Delegate Create133Property { get; }
        public Create134Delegate Create134Property { get; }
        public Create135Delegate Create135Property { get; }
        public Create136Delegate Create136Property { get; }
        public Create137Delegate Create137Property { get; }
        public Create138Delegate Create138Property { get; }
        public Create139Delegate Create139Property { get; }
        public Create140Delegate Create140Property { get; }
        public Create141Delegate Create141Property { get; }
        public Create142Delegate Create142Property { get; }
        public Create143Delegate Create143Property { get; }
        public Create144Delegate Create144Property { get; }
        public Create145Delegate Create145Property { get; }
        public Create146Delegate Create146Property { get; }
        public Create147Delegate Create147Property { get; }
        public Create148Delegate Create148Property { get; }
        public Create149Delegate Create149Property { get; }
        public Create150Delegate Create150Property { get; }
        public Create151Delegate Create151Property { get; }
        public Create152Delegate Create152Property { get; }
        public Create153Delegate Create153Property { get; }
        public Create154Delegate Create154Property { get; }
        public Create155Delegate Create155Property { get; }
        public Create156Delegate Create156Property { get; }
        public Create157Delegate Create157Property { get; }
        public Create158Delegate Create158Property { get; }
        public Create159Delegate Create159Property { get; }
        public Create160Delegate Create160Property { get; }
        public Create161Delegate Create161Property { get; }
        public Create162Delegate Create162Property { get; }
        public Create163Delegate Create163Property { get; }
        public Create164Delegate Create164Property { get; }
        public Create165Delegate Create165Property { get; }
        public Create166Delegate Create166Property { get; }
        public Create167Delegate Create167Property { get; }
        public Create168Delegate Create168Property { get; }
        public Create169Delegate Create169Property { get; }
        public Create170Delegate Create170Property { get; }
        public Create171Delegate Create171Property { get; }
        public Create172Delegate Create172Property { get; }
        public Create173Delegate Create173Property { get; }
        public Create174Delegate Create174Property { get; }
        public Create175Delegate Create175Property { get; }
        public Create176Delegate Create176Property { get; }
        public Create177Delegate Create177Property { get; }
        public Create178Delegate Create178Property { get; }
        public Create179Delegate Create179Property { get; }
        public Create180Delegate Create180Property { get; }
        public Create181Delegate Create181Property { get; }
        public Create182Delegate Create182Property { get; }
        public Create183Delegate Create183Property { get; }
        public Create184Delegate Create184Property { get; }
        public Create185Delegate Create185Property { get; }
        public Create186Delegate Create186Property { get; }
        public Create187Delegate Create187Property { get; }
        public Create188Delegate Create188Property { get; }
        public Create189Delegate Create189Property { get; }
        public Create190Delegate Create190Property { get; }
        public Create191Delegate Create191Property { get; }
        public CanCreate24Delegate CanCreate24Property { get; }
        public CanCreate25Delegate CanCreate25Property { get; }
        public CanCreate26Delegate CanCreate26Property { get; }
        public CanCreate27Delegate CanCreate27Property { get; }
        public CanInsert24Delegate CanInsert24Property { get; }
        public CanInsert25Delegate CanInsert25Property { get; }
        public CanInsert26Delegate CanInsert26Property { get; }
        public CanInsert27Delegate CanInsert27Property { get; }
        public CanCreate28Delegate CanCreate28Property { get; }
        public CanCreate29Delegate CanCreate29Property { get; }
        public CanCreate30Delegate CanCreate30Property { get; }
        public CanCreate31Delegate CanCreate31Property { get; }
        public CanInsert28Delegate CanInsert28Property { get; }
        public CanInsert29Delegate CanInsert29Property { get; }
        public CanInsert30Delegate CanInsert30Property { get; }
        public CanInsert31Delegate CanInsert31Property { get; }
        public CanCreate32Delegate CanCreate32Property { get; }
        public CanCreate33Delegate CanCreate33Property { get; }
        public CanCreate34Delegate CanCreate34Property { get; }
        public CanCreate35Delegate CanCreate35Property { get; }
        public CanInsert32Delegate CanInsert32Property { get; }
        public CanInsert33Delegate CanInsert33Property { get; }
        public CanInsert34Delegate CanInsert34Property { get; }
        public CanInsert35Delegate CanInsert35Property { get; }
        public CanCreate36Delegate CanCreate36Property { get; }
        public CanCreate37Delegate CanCreate37Property { get; }
        public CanCreate38Delegate CanCreate38Property { get; }
        public CanCreate39Delegate CanCreate39Property { get; }
        public CanInsert36Delegate CanInsert36Property { get; }
        public CanInsert37Delegate CanInsert37Property { get; }
        public CanInsert38Delegate CanInsert38Property { get; }
        public CanInsert39Delegate CanInsert39Property { get; }
        public CanCreate40Delegate CanCreate40Property { get; }
        public CanCreate41Delegate CanCreate41Property { get; }
        public CanCreate42Delegate CanCreate42Property { get; }
        public CanCreate43Delegate CanCreate43Property { get; }
        public CanInsert40Delegate CanInsert40Property { get; }
        public CanInsert41Delegate CanInsert41Property { get; }
        public CanInsert42Delegate CanInsert42Property { get; }
        public CanInsert43Delegate CanInsert43Property { get; }
        public CanCreate44Delegate CanCreate44Property { get; }
        public CanCreate45Delegate CanCreate45Property { get; }
        public CanCreate46Delegate CanCreate46Property { get; }
        public CanCreate47Delegate CanCreate47Property { get; }
        public CanInsert44Delegate CanInsert44Property { get; }
        public CanInsert45Delegate CanInsert45Property { get; }
        public CanInsert46Delegate CanInsert46Property { get; }
        public CanInsert47Delegate CanInsert47Property { get; }
        public CanCreate72Delegate CanCreate72Property { get; }
        public CanCreate73Delegate CanCreate73Property { get; }
        public CanCreate74Delegate CanCreate74Property { get; }
        public CanCreate75Delegate CanCreate75Property { get; }
        public CanInsert72Delegate CanInsert72Property { get; }
        public CanInsert73Delegate CanInsert73Property { get; }
        public CanInsert74Delegate CanInsert74Property { get; }
        public CanInsert75Delegate CanInsert75Property { get; }
        public CanCreate76Delegate CanCreate76Property { get; }
        public CanCreate77Delegate CanCreate77Property { get; }
        public CanCreate78Delegate CanCreate78Property { get; }
        public CanCreate79Delegate CanCreate79Property { get; }
        public CanInsert76Delegate CanInsert76Property { get; }
        public CanInsert77Delegate CanInsert77Property { get; }
        public CanInsert78Delegate CanInsert78Property { get; }
        public CanInsert79Delegate CanInsert79Property { get; }
        public CanCreate80Delegate CanCreate80Property { get; }
        public CanCreate81Delegate CanCreate81Property { get; }
        public CanCreate82Delegate CanCreate82Property { get; }
        public CanCreate83Delegate CanCreate83Property { get; }
        public CanInsert80Delegate CanInsert80Property { get; }
        public CanInsert81Delegate CanInsert81Property { get; }
        public CanInsert82Delegate CanInsert82Property { get; }
        public CanInsert83Delegate CanInsert83Property { get; }
        public CanCreate84Delegate CanCreate84Property { get; }
        public CanCreate85Delegate CanCreate85Property { get; }
        public CanCreate86Delegate CanCreate86Property { get; }
        public CanCreate87Delegate CanCreate87Property { get; }
        public CanInsert84Delegate CanInsert84Property { get; }
        public CanInsert85Delegate CanInsert85Property { get; }
        public CanInsert86Delegate CanInsert86Property { get; }
        public CanInsert87Delegate CanInsert87Property { get; }
        public CanCreate88Delegate CanCreate88Property { get; }
        public CanCreate89Delegate CanCreate89Property { get; }
        public CanCreate90Delegate CanCreate90Property { get; }
        public CanCreate91Delegate CanCreate91Property { get; }
        public CanInsert88Delegate CanInsert88Property { get; }
        public CanInsert89Delegate CanInsert89Property { get; }
        public CanInsert90Delegate CanInsert90Property { get; }
        public CanInsert91Delegate CanInsert91Property { get; }
        public CanCreate92Delegate CanCreate92Property { get; }
        public CanCreate93Delegate CanCreate93Property { get; }
        public CanCreate94Delegate CanCreate94Property { get; }
        public CanCreate95Delegate CanCreate95Property { get; }
        public CanInsert92Delegate CanInsert92Property { get; }
        public CanInsert93Delegate CanInsert93Property { get; }
        public CanInsert94Delegate CanInsert94Property { get; }
        public CanInsert95Delegate CanInsert95Property { get; }
        public CanCreate120Delegate CanCreate120Property { get; }
        public CanCreate121Delegate CanCreate121Property { get; }
        public CanCreate122Delegate CanCreate122Property { get; }
        public CanCreate123Delegate CanCreate123Property { get; }
        public CanInsert120Delegate CanInsert120Property { get; }
        public CanInsert121Delegate CanInsert121Property { get; }
        public CanInsert122Delegate CanInsert122Property { get; }
        public CanInsert123Delegate CanInsert123Property { get; }
        public CanCreate124Delegate CanCreate124Property { get; }
        public CanCreate125Delegate CanCreate125Property { get; }
        public CanCreate126Delegate CanCreate126Property { get; }
        public CanCreate127Delegate CanCreate127Property { get; }
        public CanInsert124Delegate CanInsert124Property { get; }
        public CanInsert125Delegate CanInsert125Property { get; }
        public CanInsert126Delegate CanInsert126Property { get; }
        public CanInsert127Delegate CanInsert127Property { get; }
        public CanCreate128Delegate CanCreate128Property { get; }
        public CanCreate129Delegate CanCreate129Property { get; }
        public CanCreate130Delegate CanCreate130Property { get; }
        public CanCreate131Delegate CanCreate131Property { get; }
        public CanInsert128Delegate CanInsert128Property { get; }
        public CanInsert129Delegate CanInsert129Property { get; }
        public CanInsert130Delegate CanInsert130Property { get; }
        public CanInsert131Delegate CanInsert131Property { get; }
        public CanCreate132Delegate CanCreate132Property { get; }
        public CanCreate133Delegate CanCreate133Property { get; }
        public CanCreate134Delegate CanCreate134Property { get; }
        public CanCreate135Delegate CanCreate135Property { get; }
        public CanInsert132Delegate CanInsert132Property { get; }
        public CanInsert133Delegate CanInsert133Property { get; }
        public CanInsert134Delegate CanInsert134Property { get; }
        public CanInsert135Delegate CanInsert135Property { get; }
        public CanCreate136Delegate CanCreate136Property { get; }
        public CanCreate137Delegate CanCreate137Property { get; }
        public CanCreate138Delegate CanCreate138Property { get; }
        public CanCreate139Delegate CanCreate139Property { get; }
        public CanInsert136Delegate CanInsert136Property { get; }
        public CanInsert137Delegate CanInsert137Property { get; }
        public CanInsert138Delegate CanInsert138Property { get; }
        public CanInsert139Delegate CanInsert139Property { get; }
        public CanCreate140Delegate CanCreate140Property { get; }
        public CanCreate141Delegate CanCreate141Property { get; }
        public CanCreate142Delegate CanCreate142Property { get; }
        public CanCreate143Delegate CanCreate143Property { get; }
        public CanInsert140Delegate CanInsert140Property { get; }
        public CanInsert141Delegate CanInsert141Property { get; }
        public CanInsert142Delegate CanInsert142Property { get; }
        public CanInsert143Delegate CanInsert143Property { get; }
        public CanCreate168Delegate CanCreate168Property { get; }
        public CanCreate169Delegate CanCreate169Property { get; }
        public CanCreate170Delegate CanCreate170Property { get; }
        public CanCreate171Delegate CanCreate171Property { get; }
        public CanInsert168Delegate CanInsert168Property { get; }
        public CanInsert169Delegate CanInsert169Property { get; }
        public CanInsert170Delegate CanInsert170Property { get; }
        public CanInsert171Delegate CanInsert171Property { get; }
        public CanCreate172Delegate CanCreate172Property { get; }
        public CanCreate173Delegate CanCreate173Property { get; }
        public CanCreate174Delegate CanCreate174Property { get; }
        public CanCreate175Delegate CanCreate175Property { get; }
        public CanInsert172Delegate CanInsert172Property { get; }
        public CanInsert173Delegate CanInsert173Property { get; }
        public CanInsert174Delegate CanInsert174Property { get; }
        public CanInsert175Delegate CanInsert175Property { get; }
        public CanCreate176Delegate CanCreate176Property { get; }
        public CanCreate177Delegate CanCreate177Property { get; }
        public CanCreate178Delegate CanCreate178Property { get; }
        public CanCreate179Delegate CanCreate179Property { get; }
        public CanInsert176Delegate CanInsert176Property { get; }
        public CanInsert177Delegate CanInsert177Property { get; }
        public CanInsert178Delegate CanInsert178Property { get; }
        public CanInsert179Delegate CanInsert179Property { get; }
        public CanCreate180Delegate CanCreate180Property { get; }
        public CanCreate181Delegate CanCreate181Property { get; }
        public CanCreate182Delegate CanCreate182Property { get; }
        public CanCreate183Delegate CanCreate183Property { get; }
        public CanInsert180Delegate CanInsert180Property { get; }
        public CanInsert181Delegate CanInsert181Property { get; }
        public CanInsert182Delegate CanInsert182Property { get; }
        public CanInsert183Delegate CanInsert183Property { get; }
        public CanCreate184Delegate CanCreate184Property { get; }
        public CanCreate185Delegate CanCreate185Property { get; }
        public CanCreate186Delegate CanCreate186Property { get; }
        public CanCreate187Delegate CanCreate187Property { get; }
        public CanInsert184Delegate CanInsert184Property { get; }
        public CanInsert185Delegate CanInsert185Property { get; }
        public CanInsert186Delegate CanInsert186Property { get; }
        public CanInsert187Delegate CanInsert187Property { get; }
        public CanCreate188Delegate CanCreate188Property { get; }
        public CanCreate189Delegate CanCreate189Property { get; }
        public CanCreate190Delegate CanCreate190Property { get; }
        public CanCreate191Delegate CanCreate191Property { get; }
        public CanInsert188Delegate CanInsert188Property { get; }
        public CanInsert189Delegate CanInsert189Property { get; }
        public CanInsert190Delegate CanInsert190Property { get; }
        public CanInsert191Delegate CanInsert191Property { get; }
        public Save24Delegate Save24Property { get; }
        public Save25Delegate Save25Property { get; }
        public Save26Delegate Save26Property { get; }
        public Save27Delegate Save27Property { get; }
        public Save28Delegate Save28Property { get; }
        public Save29Delegate Save29Property { get; }
        public Save30Delegate Save30Property { get; }
        public Save31Delegate Save31Property { get; }
        public Save32Delegate Save32Property { get; }
        public Save33Delegate Save33Property { get; }
        public Save34Delegate Save34Property { get; }
        public Save35Delegate Save35Property { get; }
        public Save36Delegate Save36Property { get; }
        public Save37Delegate Save37Property { get; }
        public Save38Delegate Save38Property { get; }
        public Save39Delegate Save39Property { get; }
        public Save40Delegate Save40Property { get; }
        public Save41Delegate Save41Property { get; }
        public Save42Delegate Save42Property { get; }
        public Save43Delegate Save43Property { get; }
        public Save44Delegate Save44Property { get; }
        public Save45Delegate Save45Property { get; }
        public Save46Delegate Save46Property { get; }
        public Save47Delegate Save47Property { get; }
        public Save48Delegate Save48Property { get; }
        public Save49Delegate Save49Property { get; }
        public Save50Delegate Save50Property { get; }
        public Save51Delegate Save51Property { get; }
        public Save52Delegate Save52Property { get; }
        public Save53Delegate Save53Property { get; }
        public Save54Delegate Save54Property { get; }
        public Save55Delegate Save55Property { get; }
        public Save56Delegate Save56Property { get; }
        public Save57Delegate Save57Property { get; }
        public Save58Delegate Save58Property { get; }
        public Save59Delegate Save59Property { get; }
        public Save60Delegate Save60Property { get; }
        public Save61Delegate Save61Property { get; }
        public Save62Delegate Save62Property { get; }
        public Save63Delegate Save63Property { get; }
        public Save64Delegate Save64Property { get; }
        public Save65Delegate Save65Property { get; }
        public Save66Delegate Save66Property { get; }
        public Save67Delegate Save67Property { get; }
        public Save68Delegate Save68Property { get; }
        public Save69Delegate Save69Property { get; }
        public Save70Delegate Save70Property { get; }
        public Save71Delegate Save71Property { get; }
        public Save72Delegate Save72Property { get; }
        public Save73Delegate Save73Property { get; }
        public Save74Delegate Save74Property { get; }
        public Save75Delegate Save75Property { get; }
        public Save76Delegate Save76Property { get; }
        public Save77Delegate Save77Property { get; }
        public Save78Delegate Save78Property { get; }
        public Save79Delegate Save79Property { get; }
        public Save80Delegate Save80Property { get; }
        public Save81Delegate Save81Property { get; }
        public Save82Delegate Save82Property { get; }
        public Save83Delegate Save83Property { get; }
        public Save84Delegate Save84Property { get; }
        public Save85Delegate Save85Property { get; }
        public Save86Delegate Save86Property { get; }
        public Save87Delegate Save87Property { get; }
        public Save88Delegate Save88Property { get; }
        public Save89Delegate Save89Property { get; }
        public Save90Delegate Save90Property { get; }
        public Save91Delegate Save91Property { get; }
        public Save92Delegate Save92Property { get; }
        public Save93Delegate Save93Property { get; }
        public Save94Delegate Save94Property { get; }
        public Save95Delegate Save95Property { get; }
        public Save120Delegate Save120Property { get; }
        public Save121Delegate Save121Property { get; }
        public Save122Delegate Save122Property { get; }
        public Save123Delegate Save123Property { get; }
        public Save124Delegate Save124Property { get; }
        public Save125Delegate Save125Property { get; }
        public Save126Delegate Save126Property { get; }
        public Save127Delegate Save127Property { get; }
        public Save128Delegate Save128Property { get; }
        public Save129Delegate Save129Property { get; }
        public Save130Delegate Save130Property { get; }
        public Save131Delegate Save131Property { get; }
        public Save132Delegate Save132Property { get; }
        public Save133Delegate Save133Property { get; }
        public Save134Delegate Save134Property { get; }
        public Save135Delegate Save135Property { get; }
        public Save136Delegate Save136Property { get; }
        public Save137Delegate Save137Property { get; }
        public Save138Delegate Save138Property { get; }
        public Save139Delegate Save139Property { get; }
        public Save140Delegate Save140Property { get; }
        public Save141Delegate Save141Property { get; }
        public Save142Delegate Save142Property { get; }
        public Save143Delegate Save143Property { get; }
        public Save144Delegate Save144Property { get; }
        public Save145Delegate Save145Property { get; }
        public Save146Delegate Save146Property { get; }
        public Save147Delegate Save147Property { get; }
        public Save148Delegate Save148Property { get; }
        public Save149Delegate Save149Property { get; }
        public Save150Delegate Save150Property { get; }
        public Save151Delegate Save151Property { get; }
        public Save152Delegate Save152Property { get; }
        public Save153Delegate Save153Property { get; }
        public Save154Delegate Save154Property { get; }
        public Save155Delegate Save155Property { get; }
        public Save156Delegate Save156Property { get; }
        public Save157Delegate Save157Property { get; }
        public Save158Delegate Save158Property { get; }
        public Save159Delegate Save159Property { get; }
        public Save160Delegate Save160Property { get; }
        public Save161Delegate Save161Property { get; }
        public Save162Delegate Save162Property { get; }
        public Save163Delegate Save163Property { get; }
        public Save164Delegate Save164Property { get; }
        public Save165Delegate Save165Property { get; }
        public Save166Delegate Save166Property { get; }
        public Save167Delegate Save167Property { get; }
        public Save168Delegate Save168Property { get; }
        public Save169Delegate Save169Property { get; }
        public Save170Delegate Save170Property { get; }
        public Save171Delegate Save171Property { get; }
        public Save172Delegate Save172Property { get; }
        public Save173Delegate Save173Property { get; }
        public Save174Delegate Save174Property { get; }
        public Save175Delegate Save175Property { get; }
        public Save176Delegate Save176Property { get; }
        public Save177Delegate Save177Property { get; }
        public Save178Delegate Save178Property { get; }
        public Save179Delegate Save179Property { get; }
        public Save180Delegate Save180Property { get; }
        public Save181Delegate Save181Property { get; }
        public Save182Delegate Save182Property { get; }
        public Save183Delegate Save183Property { get; }
        public Save184Delegate Save184Property { get; }
        public Save185Delegate Save185Property { get; }
        public Save186Delegate Save186Property { get; }
        public Save187Delegate Save187Property { get; }
        public Save188Delegate Save188Property { get; }
        public Save189Delegate Save189Property { get; }
        public Save190Delegate Save190Property { get; }
        public Save191Delegate Save191Property { get; }

        public AuthorizedAllCombinationsFactory(IServiceProvider serviceProvider, AuthorizationAllCombinations authorizationallcombinations)
        {
            this.ServiceProvider = serviceProvider;
            this.AuthorizationAllCombinations = authorizationallcombinations;
            Create24Property = LocalCreate24;
            Create25Property = LocalCreate25;
            Create26Property = LocalCreate26;
            Create27Property = LocalCreate27;
            Create28Property = LocalCreate28;
            Create29Property = LocalCreate29;
            Create30Property = LocalCreate30;
            Create31Property = LocalCreate31;
            Create32Property = LocalCreate32;
            Create33Property = LocalCreate33;
            Create34Property = LocalCreate34;
            Create35Property = LocalCreate35;
            Create36Property = LocalCreate36;
            Create37Property = LocalCreate37;
            Create38Property = LocalCreate38;
            Create39Property = LocalCreate39;
            Create40Property = LocalCreate40;
            Create41Property = LocalCreate41;
            Create42Property = LocalCreate42;
            Create43Property = LocalCreate43;
            Create44Property = LocalCreate44;
            Create45Property = LocalCreate45;
            Create46Property = LocalCreate46;
            Create47Property = LocalCreate47;
            Create48Property = LocalCreate48;
            Create49Property = LocalCreate49;
            Create50Property = LocalCreate50;
            Create51Property = LocalCreate51;
            Create52Property = LocalCreate52;
            Create53Property = LocalCreate53;
            Create54Property = LocalCreate54;
            Create55Property = LocalCreate55;
            Create56Property = LocalCreate56;
            Create57Property = LocalCreate57;
            Create58Property = LocalCreate58;
            Create59Property = LocalCreate59;
            Create60Property = LocalCreate60;
            Create61Property = LocalCreate61;
            Create62Property = LocalCreate62;
            Create63Property = LocalCreate63;
            Create64Property = LocalCreate64;
            Create65Property = LocalCreate65;
            Create66Property = LocalCreate66;
            Create67Property = LocalCreate67;
            Create68Property = LocalCreate68;
            Create69Property = LocalCreate69;
            Create70Property = LocalCreate70;
            Create71Property = LocalCreate71;
            Create72Property = LocalCreate72;
            Create73Property = LocalCreate73;
            Create74Property = LocalCreate74;
            Create75Property = LocalCreate75;
            Create76Property = LocalCreate76;
            Create77Property = LocalCreate77;
            Create78Property = LocalCreate78;
            Create79Property = LocalCreate79;
            Create80Property = LocalCreate80;
            Create81Property = LocalCreate81;
            Create82Property = LocalCreate82;
            Create83Property = LocalCreate83;
            Create84Property = LocalCreate84;
            Create85Property = LocalCreate85;
            Create86Property = LocalCreate86;
            Create87Property = LocalCreate87;
            Create88Property = LocalCreate88;
            Create89Property = LocalCreate89;
            Create90Property = LocalCreate90;
            Create91Property = LocalCreate91;
            Create92Property = LocalCreate92;
            Create93Property = LocalCreate93;
            Create94Property = LocalCreate94;
            Create95Property = LocalCreate95;
            Create120Property = LocalCreate120;
            Create121Property = LocalCreate121;
            Create122Property = LocalCreate122;
            Create123Property = LocalCreate123;
            Create124Property = LocalCreate124;
            Create125Property = LocalCreate125;
            Create126Property = LocalCreate126;
            Create127Property = LocalCreate127;
            Create128Property = LocalCreate128;
            Create129Property = LocalCreate129;
            Create130Property = LocalCreate130;
            Create131Property = LocalCreate131;
            Create132Property = LocalCreate132;
            Create133Property = LocalCreate133;
            Create134Property = LocalCreate134;
            Create135Property = LocalCreate135;
            Create136Property = LocalCreate136;
            Create137Property = LocalCreate137;
            Create138Property = LocalCreate138;
            Create139Property = LocalCreate139;
            Create140Property = LocalCreate140;
            Create141Property = LocalCreate141;
            Create142Property = LocalCreate142;
            Create143Property = LocalCreate143;
            Create144Property = LocalCreate144;
            Create145Property = LocalCreate145;
            Create146Property = LocalCreate146;
            Create147Property = LocalCreate147;
            Create148Property = LocalCreate148;
            Create149Property = LocalCreate149;
            Create150Property = LocalCreate150;
            Create151Property = LocalCreate151;
            Create152Property = LocalCreate152;
            Create153Property = LocalCreate153;
            Create154Property = LocalCreate154;
            Create155Property = LocalCreate155;
            Create156Property = LocalCreate156;
            Create157Property = LocalCreate157;
            Create158Property = LocalCreate158;
            Create159Property = LocalCreate159;
            Create160Property = LocalCreate160;
            Create161Property = LocalCreate161;
            Create162Property = LocalCreate162;
            Create163Property = LocalCreate163;
            Create164Property = LocalCreate164;
            Create165Property = LocalCreate165;
            Create166Property = LocalCreate166;
            Create167Property = LocalCreate167;
            Create168Property = LocalCreate168;
            Create169Property = LocalCreate169;
            Create170Property = LocalCreate170;
            Create171Property = LocalCreate171;
            Create172Property = LocalCreate172;
            Create173Property = LocalCreate173;
            Create174Property = LocalCreate174;
            Create175Property = LocalCreate175;
            Create176Property = LocalCreate176;
            Create177Property = LocalCreate177;
            Create178Property = LocalCreate178;
            Create179Property = LocalCreate179;
            Create180Property = LocalCreate180;
            Create181Property = LocalCreate181;
            Create182Property = LocalCreate182;
            Create183Property = LocalCreate183;
            Create184Property = LocalCreate184;
            Create185Property = LocalCreate185;
            Create186Property = LocalCreate186;
            Create187Property = LocalCreate187;
            Create188Property = LocalCreate188;
            Create189Property = LocalCreate189;
            Create190Property = LocalCreate190;
            Create191Property = LocalCreate191;
            CanCreate24Property = LocalCanCreate24;
            CanCreate25Property = LocalCanCreate25;
            CanCreate26Property = LocalCanCreate26;
            CanCreate27Property = LocalCanCreate27;
            CanInsert24Property = LocalCanInsert24;
            CanInsert25Property = LocalCanInsert25;
            CanInsert26Property = LocalCanInsert26;
            CanInsert27Property = LocalCanInsert27;
            CanCreate28Property = LocalCanCreate28;
            CanCreate29Property = LocalCanCreate29;
            CanCreate30Property = LocalCanCreate30;
            CanCreate31Property = LocalCanCreate31;
            CanInsert28Property = LocalCanInsert28;
            CanInsert29Property = LocalCanInsert29;
            CanInsert30Property = LocalCanInsert30;
            CanInsert31Property = LocalCanInsert31;
            CanCreate32Property = LocalCanCreate32;
            CanCreate33Property = LocalCanCreate33;
            CanCreate34Property = LocalCanCreate34;
            CanCreate35Property = LocalCanCreate35;
            CanInsert32Property = LocalCanInsert32;
            CanInsert33Property = LocalCanInsert33;
            CanInsert34Property = LocalCanInsert34;
            CanInsert35Property = LocalCanInsert35;
            CanCreate36Property = LocalCanCreate36;
            CanCreate37Property = LocalCanCreate37;
            CanCreate38Property = LocalCanCreate38;
            CanCreate39Property = LocalCanCreate39;
            CanInsert36Property = LocalCanInsert36;
            CanInsert37Property = LocalCanInsert37;
            CanInsert38Property = LocalCanInsert38;
            CanInsert39Property = LocalCanInsert39;
            CanCreate40Property = LocalCanCreate40;
            CanCreate41Property = LocalCanCreate41;
            CanCreate42Property = LocalCanCreate42;
            CanCreate43Property = LocalCanCreate43;
            CanInsert40Property = LocalCanInsert40;
            CanInsert41Property = LocalCanInsert41;
            CanInsert42Property = LocalCanInsert42;
            CanInsert43Property = LocalCanInsert43;
            CanCreate44Property = LocalCanCreate44;
            CanCreate45Property = LocalCanCreate45;
            CanCreate46Property = LocalCanCreate46;
            CanCreate47Property = LocalCanCreate47;
            CanInsert44Property = LocalCanInsert44;
            CanInsert45Property = LocalCanInsert45;
            CanInsert46Property = LocalCanInsert46;
            CanInsert47Property = LocalCanInsert47;
            CanCreate72Property = LocalCanCreate72;
            CanCreate73Property = LocalCanCreate73;
            CanCreate74Property = LocalCanCreate74;
            CanCreate75Property = LocalCanCreate75;
            CanInsert72Property = LocalCanInsert72;
            CanInsert73Property = LocalCanInsert73;
            CanInsert74Property = LocalCanInsert74;
            CanInsert75Property = LocalCanInsert75;
            CanCreate76Property = LocalCanCreate76;
            CanCreate77Property = LocalCanCreate77;
            CanCreate78Property = LocalCanCreate78;
            CanCreate79Property = LocalCanCreate79;
            CanInsert76Property = LocalCanInsert76;
            CanInsert77Property = LocalCanInsert77;
            CanInsert78Property = LocalCanInsert78;
            CanInsert79Property = LocalCanInsert79;
            CanCreate80Property = LocalCanCreate80;
            CanCreate81Property = LocalCanCreate81;
            CanCreate82Property = LocalCanCreate82;
            CanCreate83Property = LocalCanCreate83;
            CanInsert80Property = LocalCanInsert80;
            CanInsert81Property = LocalCanInsert81;
            CanInsert82Property = LocalCanInsert82;
            CanInsert83Property = LocalCanInsert83;
            CanCreate84Property = LocalCanCreate84;
            CanCreate85Property = LocalCanCreate85;
            CanCreate86Property = LocalCanCreate86;
            CanCreate87Property = LocalCanCreate87;
            CanInsert84Property = LocalCanInsert84;
            CanInsert85Property = LocalCanInsert85;
            CanInsert86Property = LocalCanInsert86;
            CanInsert87Property = LocalCanInsert87;
            CanCreate88Property = LocalCanCreate88;
            CanCreate89Property = LocalCanCreate89;
            CanCreate90Property = LocalCanCreate90;
            CanCreate91Property = LocalCanCreate91;
            CanInsert88Property = LocalCanInsert88;
            CanInsert89Property = LocalCanInsert89;
            CanInsert90Property = LocalCanInsert90;
            CanInsert91Property = LocalCanInsert91;
            CanCreate92Property = LocalCanCreate92;
            CanCreate93Property = LocalCanCreate93;
            CanCreate94Property = LocalCanCreate94;
            CanCreate95Property = LocalCanCreate95;
            CanInsert92Property = LocalCanInsert92;
            CanInsert93Property = LocalCanInsert93;
            CanInsert94Property = LocalCanInsert94;
            CanInsert95Property = LocalCanInsert95;
            CanCreate120Property = LocalCanCreate120;
            CanCreate121Property = LocalCanCreate121;
            CanCreate122Property = LocalCanCreate122;
            CanCreate123Property = LocalCanCreate123;
            CanInsert120Property = LocalCanInsert120;
            CanInsert121Property = LocalCanInsert121;
            CanInsert122Property = LocalCanInsert122;
            CanInsert123Property = LocalCanInsert123;
            CanCreate124Property = LocalCanCreate124;
            CanCreate125Property = LocalCanCreate125;
            CanCreate126Property = LocalCanCreate126;
            CanCreate127Property = LocalCanCreate127;
            CanInsert124Property = LocalCanInsert124;
            CanInsert125Property = LocalCanInsert125;
            CanInsert126Property = LocalCanInsert126;
            CanInsert127Property = LocalCanInsert127;
            CanCreate128Property = LocalCanCreate128;
            CanCreate129Property = LocalCanCreate129;
            CanCreate130Property = LocalCanCreate130;
            CanCreate131Property = LocalCanCreate131;
            CanInsert128Property = LocalCanInsert128;
            CanInsert129Property = LocalCanInsert129;
            CanInsert130Property = LocalCanInsert130;
            CanInsert131Property = LocalCanInsert131;
            CanCreate132Property = LocalCanCreate132;
            CanCreate133Property = LocalCanCreate133;
            CanCreate134Property = LocalCanCreate134;
            CanCreate135Property = LocalCanCreate135;
            CanInsert132Property = LocalCanInsert132;
            CanInsert133Property = LocalCanInsert133;
            CanInsert134Property = LocalCanInsert134;
            CanInsert135Property = LocalCanInsert135;
            CanCreate136Property = LocalCanCreate136;
            CanCreate137Property = LocalCanCreate137;
            CanCreate138Property = LocalCanCreate138;
            CanCreate139Property = LocalCanCreate139;
            CanInsert136Property = LocalCanInsert136;
            CanInsert137Property = LocalCanInsert137;
            CanInsert138Property = LocalCanInsert138;
            CanInsert139Property = LocalCanInsert139;
            CanCreate140Property = LocalCanCreate140;
            CanCreate141Property = LocalCanCreate141;
            CanCreate142Property = LocalCanCreate142;
            CanCreate143Property = LocalCanCreate143;
            CanInsert140Property = LocalCanInsert140;
            CanInsert141Property = LocalCanInsert141;
            CanInsert142Property = LocalCanInsert142;
            CanInsert143Property = LocalCanInsert143;
            CanCreate168Property = LocalCanCreate168;
            CanCreate169Property = LocalCanCreate169;
            CanCreate170Property = LocalCanCreate170;
            CanCreate171Property = LocalCanCreate171;
            CanInsert168Property = LocalCanInsert168;
            CanInsert169Property = LocalCanInsert169;
            CanInsert170Property = LocalCanInsert170;
            CanInsert171Property = LocalCanInsert171;
            CanCreate172Property = LocalCanCreate172;
            CanCreate173Property = LocalCanCreate173;
            CanCreate174Property = LocalCanCreate174;
            CanCreate175Property = LocalCanCreate175;
            CanInsert172Property = LocalCanInsert172;
            CanInsert173Property = LocalCanInsert173;
            CanInsert174Property = LocalCanInsert174;
            CanInsert175Property = LocalCanInsert175;
            CanCreate176Property = LocalCanCreate176;
            CanCreate177Property = LocalCanCreate177;
            CanCreate178Property = LocalCanCreate178;
            CanCreate179Property = LocalCanCreate179;
            CanInsert176Property = LocalCanInsert176;
            CanInsert177Property = LocalCanInsert177;
            CanInsert178Property = LocalCanInsert178;
            CanInsert179Property = LocalCanInsert179;
            CanCreate180Property = LocalCanCreate180;
            CanCreate181Property = LocalCanCreate181;
            CanCreate182Property = LocalCanCreate182;
            CanCreate183Property = LocalCanCreate183;
            CanInsert180Property = LocalCanInsert180;
            CanInsert181Property = LocalCanInsert181;
            CanInsert182Property = LocalCanInsert182;
            CanInsert183Property = LocalCanInsert183;
            CanCreate184Property = LocalCanCreate184;
            CanCreate185Property = LocalCanCreate185;
            CanCreate186Property = LocalCanCreate186;
            CanCreate187Property = LocalCanCreate187;
            CanInsert184Property = LocalCanInsert184;
            CanInsert185Property = LocalCanInsert185;
            CanInsert186Property = LocalCanInsert186;
            CanInsert187Property = LocalCanInsert187;
            CanCreate188Property = LocalCanCreate188;
            CanCreate189Property = LocalCanCreate189;
            CanCreate190Property = LocalCanCreate190;
            CanCreate191Property = LocalCanCreate191;
            CanInsert188Property = LocalCanInsert188;
            CanInsert189Property = LocalCanInsert189;
            CanInsert190Property = LocalCanInsert190;
            CanInsert191Property = LocalCanInsert191;
            Save24Property = LocalSave24;
            Save25Property = LocalSave25;
            Save26Property = LocalSave26;
            Save27Property = LocalSave27;
            Save28Property = LocalSave28;
            Save29Property = LocalSave29;
            Save30Property = LocalSave30;
            Save31Property = LocalSave31;
            Save32Property = LocalSave32;
            Save33Property = LocalSave33;
            Save34Property = LocalSave34;
            Save35Property = LocalSave35;
            Save36Property = LocalSave36;
            Save37Property = LocalSave37;
            Save38Property = LocalSave38;
            Save39Property = LocalSave39;
            Save40Property = LocalSave40;
            Save41Property = LocalSave41;
            Save42Property = LocalSave42;
            Save43Property = LocalSave43;
            Save44Property = LocalSave44;
            Save45Property = LocalSave45;
            Save46Property = LocalSave46;
            Save47Property = LocalSave47;
            Save48Property = LocalSave48;
            Save49Property = LocalSave49;
            Save50Property = LocalSave50;
            Save51Property = LocalSave51;
            Save52Property = LocalSave52;
            Save53Property = LocalSave53;
            Save54Property = LocalSave54;
            Save55Property = LocalSave55;
            Save56Property = LocalSave56;
            Save57Property = LocalSave57;
            Save58Property = LocalSave58;
            Save59Property = LocalSave59;
            Save60Property = LocalSave60;
            Save61Property = LocalSave61;
            Save62Property = LocalSave62;
            Save63Property = LocalSave63;
            Save64Property = LocalSave64;
            Save65Property = LocalSave65;
            Save66Property = LocalSave66;
            Save67Property = LocalSave67;
            Save68Property = LocalSave68;
            Save69Property = LocalSave69;
            Save70Property = LocalSave70;
            Save71Property = LocalSave71;
            Save72Property = LocalSave72;
            Save73Property = LocalSave73;
            Save74Property = LocalSave74;
            Save75Property = LocalSave75;
            Save76Property = LocalSave76;
            Save77Property = LocalSave77;
            Save78Property = LocalSave78;
            Save79Property = LocalSave79;
            Save80Property = LocalSave80;
            Save81Property = LocalSave81;
            Save82Property = LocalSave82;
            Save83Property = LocalSave83;
            Save84Property = LocalSave84;
            Save85Property = LocalSave85;
            Save86Property = LocalSave86;
            Save87Property = LocalSave87;
            Save88Property = LocalSave88;
            Save89Property = LocalSave89;
            Save90Property = LocalSave90;
            Save91Property = LocalSave91;
            Save92Property = LocalSave92;
            Save93Property = LocalSave93;
            Save94Property = LocalSave94;
            Save95Property = LocalSave95;
            Save120Property = LocalSave120;
            Save121Property = LocalSave121;
            Save122Property = LocalSave122;
            Save123Property = LocalSave123;
            Save124Property = LocalSave124;
            Save125Property = LocalSave125;
            Save126Property = LocalSave126;
            Save127Property = LocalSave127;
            Save128Property = LocalSave128;
            Save129Property = LocalSave129;
            Save130Property = LocalSave130;
            Save131Property = LocalSave131;
            Save132Property = LocalSave132;
            Save133Property = LocalSave133;
            Save134Property = LocalSave134;
            Save135Property = LocalSave135;
            Save136Property = LocalSave136;
            Save137Property = LocalSave137;
            Save138Property = LocalSave138;
            Save139Property = LocalSave139;
            Save140Property = LocalSave140;
            Save141Property = LocalSave141;
            Save142Property = LocalSave142;
            Save143Property = LocalSave143;
            Save144Property = LocalSave144;
            Save145Property = LocalSave145;
            Save146Property = LocalSave146;
            Save147Property = LocalSave147;
            Save148Property = LocalSave148;
            Save149Property = LocalSave149;
            Save150Property = LocalSave150;
            Save151Property = LocalSave151;
            Save152Property = LocalSave152;
            Save153Property = LocalSave153;
            Save154Property = LocalSave154;
            Save155Property = LocalSave155;
            Save156Property = LocalSave156;
            Save157Property = LocalSave157;
            Save158Property = LocalSave158;
            Save159Property = LocalSave159;
            Save160Property = LocalSave160;
            Save161Property = LocalSave161;
            Save162Property = LocalSave162;
            Save163Property = LocalSave163;
            Save164Property = LocalSave164;
            Save165Property = LocalSave165;
            Save166Property = LocalSave166;
            Save167Property = LocalSave167;
            Save168Property = LocalSave168;
            Save169Property = LocalSave169;
            Save170Property = LocalSave170;
            Save171Property = LocalSave171;
            Save172Property = LocalSave172;
            Save173Property = LocalSave173;
            Save174Property = LocalSave174;
            Save175Property = LocalSave175;
            Save176Property = LocalSave176;
            Save177Property = LocalSave177;
            Save178Property = LocalSave178;
            Save179Property = LocalSave179;
            Save180Property = LocalSave180;
            Save181Property = LocalSave181;
            Save182Property = LocalSave182;
            Save183Property = LocalSave183;
            Save184Property = LocalSave184;
            Save185Property = LocalSave185;
            Save186Property = LocalSave186;
            Save187Property = LocalSave187;
            Save188Property = LocalSave188;
            Save189Property = LocalSave189;
            Save190Property = LocalSave190;
            Save191Property = LocalSave191;
        }

        public AuthorizedAllCombinationsFactory(IServiceProvider serviceProvider, IDoRemoteRequest remoteMethodDelegate, AuthorizationAllCombinations authorizationallcombinations)
        {
            this.ServiceProvider = serviceProvider;
            this.DoRemoteRequest = remoteMethodDelegate;
            this.AuthorizationAllCombinations = authorizationallcombinations;
            Create24Property = RemoteCreate24;
            Create25Property = RemoteCreate25;
            Create26Property = RemoteCreate26;
            Create27Property = RemoteCreate27;
            Create28Property = RemoteCreate28;
            Create29Property = RemoteCreate29;
            Create30Property = RemoteCreate30;
            Create31Property = RemoteCreate31;
            Create32Property = RemoteCreate32;
            Create33Property = RemoteCreate33;
            Create34Property = RemoteCreate34;
            Create35Property = RemoteCreate35;
            Create36Property = RemoteCreate36;
            Create37Property = RemoteCreate37;
            Create38Property = RemoteCreate38;
            Create39Property = RemoteCreate39;
            Create40Property = RemoteCreate40;
            Create41Property = RemoteCreate41;
            Create42Property = RemoteCreate42;
            Create43Property = RemoteCreate43;
            Create44Property = RemoteCreate44;
            Create45Property = RemoteCreate45;
            Create46Property = RemoteCreate46;
            Create47Property = RemoteCreate47;
            Create48Property = RemoteCreate48;
            Create49Property = RemoteCreate49;
            Create50Property = RemoteCreate50;
            Create51Property = RemoteCreate51;
            Create52Property = RemoteCreate52;
            Create53Property = RemoteCreate53;
            Create54Property = RemoteCreate54;
            Create55Property = RemoteCreate55;
            Create56Property = RemoteCreate56;
            Create57Property = RemoteCreate57;
            Create58Property = RemoteCreate58;
            Create59Property = RemoteCreate59;
            Create60Property = RemoteCreate60;
            Create61Property = RemoteCreate61;
            Create62Property = RemoteCreate62;
            Create63Property = RemoteCreate63;
            Create64Property = RemoteCreate64;
            Create65Property = RemoteCreate65;
            Create66Property = RemoteCreate66;
            Create67Property = RemoteCreate67;
            Create68Property = RemoteCreate68;
            Create69Property = RemoteCreate69;
            Create70Property = RemoteCreate70;
            Create71Property = RemoteCreate71;
            Create72Property = RemoteCreate72;
            Create73Property = RemoteCreate73;
            Create74Property = RemoteCreate74;
            Create75Property = RemoteCreate75;
            Create76Property = RemoteCreate76;
            Create77Property = RemoteCreate77;
            Create78Property = RemoteCreate78;
            Create79Property = RemoteCreate79;
            Create80Property = RemoteCreate80;
            Create81Property = RemoteCreate81;
            Create82Property = RemoteCreate82;
            Create83Property = RemoteCreate83;
            Create84Property = RemoteCreate84;
            Create85Property = RemoteCreate85;
            Create86Property = RemoteCreate86;
            Create87Property = RemoteCreate87;
            Create88Property = RemoteCreate88;
            Create89Property = RemoteCreate89;
            Create90Property = RemoteCreate90;
            Create91Property = RemoteCreate91;
            Create92Property = RemoteCreate92;
            Create93Property = RemoteCreate93;
            Create94Property = RemoteCreate94;
            Create95Property = RemoteCreate95;
            Create120Property = RemoteCreate120;
            Create121Property = RemoteCreate121;
            Create122Property = RemoteCreate122;
            Create123Property = RemoteCreate123;
            Create124Property = RemoteCreate124;
            Create125Property = RemoteCreate125;
            Create126Property = RemoteCreate126;
            Create127Property = RemoteCreate127;
            Create128Property = RemoteCreate128;
            Create129Property = RemoteCreate129;
            Create130Property = RemoteCreate130;
            Create131Property = RemoteCreate131;
            Create132Property = RemoteCreate132;
            Create133Property = RemoteCreate133;
            Create134Property = RemoteCreate134;
            Create135Property = RemoteCreate135;
            Create136Property = RemoteCreate136;
            Create137Property = RemoteCreate137;
            Create138Property = RemoteCreate138;
            Create139Property = RemoteCreate139;
            Create140Property = RemoteCreate140;
            Create141Property = RemoteCreate141;
            Create142Property = RemoteCreate142;
            Create143Property = RemoteCreate143;
            Create144Property = RemoteCreate144;
            Create145Property = RemoteCreate145;
            Create146Property = RemoteCreate146;
            Create147Property = RemoteCreate147;
            Create148Property = RemoteCreate148;
            Create149Property = RemoteCreate149;
            Create150Property = RemoteCreate150;
            Create151Property = RemoteCreate151;
            Create152Property = RemoteCreate152;
            Create153Property = RemoteCreate153;
            Create154Property = RemoteCreate154;
            Create155Property = RemoteCreate155;
            Create156Property = RemoteCreate156;
            Create157Property = RemoteCreate157;
            Create158Property = RemoteCreate158;
            Create159Property = RemoteCreate159;
            Create160Property = RemoteCreate160;
            Create161Property = RemoteCreate161;
            Create162Property = RemoteCreate162;
            Create163Property = RemoteCreate163;
            Create164Property = RemoteCreate164;
            Create165Property = RemoteCreate165;
            Create166Property = RemoteCreate166;
            Create167Property = RemoteCreate167;
            Create168Property = RemoteCreate168;
            Create169Property = RemoteCreate169;
            Create170Property = RemoteCreate170;
            Create171Property = RemoteCreate171;
            Create172Property = RemoteCreate172;
            Create173Property = RemoteCreate173;
            Create174Property = RemoteCreate174;
            Create175Property = RemoteCreate175;
            Create176Property = RemoteCreate176;
            Create177Property = RemoteCreate177;
            Create178Property = RemoteCreate178;
            Create179Property = RemoteCreate179;
            Create180Property = RemoteCreate180;
            Create181Property = RemoteCreate181;
            Create182Property = RemoteCreate182;
            Create183Property = RemoteCreate183;
            Create184Property = RemoteCreate184;
            Create185Property = RemoteCreate185;
            Create186Property = RemoteCreate186;
            Create187Property = RemoteCreate187;
            Create188Property = RemoteCreate188;
            Create189Property = RemoteCreate189;
            Create190Property = RemoteCreate190;
            Create191Property = RemoteCreate191;
            CanCreate24Property = RemoteCanCreate24;
            CanCreate25Property = RemoteCanCreate25;
            CanCreate26Property = RemoteCanCreate26;
            CanCreate27Property = RemoteCanCreate27;
            CanInsert24Property = RemoteCanInsert24;
            CanInsert25Property = RemoteCanInsert25;
            CanInsert26Property = RemoteCanInsert26;
            CanInsert27Property = RemoteCanInsert27;
            CanCreate28Property = RemoteCanCreate28;
            CanCreate29Property = RemoteCanCreate29;
            CanCreate30Property = RemoteCanCreate30;
            CanCreate31Property = RemoteCanCreate31;
            CanInsert28Property = RemoteCanInsert28;
            CanInsert29Property = RemoteCanInsert29;
            CanInsert30Property = RemoteCanInsert30;
            CanInsert31Property = RemoteCanInsert31;
            CanCreate32Property = RemoteCanCreate32;
            CanCreate33Property = RemoteCanCreate33;
            CanCreate34Property = RemoteCanCreate34;
            CanCreate35Property = RemoteCanCreate35;
            CanInsert32Property = RemoteCanInsert32;
            CanInsert33Property = RemoteCanInsert33;
            CanInsert34Property = RemoteCanInsert34;
            CanInsert35Property = RemoteCanInsert35;
            CanCreate36Property = RemoteCanCreate36;
            CanCreate37Property = RemoteCanCreate37;
            CanCreate38Property = RemoteCanCreate38;
            CanCreate39Property = RemoteCanCreate39;
            CanInsert36Property = RemoteCanInsert36;
            CanInsert37Property = RemoteCanInsert37;
            CanInsert38Property = RemoteCanInsert38;
            CanInsert39Property = RemoteCanInsert39;
            CanCreate40Property = RemoteCanCreate40;
            CanCreate41Property = RemoteCanCreate41;
            CanCreate42Property = RemoteCanCreate42;
            CanCreate43Property = RemoteCanCreate43;
            CanInsert40Property = RemoteCanInsert40;
            CanInsert41Property = RemoteCanInsert41;
            CanInsert42Property = RemoteCanInsert42;
            CanInsert43Property = RemoteCanInsert43;
            CanCreate44Property = RemoteCanCreate44;
            CanCreate45Property = RemoteCanCreate45;
            CanCreate46Property = RemoteCanCreate46;
            CanCreate47Property = RemoteCanCreate47;
            CanInsert44Property = RemoteCanInsert44;
            CanInsert45Property = RemoteCanInsert45;
            CanInsert46Property = RemoteCanInsert46;
            CanInsert47Property = RemoteCanInsert47;
            CanCreate72Property = RemoteCanCreate72;
            CanCreate73Property = RemoteCanCreate73;
            CanCreate74Property = RemoteCanCreate74;
            CanCreate75Property = RemoteCanCreate75;
            CanInsert72Property = RemoteCanInsert72;
            CanInsert73Property = RemoteCanInsert73;
            CanInsert74Property = RemoteCanInsert74;
            CanInsert75Property = RemoteCanInsert75;
            CanCreate76Property = RemoteCanCreate76;
            CanCreate77Property = RemoteCanCreate77;
            CanCreate78Property = RemoteCanCreate78;
            CanCreate79Property = RemoteCanCreate79;
            CanInsert76Property = RemoteCanInsert76;
            CanInsert77Property = RemoteCanInsert77;
            CanInsert78Property = RemoteCanInsert78;
            CanInsert79Property = RemoteCanInsert79;
            CanCreate80Property = RemoteCanCreate80;
            CanCreate81Property = RemoteCanCreate81;
            CanCreate82Property = RemoteCanCreate82;
            CanCreate83Property = RemoteCanCreate83;
            CanInsert80Property = RemoteCanInsert80;
            CanInsert81Property = RemoteCanInsert81;
            CanInsert82Property = RemoteCanInsert82;
            CanInsert83Property = RemoteCanInsert83;
            CanCreate84Property = RemoteCanCreate84;
            CanCreate85Property = RemoteCanCreate85;
            CanCreate86Property = RemoteCanCreate86;
            CanCreate87Property = RemoteCanCreate87;
            CanInsert84Property = RemoteCanInsert84;
            CanInsert85Property = RemoteCanInsert85;
            CanInsert86Property = RemoteCanInsert86;
            CanInsert87Property = RemoteCanInsert87;
            CanCreate88Property = RemoteCanCreate88;
            CanCreate89Property = RemoteCanCreate89;
            CanCreate90Property = RemoteCanCreate90;
            CanCreate91Property = RemoteCanCreate91;
            CanInsert88Property = RemoteCanInsert88;
            CanInsert89Property = RemoteCanInsert89;
            CanInsert90Property = RemoteCanInsert90;
            CanInsert91Property = RemoteCanInsert91;
            CanCreate92Property = RemoteCanCreate92;
            CanCreate93Property = RemoteCanCreate93;
            CanCreate94Property = RemoteCanCreate94;
            CanCreate95Property = RemoteCanCreate95;
            CanInsert92Property = RemoteCanInsert92;
            CanInsert93Property = RemoteCanInsert93;
            CanInsert94Property = RemoteCanInsert94;
            CanInsert95Property = RemoteCanInsert95;
            CanCreate120Property = RemoteCanCreate120;
            CanCreate121Property = RemoteCanCreate121;
            CanCreate122Property = RemoteCanCreate122;
            CanCreate123Property = RemoteCanCreate123;
            CanInsert120Property = RemoteCanInsert120;
            CanInsert121Property = RemoteCanInsert121;
            CanInsert122Property = RemoteCanInsert122;
            CanInsert123Property = RemoteCanInsert123;
            CanCreate124Property = RemoteCanCreate124;
            CanCreate125Property = RemoteCanCreate125;
            CanCreate126Property = RemoteCanCreate126;
            CanCreate127Property = RemoteCanCreate127;
            CanInsert124Property = RemoteCanInsert124;
            CanInsert125Property = RemoteCanInsert125;
            CanInsert126Property = RemoteCanInsert126;
            CanInsert127Property = RemoteCanInsert127;
            CanCreate128Property = RemoteCanCreate128;
            CanCreate129Property = RemoteCanCreate129;
            CanCreate130Property = RemoteCanCreate130;
            CanCreate131Property = RemoteCanCreate131;
            CanInsert128Property = RemoteCanInsert128;
            CanInsert129Property = RemoteCanInsert129;
            CanInsert130Property = RemoteCanInsert130;
            CanInsert131Property = RemoteCanInsert131;
            CanCreate132Property = RemoteCanCreate132;
            CanCreate133Property = RemoteCanCreate133;
            CanCreate134Property = RemoteCanCreate134;
            CanCreate135Property = RemoteCanCreate135;
            CanInsert132Property = RemoteCanInsert132;
            CanInsert133Property = RemoteCanInsert133;
            CanInsert134Property = RemoteCanInsert134;
            CanInsert135Property = RemoteCanInsert135;
            CanCreate136Property = RemoteCanCreate136;
            CanCreate137Property = RemoteCanCreate137;
            CanCreate138Property = RemoteCanCreate138;
            CanCreate139Property = RemoteCanCreate139;
            CanInsert136Property = RemoteCanInsert136;
            CanInsert137Property = RemoteCanInsert137;
            CanInsert138Property = RemoteCanInsert138;
            CanInsert139Property = RemoteCanInsert139;
            CanCreate140Property = RemoteCanCreate140;
            CanCreate141Property = RemoteCanCreate141;
            CanCreate142Property = RemoteCanCreate142;
            CanCreate143Property = RemoteCanCreate143;
            CanInsert140Property = RemoteCanInsert140;
            CanInsert141Property = RemoteCanInsert141;
            CanInsert142Property = RemoteCanInsert142;
            CanInsert143Property = RemoteCanInsert143;
            CanCreate168Property = RemoteCanCreate168;
            CanCreate169Property = RemoteCanCreate169;
            CanCreate170Property = RemoteCanCreate170;
            CanCreate171Property = RemoteCanCreate171;
            CanInsert168Property = RemoteCanInsert168;
            CanInsert169Property = RemoteCanInsert169;
            CanInsert170Property = RemoteCanInsert170;
            CanInsert171Property = RemoteCanInsert171;
            CanCreate172Property = RemoteCanCreate172;
            CanCreate173Property = RemoteCanCreate173;
            CanCreate174Property = RemoteCanCreate174;
            CanCreate175Property = RemoteCanCreate175;
            CanInsert172Property = RemoteCanInsert172;
            CanInsert173Property = RemoteCanInsert173;
            CanInsert174Property = RemoteCanInsert174;
            CanInsert175Property = RemoteCanInsert175;
            CanCreate176Property = RemoteCanCreate176;
            CanCreate177Property = RemoteCanCreate177;
            CanCreate178Property = RemoteCanCreate178;
            CanCreate179Property = RemoteCanCreate179;
            CanInsert176Property = RemoteCanInsert176;
            CanInsert177Property = RemoteCanInsert177;
            CanInsert178Property = RemoteCanInsert178;
            CanInsert179Property = RemoteCanInsert179;
            CanCreate180Property = RemoteCanCreate180;
            CanCreate181Property = RemoteCanCreate181;
            CanCreate182Property = RemoteCanCreate182;
            CanCreate183Property = RemoteCanCreate183;
            CanInsert180Property = RemoteCanInsert180;
            CanInsert181Property = RemoteCanInsert181;
            CanInsert182Property = RemoteCanInsert182;
            CanInsert183Property = RemoteCanInsert183;
            CanCreate184Property = RemoteCanCreate184;
            CanCreate185Property = RemoteCanCreate185;
            CanCreate186Property = RemoteCanCreate186;
            CanCreate187Property = RemoteCanCreate187;
            CanInsert184Property = RemoteCanInsert184;
            CanInsert185Property = RemoteCanInsert185;
            CanInsert186Property = RemoteCanInsert186;
            CanInsert187Property = RemoteCanInsert187;
            CanCreate188Property = RemoteCanCreate188;
            CanCreate189Property = RemoteCanCreate189;
            CanCreate190Property = RemoteCanCreate190;
            CanCreate191Property = RemoteCanCreate191;
            CanInsert188Property = RemoteCanInsert188;
            CanInsert189Property = RemoteCanInsert189;
            CanInsert190Property = RemoteCanInsert190;
            CanInsert191Property = RemoteCanInsert191;
            Save24Property = RemoteSave24;
            Save25Property = RemoteSave25;
            Save26Property = RemoteSave26;
            Save27Property = RemoteSave27;
            Save28Property = RemoteSave28;
            Save29Property = RemoteSave29;
            Save30Property = RemoteSave30;
            Save31Property = RemoteSave31;
            Save32Property = RemoteSave32;
            Save33Property = RemoteSave33;
            Save34Property = RemoteSave34;
            Save35Property = RemoteSave35;
            Save36Property = RemoteSave36;
            Save37Property = RemoteSave37;
            Save38Property = RemoteSave38;
            Save39Property = RemoteSave39;
            Save40Property = RemoteSave40;
            Save41Property = RemoteSave41;
            Save42Property = RemoteSave42;
            Save43Property = RemoteSave43;
            Save44Property = RemoteSave44;
            Save45Property = RemoteSave45;
            Save46Property = RemoteSave46;
            Save47Property = RemoteSave47;
            Save48Property = RemoteSave48;
            Save49Property = RemoteSave49;
            Save50Property = RemoteSave50;
            Save51Property = RemoteSave51;
            Save52Property = RemoteSave52;
            Save53Property = RemoteSave53;
            Save54Property = RemoteSave54;
            Save55Property = RemoteSave55;
            Save56Property = RemoteSave56;
            Save57Property = RemoteSave57;
            Save58Property = RemoteSave58;
            Save59Property = RemoteSave59;
            Save60Property = RemoteSave60;
            Save61Property = RemoteSave61;
            Save62Property = RemoteSave62;
            Save63Property = RemoteSave63;
            Save64Property = RemoteSave64;
            Save65Property = RemoteSave65;
            Save66Property = RemoteSave66;
            Save67Property = RemoteSave67;
            Save68Property = RemoteSave68;
            Save69Property = RemoteSave69;
            Save70Property = RemoteSave70;
            Save71Property = RemoteSave71;
            Save72Property = RemoteSave72;
            Save73Property = RemoteSave73;
            Save74Property = RemoteSave74;
            Save75Property = RemoteSave75;
            Save76Property = RemoteSave76;
            Save77Property = RemoteSave77;
            Save78Property = RemoteSave78;
            Save79Property = RemoteSave79;
            Save80Property = RemoteSave80;
            Save81Property = RemoteSave81;
            Save82Property = RemoteSave82;
            Save83Property = RemoteSave83;
            Save84Property = RemoteSave84;
            Save85Property = RemoteSave85;
            Save86Property = RemoteSave86;
            Save87Property = RemoteSave87;
            Save88Property = RemoteSave88;
            Save89Property = RemoteSave89;
            Save90Property = RemoteSave90;
            Save91Property = RemoteSave91;
            Save92Property = RemoteSave92;
            Save93Property = RemoteSave93;
            Save94Property = RemoteSave94;
            Save95Property = RemoteSave95;
            Save120Property = RemoteSave120;
            Save121Property = RemoteSave121;
            Save122Property = RemoteSave122;
            Save123Property = RemoteSave123;
            Save124Property = RemoteSave124;
            Save125Property = RemoteSave125;
            Save126Property = RemoteSave126;
            Save127Property = RemoteSave127;
            Save128Property = RemoteSave128;
            Save129Property = RemoteSave129;
            Save130Property = RemoteSave130;
            Save131Property = RemoteSave131;
            Save132Property = RemoteSave132;
            Save133Property = RemoteSave133;
            Save134Property = RemoteSave134;
            Save135Property = RemoteSave135;
            Save136Property = RemoteSave136;
            Save137Property = RemoteSave137;
            Save138Property = RemoteSave138;
            Save139Property = RemoteSave139;
            Save140Property = RemoteSave140;
            Save141Property = RemoteSave141;
            Save142Property = RemoteSave142;
            Save143Property = RemoteSave143;
            Save144Property = RemoteSave144;
            Save145Property = RemoteSave145;
            Save146Property = RemoteSave146;
            Save147Property = RemoteSave147;
            Save148Property = RemoteSave148;
            Save149Property = RemoteSave149;
            Save150Property = RemoteSave150;
            Save151Property = RemoteSave151;
            Save152Property = RemoteSave152;
            Save153Property = RemoteSave153;
            Save154Property = RemoteSave154;
            Save155Property = RemoteSave155;
            Save156Property = RemoteSave156;
            Save157Property = RemoteSave157;
            Save158Property = RemoteSave158;
            Save159Property = RemoteSave159;
            Save160Property = RemoteSave160;
            Save161Property = RemoteSave161;
            Save162Property = RemoteSave162;
            Save163Property = RemoteSave163;
            Save164Property = RemoteSave164;
            Save165Property = RemoteSave165;
            Save166Property = RemoteSave166;
            Save167Property = RemoteSave167;
            Save168Property = RemoteSave168;
            Save169Property = RemoteSave169;
            Save170Property = RemoteSave170;
            Save171Property = RemoteSave171;
            Save172Property = RemoteSave172;
            Save173Property = RemoteSave173;
            Save174Property = RemoteSave174;
            Save175Property = RemoteSave175;
            Save176Property = RemoteSave176;
            Save177Property = RemoteSave177;
            Save178Property = RemoteSave178;
            Save179Property = RemoteSave179;
            Save180Property = RemoteSave180;
            Save181Property = RemoteSave181;
            Save182Property = RemoteSave182;
            Save183Property = RemoteSave183;
            Save184Property = RemoteSave184;
            Save185Property = RemoteSave185;
            Save186Property = RemoteSave186;
            Save187Property = RemoteSave187;
            Save188Property = RemoteSave188;
            Save189Property = RemoteSave189;
            Save190Property = RemoteSave190;
            Save191Property = RemoteSave191;
        }

        public virtual IAuthorizedAllCombinations Create(VoidBool v)
        {
            return (LocalCreate(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate(VoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual IAuthorizedAllCombinations Create(VoidString v)
        {
            return (LocalCreate1(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate1(VoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidTaskBool v)
        {
            return (await LocalCreate2(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate2(VoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidTaskString v)
        {
            return (await LocalCreate3(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate3(VoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert(IAuthorizedAllCombinations target, VoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert1(IAuthorizedAllCombinations target, VoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert2(IAuthorizedAllCombinations target, VoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert3(IAuthorizedAllCombinations target, VoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual IAuthorizedAllCombinations? Create(TrueBoolBool v)
        {
            return (LocalCreate4(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate4(TrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual IAuthorizedAllCombinations? Create(TrueBoolString v)
        {
            return (LocalCreate5(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate5(TrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskBool v)
        {
            return (await LocalCreate6(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate6(TrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskString v)
        {
            return (await LocalCreate7(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate7(TrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert4(IAuthorizedAllCombinations target, TrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert5(IAuthorizedAllCombinations target, TrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert6(IAuthorizedAllCombinations target, TrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert7(IAuthorizedAllCombinations target, TrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual IAuthorizedAllCombinations? Create(FalseBoolBool v)
        {
            return (LocalCreate8(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate8(FalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual IAuthorizedAllCombinations? Create(FalseBoolString v)
        {
            return (LocalCreate9(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate9(FalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskBool v)
        {
            return (await LocalCreate10(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate10(FalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskString v)
        {
            return (await LocalCreate11(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate11(FalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert8(IAuthorizedAllCombinations target, FalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert9(IAuthorizedAllCombinations target, FalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert10(IAuthorizedAllCombinations target, FalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert11(IAuthorizedAllCombinations target, FalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidBool v)
        {
            return (await LocalCreate12(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate12(TaskVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidString v)
        {
            return (await LocalCreate13(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate13(TaskVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidTaskBool v)
        {
            return (await LocalCreate14(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate14(TaskVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidTaskString v)
        {
            return (await LocalCreate15(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate15(TaskVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert12(IAuthorizedAllCombinations target, TaskVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert13(IAuthorizedAllCombinations target, TaskVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert14(IAuthorizedAllCombinations target, TaskVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert15(IAuthorizedAllCombinations target, TaskVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolBool v)
        {
            return (await LocalCreate16(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate16(TaskTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolString v)
        {
            return (await LocalCreate17(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate17(TaskTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskBool v)
        {
            return (await LocalCreate18(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate18(TaskTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskString v)
        {
            return (await LocalCreate19(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate19(TaskTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert16(IAuthorizedAllCombinations target, TaskTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert17(IAuthorizedAllCombinations target, TaskTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert18(IAuthorizedAllCombinations target, TaskTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert19(IAuthorizedAllCombinations target, TaskTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolBool v)
        {
            return (await LocalCreate20(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate20(TaskFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolString v)
        {
            return (await LocalCreate21(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate21(TaskFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskBool v)
        {
            return (await LocalCreate22(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate22(TaskFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskString v)
        {
            return (await LocalCreate23(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate23(TaskFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert20(IAuthorizedAllCombinations target, TaskFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert21(IAuthorizedAllCombinations target, TaskFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert22(IAuthorizedAllCombinations target, TaskFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert23(IAuthorizedAllCombinations target, TaskFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidBoolRemote v)
        {
            return (await Create24Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate24(VoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create24Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate24(VoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidStringRemote v)
        {
            return (await Create25Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate25(VoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create25Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate25(VoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidTaskBoolRemote v)
        {
            return (await Create26Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate26(VoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create26Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate26(VoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidTaskStringRemote v)
        {
            return (await Create27Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate27(VoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create27Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate27(VoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert24(IAuthorizedAllCombinations target, VoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert25(IAuthorizedAllCombinations target, VoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert26(IAuthorizedAllCombinations target, VoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert27(IAuthorizedAllCombinations target, VoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolBoolRemote v)
        {
            return (await Create28Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate28(TrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create28Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate28(TrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolStringRemote v)
        {
            return (await Create29Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate29(TrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create29Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate29(TrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskBoolRemote v)
        {
            return (await Create30Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate30(TrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create30Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate30(TrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskStringRemote v)
        {
            return (await Create31Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate31(TrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create31Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate31(TrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert28(IAuthorizedAllCombinations target, TrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert29(IAuthorizedAllCombinations target, TrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert30(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert31(IAuthorizedAllCombinations target, TrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolBoolRemote v)
        {
            return (await Create32Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate32(FalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create32Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate32(FalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolStringRemote v)
        {
            return (await Create33Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate33(FalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create33Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate33(FalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskBoolRemote v)
        {
            return (await Create34Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate34(FalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create34Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate34(FalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskStringRemote v)
        {
            return (await Create35Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate35(FalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create35Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate35(FalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert32(IAuthorizedAllCombinations target, FalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert33(IAuthorizedAllCombinations target, FalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert34(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert35(IAuthorizedAllCombinations target, FalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidBoolRemote v)
        {
            return (await Create36Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate36(TaskVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create36Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate36(TaskVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidStringRemote v)
        {
            return (await Create37Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate37(TaskVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create37Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate37(TaskVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidTaskBoolRemote v)
        {
            return (await Create38Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate38(TaskVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create38Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate38(TaskVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidTaskStringRemote v)
        {
            return (await Create39Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate39(TaskVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create39Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate39(TaskVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert36(IAuthorizedAllCombinations target, TaskVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert37(IAuthorizedAllCombinations target, TaskVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert38(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert39(IAuthorizedAllCombinations target, TaskVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolBoolRemote v)
        {
            return (await Create40Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate40(TaskTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create40Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate40(TaskTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolStringRemote v)
        {
            return (await Create41Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate41(TaskTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create41Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate41(TaskTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskBoolRemote v)
        {
            return (await Create42Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate42(TaskTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create42Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate42(TaskTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskStringRemote v)
        {
            return (await Create43Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate43(TaskTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create43Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate43(TaskTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert40(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert41(IAuthorizedAllCombinations target, TaskTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert42(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert43(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolBoolRemote v)
        {
            return (await Create44Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate44(TaskFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create44Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate44(TaskFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolStringRemote v)
        {
            return (await Create45Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate45(TaskFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create45Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate45(TaskFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskBoolRemote v)
        {
            return (await Create46Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate46(TaskFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create46Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate46(TaskFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskStringRemote v)
        {
            return (await Create47Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate47(TaskFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create47Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate47(TaskFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert44(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert45(IAuthorizedAllCombinations target, TaskFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert46(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert47(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidBool v)
        {
            return (await Create48Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate48(RemoteVoidBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create48Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate48(RemoteVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidString v)
        {
            return (await Create49Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate49(RemoteVoidString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create49Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate49(RemoteVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskBool v)
        {
            return (await Create50Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate50(RemoteVoidTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create50Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate50(RemoteVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskString v)
        {
            return (await Create51Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate51(RemoteVoidTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create51Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate51(RemoteVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert48(IAuthorizedAllCombinations target, RemoteVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert49(IAuthorizedAllCombinations target, RemoteVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert50(IAuthorizedAllCombinations target, RemoteVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert51(IAuthorizedAllCombinations target, RemoteVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolBool v)
        {
            return (await Create52Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate52(RemoteTrueBoolBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create52Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate52(RemoteTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolString v)
        {
            return (await Create53Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate53(RemoteTrueBoolString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create53Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate53(RemoteTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskBool v)
        {
            return (await Create54Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate54(RemoteTrueBoolTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create54Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate54(RemoteTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskString v)
        {
            return (await Create55Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate55(RemoteTrueBoolTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create55Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate55(RemoteTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert52(IAuthorizedAllCombinations target, RemoteTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert53(IAuthorizedAllCombinations target, RemoteTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert54(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert55(IAuthorizedAllCombinations target, RemoteTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolBool v)
        {
            return (await Create56Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate56(RemoteFalseBoolBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create56Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate56(RemoteFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolString v)
        {
            return (await Create57Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate57(RemoteFalseBoolString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create57Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate57(RemoteFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskBool v)
        {
            return (await Create58Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate58(RemoteFalseBoolTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create58Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate58(RemoteFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskString v)
        {
            return (await Create59Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate59(RemoteFalseBoolTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create59Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate59(RemoteFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert56(IAuthorizedAllCombinations target, RemoteFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert57(IAuthorizedAllCombinations target, RemoteFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert58(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert59(IAuthorizedAllCombinations target, RemoteFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidBool v)
        {
            return (await Create60Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate60(RemoteTaskVoidBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create60Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate60(RemoteTaskVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidString v)
        {
            return (await Create61Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate61(RemoteTaskVoidString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create61Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate61(RemoteTaskVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskBool v)
        {
            return (await Create62Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate62(RemoteTaskVoidTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create62Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate62(RemoteTaskVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskString v)
        {
            return (await Create63Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate63(RemoteTaskVoidTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create63Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate63(RemoteTaskVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert60(IAuthorizedAllCombinations target, RemoteTaskVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert61(IAuthorizedAllCombinations target, RemoteTaskVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert62(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert63(IAuthorizedAllCombinations target, RemoteTaskVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolBool v)
        {
            return (await Create64Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate64(RemoteTaskTrueBoolBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create64Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate64(RemoteTaskTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolString v)
        {
            return (await Create65Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate65(RemoteTaskTrueBoolString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create65Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate65(RemoteTaskTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskBool v)
        {
            return (await Create66Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate66(RemoteTaskTrueBoolTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create66Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate66(RemoteTaskTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskString v)
        {
            return (await Create67Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate67(RemoteTaskTrueBoolTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create67Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate67(RemoteTaskTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert64(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert65(IAuthorizedAllCombinations target, RemoteTaskTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert66(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert67(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolBool v)
        {
            return (await Create68Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate68(RemoteTaskFalseBoolBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create68Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate68(RemoteTaskFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolString v)
        {
            return (await Create69Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate69(RemoteTaskFalseBoolString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create69Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate69(RemoteTaskFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskBool v)
        {
            return (await Create70Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate70(RemoteTaskFalseBoolTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create70Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate70(RemoteTaskFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskString v)
        {
            return (await Create71Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate71(RemoteTaskFalseBoolTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create71Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate71(RemoteTaskFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert68(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert69(IAuthorizedAllCombinations target, RemoteTaskFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert70(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert71(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidBoolRemote v)
        {
            return (await Create72Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate72(RemoteVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create72Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate72(RemoteVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidStringRemote v)
        {
            return (await Create73Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate73(RemoteVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create73Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate73(RemoteVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskBoolRemote v)
        {
            return (await Create74Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate74(RemoteVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create74Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate74(RemoteVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskStringRemote v)
        {
            return (await Create75Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate75(RemoteVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create75Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate75(RemoteVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert72(IAuthorizedAllCombinations target, RemoteVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert73(IAuthorizedAllCombinations target, RemoteVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert74(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert75(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolBoolRemote v)
        {
            return (await Create76Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate76(RemoteTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create76Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate76(RemoteTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolStringRemote v)
        {
            return (await Create77Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate77(RemoteTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create77Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate77(RemoteTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskBoolRemote v)
        {
            return (await Create78Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate78(RemoteTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create78Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate78(RemoteTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskStringRemote v)
        {
            return (await Create79Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate79(RemoteTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create79Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate79(RemoteTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert76(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert77(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert78(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert79(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolBoolRemote v)
        {
            return (await Create80Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate80(RemoteFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create80Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate80(RemoteFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolStringRemote v)
        {
            return (await Create81Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate81(RemoteFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create81Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate81(RemoteFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskBoolRemote v)
        {
            return (await Create82Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate82(RemoteFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create82Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate82(RemoteFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskStringRemote v)
        {
            return (await Create83Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate83(RemoteFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create83Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate83(RemoteFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert80(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert81(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert82(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert83(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidBoolRemote v)
        {
            return (await Create84Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate84(RemoteTaskVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create84Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate84(RemoteTaskVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidStringRemote v)
        {
            return (await Create85Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate85(RemoteTaskVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create85Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate85(RemoteTaskVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskBoolRemote v)
        {
            return (await Create86Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate86(RemoteTaskVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create86Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate86(RemoteTaskVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskStringRemote v)
        {
            return (await Create87Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate87(RemoteTaskVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create87Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate87(RemoteTaskVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert84(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert85(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert86(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert87(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolBoolRemote v)
        {
            return (await Create88Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate88(RemoteTaskTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create88Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate88(RemoteTaskTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolStringRemote v)
        {
            return (await Create89Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate89(RemoteTaskTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create89Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate89(RemoteTaskTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskBoolRemote v)
        {
            return (await Create90Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate90(RemoteTaskTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create90Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate90(RemoteTaskTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskStringRemote v)
        {
            return (await Create91Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate91(RemoteTaskTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create91Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate91(RemoteTaskTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert88(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert89(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert90(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert91(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolBoolRemote v)
        {
            return (await Create92Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate92(RemoteTaskFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create92Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate92(RemoteTaskFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolStringRemote v)
        {
            return (await Create93Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate93(RemoteTaskFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create93Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate93(RemoteTaskFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskBoolRemote v)
        {
            return (await Create94Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate94(RemoteTaskFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create94Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate94(RemoteTaskFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskStringRemote v)
        {
            return (await Create95Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate95(RemoteTaskFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create95Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate95(RemoteTaskFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert92(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert93(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert94(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert95(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual IAuthorizedAllCombinations Create(VoidBoolDeny v)
        {
            return (LocalCreate96(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate96(VoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual IAuthorizedAllCombinations Create(VoidStringDeny v)
        {
            return (LocalCreate97(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate97(VoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidTaskBoolDeny v)
        {
            return (await LocalCreate98(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate98(VoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidTaskStringDeny v)
        {
            return (await LocalCreate99(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate99(VoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert96(IAuthorizedAllCombinations target, VoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert97(IAuthorizedAllCombinations target, VoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert98(IAuthorizedAllCombinations target, VoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert99(IAuthorizedAllCombinations target, VoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual IAuthorizedAllCombinations? Create(TrueBoolBoolDeny v)
        {
            return (LocalCreate100(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate100(TrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual IAuthorizedAllCombinations? Create(TrueBoolStringDeny v)
        {
            return (LocalCreate101(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate101(TrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskBoolDeny v)
        {
            return (await LocalCreate102(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate102(TrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskStringDeny v)
        {
            return (await LocalCreate103(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate103(TrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert100(IAuthorizedAllCombinations target, TrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert101(IAuthorizedAllCombinations target, TrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert102(IAuthorizedAllCombinations target, TrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert103(IAuthorizedAllCombinations target, TrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual IAuthorizedAllCombinations? Create(FalseBoolBoolDeny v)
        {
            return (LocalCreate104(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate104(FalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual IAuthorizedAllCombinations? Create(FalseBoolStringDeny v)
        {
            return (LocalCreate105(v)).Result;
        }

        public Authorized<IAuthorizedAllCombinations> LocalCreate105(FalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskBoolDeny v)
        {
            return (await LocalCreate106(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate106(FalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskStringDeny v)
        {
            return (await LocalCreate107(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate107(FalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert104(IAuthorizedAllCombinations target, FalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public Authorized<IAuthorizedAllCombinations> LocalInsert105(IAuthorizedAllCombinations target, FalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert106(IAuthorizedAllCombinations target, FalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert107(IAuthorizedAllCombinations target, FalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidBoolDeny v)
        {
            return (await LocalCreate108(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate108(TaskVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidStringDeny v)
        {
            return (await LocalCreate109(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate109(TaskVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidTaskBoolDeny v)
        {
            return (await LocalCreate110(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate110(TaskVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidTaskStringDeny v)
        {
            return (await LocalCreate111(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate111(TaskVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert108(IAuthorizedAllCombinations target, TaskVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert109(IAuthorizedAllCombinations target, TaskVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert110(IAuthorizedAllCombinations target, TaskVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert111(IAuthorizedAllCombinations target, TaskVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolBoolDeny v)
        {
            return (await LocalCreate112(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate112(TaskTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolStringDeny v)
        {
            return (await LocalCreate113(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate113(TaskTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskBoolDeny v)
        {
            return (await LocalCreate114(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate114(TaskTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskStringDeny v)
        {
            return (await LocalCreate115(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate115(TaskTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert112(IAuthorizedAllCombinations target, TaskTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert113(IAuthorizedAllCombinations target, TaskTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert114(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert115(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolBoolDeny v)
        {
            return (await LocalCreate116(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate116(TaskFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolStringDeny v)
        {
            return (await LocalCreate117(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate117(TaskFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskBoolDeny v)
        {
            return (await LocalCreate118(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate118(TaskFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskStringDeny v)
        {
            return (await LocalCreate119(v)).Result;
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate119(TaskFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert116(IAuthorizedAllCombinations target, TaskFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert117(IAuthorizedAllCombinations target, TaskFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert118(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert119(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidBoolRemoteDeny v)
        {
            return (await Create120Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate120(VoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create120Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate120(VoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidStringRemoteDeny v)
        {
            return (await Create121Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate121(VoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create121Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate121(VoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidTaskBoolRemoteDeny v)
        {
            return (await Create122Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate122(VoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create122Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate122(VoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(VoidTaskStringRemoteDeny v)
        {
            return (await Create123Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate123(VoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create123Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate123(VoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert120(IAuthorizedAllCombinations target, VoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert121(IAuthorizedAllCombinations target, VoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert122(IAuthorizedAllCombinations target, VoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert123(IAuthorizedAllCombinations target, VoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolBoolRemoteDeny v)
        {
            return (await Create124Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate124(TrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create124Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate124(TrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolStringRemoteDeny v)
        {
            return (await Create125Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate125(TrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create125Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate125(TrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskBoolRemoteDeny v)
        {
            return (await Create126Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate126(TrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create126Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate126(TrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TrueBoolTaskStringRemoteDeny v)
        {
            return (await Create127Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate127(TrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create127Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate127(TrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert124(IAuthorizedAllCombinations target, TrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert125(IAuthorizedAllCombinations target, TrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert126(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert127(IAuthorizedAllCombinations target, TrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolBoolRemoteDeny v)
        {
            return (await Create128Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate128(FalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create128Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate128(FalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolStringRemoteDeny v)
        {
            return (await Create129Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate129(FalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create129Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate129(FalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskBoolRemoteDeny v)
        {
            return (await Create130Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate130(FalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create130Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate130(FalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(FalseBoolTaskStringRemoteDeny v)
        {
            return (await Create131Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate131(FalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create131Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate131(FalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert128(IAuthorizedAllCombinations target, FalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert129(IAuthorizedAllCombinations target, FalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert130(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert131(IAuthorizedAllCombinations target, FalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidBoolRemoteDeny v)
        {
            return (await Create132Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate132(TaskVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create132Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate132(TaskVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidStringRemoteDeny v)
        {
            return (await Create133Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate133(TaskVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create133Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate133(TaskVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidTaskBoolRemoteDeny v)
        {
            return (await Create134Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate134(TaskVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create134Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate134(TaskVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(TaskVoidTaskStringRemoteDeny v)
        {
            return (await Create135Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate135(TaskVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create135Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate135(TaskVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert132(IAuthorizedAllCombinations target, TaskVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert133(IAuthorizedAllCombinations target, TaskVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert134(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert135(IAuthorizedAllCombinations target, TaskVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolBoolRemoteDeny v)
        {
            return (await Create136Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate136(TaskTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create136Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate136(TaskTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolStringRemoteDeny v)
        {
            return (await Create137Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate137(TaskTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create137Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate137(TaskTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskBoolRemoteDeny v)
        {
            return (await Create138Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate138(TaskTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create138Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate138(TaskTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskTrueBoolTaskStringRemoteDeny v)
        {
            return (await Create139Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate139(TaskTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create139Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate139(TaskTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert136(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert137(IAuthorizedAllCombinations target, TaskTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert138(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert139(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolBoolRemoteDeny v)
        {
            return (await Create140Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate140(TaskFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create140Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate140(TaskFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolStringRemoteDeny v)
        {
            return (await Create141Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate141(TaskFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create141Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate141(TaskFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskBoolRemoteDeny v)
        {
            return (await Create142Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate142(TaskFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create142Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate142(TaskFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(TaskFalseBoolTaskStringRemoteDeny v)
        {
            return (await Create143Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate143(TaskFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create143Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate143(TaskFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert140(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert141(IAuthorizedAllCombinations target, TaskFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert142(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert143(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidBoolDeny v)
        {
            return (await Create144Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate144(RemoteVoidBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create144Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate144(RemoteVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidStringDeny v)
        {
            return (await Create145Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate145(RemoteVoidStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create145Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate145(RemoteVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskBoolDeny v)
        {
            return (await Create146Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate146(RemoteVoidTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create146Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate146(RemoteVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskStringDeny v)
        {
            return (await Create147Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate147(RemoteVoidTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create147Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate147(RemoteVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert144(IAuthorizedAllCombinations target, RemoteVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert145(IAuthorizedAllCombinations target, RemoteVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert146(IAuthorizedAllCombinations target, RemoteVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert147(IAuthorizedAllCombinations target, RemoteVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolBoolDeny v)
        {
            return (await Create148Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate148(RemoteTrueBoolBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create148Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate148(RemoteTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolStringDeny v)
        {
            return (await Create149Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate149(RemoteTrueBoolStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create149Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate149(RemoteTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskBoolDeny v)
        {
            return (await Create150Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate150(RemoteTrueBoolTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create150Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate150(RemoteTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskStringDeny v)
        {
            return (await Create151Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate151(RemoteTrueBoolTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create151Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate151(RemoteTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert148(IAuthorizedAllCombinations target, RemoteTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert149(IAuthorizedAllCombinations target, RemoteTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert150(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert151(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolBoolDeny v)
        {
            return (await Create152Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate152(RemoteFalseBoolBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create152Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate152(RemoteFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolStringDeny v)
        {
            return (await Create153Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate153(RemoteFalseBoolStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create153Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate153(RemoteFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskBoolDeny v)
        {
            return (await Create154Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate154(RemoteFalseBoolTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create154Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate154(RemoteFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskStringDeny v)
        {
            return (await Create155Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate155(RemoteFalseBoolTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create155Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate155(RemoteFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert152(IAuthorizedAllCombinations target, RemoteFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert153(IAuthorizedAllCombinations target, RemoteFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert154(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert155(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidBoolDeny v)
        {
            return (await Create156Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate156(RemoteTaskVoidBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create156Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate156(RemoteTaskVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidStringDeny v)
        {
            return (await Create157Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate157(RemoteTaskVoidStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create157Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate157(RemoteTaskVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskBoolDeny v)
        {
            return (await Create158Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate158(RemoteTaskVoidTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create158Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate158(RemoteTaskVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskStringDeny v)
        {
            return (await Create159Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate159(RemoteTaskVoidTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create159Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate159(RemoteTaskVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert156(IAuthorizedAllCombinations target, RemoteTaskVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert157(IAuthorizedAllCombinations target, RemoteTaskVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert158(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert159(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolBoolDeny v)
        {
            return (await Create160Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate160(RemoteTaskTrueBoolBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create160Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate160(RemoteTaskTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolStringDeny v)
        {
            return (await Create161Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate161(RemoteTaskTrueBoolStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create161Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate161(RemoteTaskTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskBoolDeny v)
        {
            return (await Create162Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate162(RemoteTaskTrueBoolTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create162Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate162(RemoteTaskTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskStringDeny v)
        {
            return (await Create163Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate163(RemoteTaskTrueBoolTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create163Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate163(RemoteTaskTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert160(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert161(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert162(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert163(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolBoolDeny v)
        {
            return (await Create164Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate164(RemoteTaskFalseBoolBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create164Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate164(RemoteTaskFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolStringDeny v)
        {
            return (await Create165Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate165(RemoteTaskFalseBoolStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create165Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate165(RemoteTaskFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskBoolDeny v)
        {
            return (await Create166Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate166(RemoteTaskFalseBoolTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create166Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate166(RemoteTaskFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskStringDeny v)
        {
            return (await Create167Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate167(RemoteTaskFalseBoolTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create167Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate167(RemoteTaskFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert164(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert165(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert166(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert167(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidBoolRemoteDeny v)
        {
            return (await Create168Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate168(RemoteVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create168Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate168(RemoteVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidStringRemoteDeny v)
        {
            return (await Create169Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate169(RemoteVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create169Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate169(RemoteVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskBoolRemoteDeny v)
        {
            return (await Create170Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate170(RemoteVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create170Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate170(RemoteVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteVoidTaskStringRemoteDeny v)
        {
            return (await Create171Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate171(RemoteVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create171Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate171(RemoteVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert168(IAuthorizedAllCombinations target, RemoteVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert169(IAuthorizedAllCombinations target, RemoteVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert170(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert171(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCall<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolBoolRemoteDeny v)
        {
            return (await Create172Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate172(RemoteTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create172Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate172(RemoteTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolStringRemoteDeny v)
        {
            return (await Create173Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate173(RemoteTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create173Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate173(RemoteTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            return (await Create174Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate174(RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create174Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate174(RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTrueBoolTaskStringRemoteDeny v)
        {
            return (await Create175Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate175(RemoteTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create175Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate175(RemoteTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert172(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert173(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert174(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert175(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolBoolRemoteDeny v)
        {
            return (await Create176Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate176(RemoteFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create176Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate176(RemoteFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolStringRemoteDeny v)
        {
            return (await Create177Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate177(RemoteFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create177Delegate), [v]);
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalCreate177(RemoteFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v))));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            return (await Create178Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate178(RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create178Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate178(RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteFalseBoolTaskStringRemoteDeny v)
        {
            return (await Create179Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate179(RemoteFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create179Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate179(RemoteFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert176(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public Task<Authorized<IAuthorizedAllCombinations>> LocalInsert177(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(authorized));
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return Task.FromResult(new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v))));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert178(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert179(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(DoMapperMethodCallBool<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidBoolRemoteDeny v)
        {
            return (await Create180Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate180(RemoteTaskVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create180Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate180(RemoteTaskVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidStringRemoteDeny v)
        {
            return (await Create181Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate181(RemoteTaskVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create181Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate181(RemoteTaskVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            return (await Create182Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate182(RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create182Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate182(RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations> Create(RemoteTaskVoidTaskStringRemoteDeny v)
        {
            return (await Create183Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate183(RemoteTaskVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create183Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate183(RemoteTaskVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert180(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert181(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert182(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert183(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            return (await Create184Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate184(RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create184Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate184(RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolStringRemoteDeny v)
        {
            return (await Create185Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate185(RemoteTaskTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create185Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate185(RemoteTaskTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            return (await Create186Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate186(RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create186Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate186(RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            return (await Create187Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate187(RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create187Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate187(RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert184(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert185(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert186(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert187(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            return (await Create188Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate188(RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create188Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate188(RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolStringRemoteDeny v)
        {
            return (await Create189Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate189(RemoteTaskFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create189Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate189(RemoteTaskFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            return (await Create190Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate190(RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create190Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate190(RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public virtual async Task<IAuthorizedAllCombinations?> Create(RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            return (await Create191Property(v)).Result;
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteCreate191(RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Create191Delegate), [v]);
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalCreate191(RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<AuthorizedAllCombinations>();
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(target, DataMapperMethod.Create, () => target.Create(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert188(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert189(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert190(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public async Task<Authorized<IAuthorizedAllCombinations>> LocalInsert191(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return new Authorized<IAuthorizedAllCombinations>(authorized);
            }

            var cTarget = (AuthorizedAllCombinations)target ?? throw new Exception("IAuthorizedAllCombinations must implement AuthorizedAllCombinations");
            return new Authorized<IAuthorizedAllCombinations>(await DoMapperMethodCallBoolAsync<IAuthorizedAllCombinations>(cTarget, DataMapperMethod.Insert, () => cTarget.Insert(v)));
        }

        public virtual Authorized CanCreate(VoidBool v)
        {
            return LocalCanCreate(v);
        }

        public Authorized LocalCanCreate(VoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(VoidString v)
        {
            return LocalCanCreate1(v);
        }

        public Authorized LocalCanCreate1(VoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(VoidTaskBool v)
        {
            return LocalCanCreate2(v);
        }

        public async Task<Authorized> LocalCanCreate2(VoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(VoidTaskString v)
        {
            return LocalCanCreate3(v);
        }

        public async Task<Authorized> LocalCanCreate3(VoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(VoidBool v)
        {
            return LocalCanInsert(v);
        }

        public Authorized LocalCanInsert(VoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(VoidString v)
        {
            return LocalCanInsert1(v);
        }

        public Authorized LocalCanInsert1(VoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(VoidTaskBool v)
        {
            return LocalCanInsert2(v);
        }

        public async Task<Authorized> LocalCanInsert2(VoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(VoidTaskString v)
        {
            return LocalCanInsert3(v);
        }

        public async Task<Authorized> LocalCanInsert3(VoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TrueBoolBool v)
        {
            return LocalCanCreate4(v);
        }

        public Authorized LocalCanCreate4(TrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TrueBoolString v)
        {
            return LocalCanCreate5(v);
        }

        public Authorized LocalCanCreate5(TrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TrueBoolTaskBool v)
        {
            return LocalCanCreate6(v);
        }

        public async Task<Authorized> LocalCanCreate6(TrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TrueBoolTaskString v)
        {
            return LocalCanCreate7(v);
        }

        public async Task<Authorized> LocalCanCreate7(TrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TrueBoolBool v)
        {
            return LocalCanInsert4(v);
        }

        public Authorized LocalCanInsert4(TrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TrueBoolString v)
        {
            return LocalCanInsert5(v);
        }

        public Authorized LocalCanInsert5(TrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TrueBoolTaskBool v)
        {
            return LocalCanInsert6(v);
        }

        public async Task<Authorized> LocalCanInsert6(TrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TrueBoolTaskString v)
        {
            return LocalCanInsert7(v);
        }

        public async Task<Authorized> LocalCanInsert7(TrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(FalseBoolBool v)
        {
            return LocalCanCreate8(v);
        }

        public Authorized LocalCanCreate8(FalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(FalseBoolString v)
        {
            return LocalCanCreate9(v);
        }

        public Authorized LocalCanCreate9(FalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(FalseBoolTaskBool v)
        {
            return LocalCanCreate10(v);
        }

        public async Task<Authorized> LocalCanCreate10(FalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(FalseBoolTaskString v)
        {
            return LocalCanCreate11(v);
        }

        public async Task<Authorized> LocalCanCreate11(FalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(FalseBoolBool v)
        {
            return LocalCanInsert8(v);
        }

        public Authorized LocalCanInsert8(FalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(FalseBoolString v)
        {
            return LocalCanInsert9(v);
        }

        public Authorized LocalCanInsert9(FalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(FalseBoolTaskBool v)
        {
            return LocalCanInsert10(v);
        }

        public async Task<Authorized> LocalCanInsert10(FalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(FalseBoolTaskString v)
        {
            return LocalCanInsert11(v);
        }

        public async Task<Authorized> LocalCanInsert11(FalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskVoidBool v)
        {
            return LocalCanCreate12(v);
        }

        public Authorized LocalCanCreate12(TaskVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskVoidString v)
        {
            return LocalCanCreate13(v);
        }

        public Authorized LocalCanCreate13(TaskVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskVoidTaskBool v)
        {
            return LocalCanCreate14(v);
        }

        public async Task<Authorized> LocalCanCreate14(TaskVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskVoidTaskString v)
        {
            return LocalCanCreate15(v);
        }

        public async Task<Authorized> LocalCanCreate15(TaskVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskVoidBool v)
        {
            return LocalCanInsert12(v);
        }

        public Authorized LocalCanInsert12(TaskVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskVoidString v)
        {
            return LocalCanInsert13(v);
        }

        public Authorized LocalCanInsert13(TaskVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskVoidTaskBool v)
        {
            return LocalCanInsert14(v);
        }

        public async Task<Authorized> LocalCanInsert14(TaskVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskVoidTaskString v)
        {
            return LocalCanInsert15(v);
        }

        public async Task<Authorized> LocalCanInsert15(TaskVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskTrueBoolBool v)
        {
            return LocalCanCreate16(v);
        }

        public Authorized LocalCanCreate16(TaskTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskTrueBoolString v)
        {
            return LocalCanCreate17(v);
        }

        public Authorized LocalCanCreate17(TaskTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolTaskBool v)
        {
            return LocalCanCreate18(v);
        }

        public async Task<Authorized> LocalCanCreate18(TaskTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolTaskString v)
        {
            return LocalCanCreate19(v);
        }

        public async Task<Authorized> LocalCanCreate19(TaskTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskTrueBoolBool v)
        {
            return LocalCanInsert16(v);
        }

        public Authorized LocalCanInsert16(TaskTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskTrueBoolString v)
        {
            return LocalCanInsert17(v);
        }

        public Authorized LocalCanInsert17(TaskTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolTaskBool v)
        {
            return LocalCanInsert18(v);
        }

        public async Task<Authorized> LocalCanInsert18(TaskTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolTaskString v)
        {
            return LocalCanInsert19(v);
        }

        public async Task<Authorized> LocalCanInsert19(TaskTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskFalseBoolBool v)
        {
            return LocalCanCreate20(v);
        }

        public Authorized LocalCanCreate20(TaskFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskFalseBoolString v)
        {
            return LocalCanCreate21(v);
        }

        public Authorized LocalCanCreate21(TaskFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolTaskBool v)
        {
            return LocalCanCreate22(v);
        }

        public async Task<Authorized> LocalCanCreate22(TaskFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolTaskString v)
        {
            return LocalCanCreate23(v);
        }

        public async Task<Authorized> LocalCanCreate23(TaskFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskFalseBoolBool v)
        {
            return LocalCanInsert20(v);
        }

        public Authorized LocalCanInsert20(TaskFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskFalseBoolString v)
        {
            return LocalCanInsert21(v);
        }

        public Authorized LocalCanInsert21(TaskFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolTaskBool v)
        {
            return LocalCanInsert22(v);
        }

        public async Task<Authorized> LocalCanInsert22(TaskFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolTaskString v)
        {
            return LocalCanInsert23(v);
        }

        public async Task<Authorized> LocalCanInsert23(TaskFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(VoidBoolRemote v)
        {
            return CanCreate24Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate24(VoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate24Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate24(VoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(VoidStringRemote v)
        {
            return CanCreate25Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate25(VoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate25Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate25(VoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(VoidTaskBoolRemote v)
        {
            return CanCreate26Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate26(VoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate26Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate26(VoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(VoidTaskStringRemote v)
        {
            return CanCreate27Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate27(VoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate27Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate27(VoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(VoidBoolRemote v)
        {
            return CanInsert24Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert24(VoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert24Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert24(VoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(VoidStringRemote v)
        {
            return CanInsert25Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert25(VoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert25Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert25(VoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(VoidTaskBoolRemote v)
        {
            return CanInsert26Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert26(VoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert26Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert26(VoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(VoidTaskStringRemote v)
        {
            return CanInsert27Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert27(VoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert27Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert27(VoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TrueBoolBoolRemote v)
        {
            return CanCreate28Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate28(TrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate28Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate28(TrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TrueBoolStringRemote v)
        {
            return CanCreate29Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate29(TrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate29Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate29(TrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TrueBoolTaskBoolRemote v)
        {
            return CanCreate30Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate30(TrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate30Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate30(TrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TrueBoolTaskStringRemote v)
        {
            return CanCreate31Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate31(TrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate31Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate31(TrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TrueBoolBoolRemote v)
        {
            return CanInsert28Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert28(TrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert28Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert28(TrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TrueBoolStringRemote v)
        {
            return CanInsert29Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert29(TrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert29Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert29(TrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TrueBoolTaskBoolRemote v)
        {
            return CanInsert30Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert30(TrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert30Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert30(TrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TrueBoolTaskStringRemote v)
        {
            return CanInsert31Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert31(TrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert31Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert31(TrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(FalseBoolBoolRemote v)
        {
            return CanCreate32Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate32(FalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate32Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate32(FalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(FalseBoolStringRemote v)
        {
            return CanCreate33Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate33(FalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate33Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate33(FalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(FalseBoolTaskBoolRemote v)
        {
            return CanCreate34Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate34(FalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate34Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate34(FalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(FalseBoolTaskStringRemote v)
        {
            return CanCreate35Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate35(FalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate35Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate35(FalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(FalseBoolBoolRemote v)
        {
            return CanInsert32Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert32(FalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert32Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert32(FalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(FalseBoolStringRemote v)
        {
            return CanInsert33Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert33(FalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert33Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert33(FalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(FalseBoolTaskBoolRemote v)
        {
            return CanInsert34Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert34(FalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert34Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert34(FalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(FalseBoolTaskStringRemote v)
        {
            return CanInsert35Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert35(FalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert35Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert35(FalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskVoidBoolRemote v)
        {
            return CanCreate36Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate36(TaskVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate36Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate36(TaskVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskVoidStringRemote v)
        {
            return CanCreate37Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate37(TaskVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate37Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate37(TaskVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskVoidTaskBoolRemote v)
        {
            return CanCreate38Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate38(TaskVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate38Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate38(TaskVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskVoidTaskStringRemote v)
        {
            return CanCreate39Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate39(TaskVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate39Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate39(TaskVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskVoidBoolRemote v)
        {
            return CanInsert36Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert36(TaskVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert36Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert36(TaskVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskVoidStringRemote v)
        {
            return CanInsert37Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert37(TaskVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert37Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert37(TaskVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskVoidTaskBoolRemote v)
        {
            return CanInsert38Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert38(TaskVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert38Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert38(TaskVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskVoidTaskStringRemote v)
        {
            return CanInsert39Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert39(TaskVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert39Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert39(TaskVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolBoolRemote v)
        {
            return CanCreate40Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate40(TaskTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate40Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate40(TaskTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolStringRemote v)
        {
            return CanCreate41Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate41(TaskTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate41Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate41(TaskTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolTaskBoolRemote v)
        {
            return CanCreate42Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate42(TaskTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate42Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate42(TaskTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolTaskStringRemote v)
        {
            return CanCreate43Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate43(TaskTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate43Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate43(TaskTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolBoolRemote v)
        {
            return CanInsert40Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert40(TaskTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert40Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert40(TaskTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolStringRemote v)
        {
            return CanInsert41Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert41(TaskTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert41Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert41(TaskTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolTaskBoolRemote v)
        {
            return CanInsert42Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert42(TaskTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert42Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert42(TaskTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolTaskStringRemote v)
        {
            return CanInsert43Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert43(TaskTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert43Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert43(TaskTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolBoolRemote v)
        {
            return CanCreate44Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate44(TaskFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate44Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate44(TaskFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolStringRemote v)
        {
            return CanCreate45Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate45(TaskFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate45Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate45(TaskFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolTaskBoolRemote v)
        {
            return CanCreate46Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate46(TaskFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate46Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate46(TaskFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolTaskStringRemote v)
        {
            return CanCreate47Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate47(TaskFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate47Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate47(TaskFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolBoolRemote v)
        {
            return CanInsert44Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert44(TaskFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert44Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert44(TaskFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolStringRemote v)
        {
            return CanInsert45Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert45(TaskFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert45Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert45(TaskFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolTaskBoolRemote v)
        {
            return CanInsert46Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert46(TaskFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert46Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert46(TaskFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolTaskStringRemote v)
        {
            return CanInsert47Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert47(TaskFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert47Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert47(TaskFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteVoidBool v)
        {
            return LocalCanCreate48(v);
        }

        public Authorized LocalCanCreate48(RemoteVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteVoidString v)
        {
            return LocalCanCreate49(v);
        }

        public Authorized LocalCanCreate49(RemoteVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidTaskBool v)
        {
            return LocalCanCreate50(v);
        }

        public async Task<Authorized> LocalCanCreate50(RemoteVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidTaskString v)
        {
            return LocalCanCreate51(v);
        }

        public async Task<Authorized> LocalCanCreate51(RemoteVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteVoidBool v)
        {
            return LocalCanInsert48(v);
        }

        public Authorized LocalCanInsert48(RemoteVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteVoidString v)
        {
            return LocalCanInsert49(v);
        }

        public Authorized LocalCanInsert49(RemoteVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidTaskBool v)
        {
            return LocalCanInsert50(v);
        }

        public async Task<Authorized> LocalCanInsert50(RemoteVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidTaskString v)
        {
            return LocalCanInsert51(v);
        }

        public async Task<Authorized> LocalCanInsert51(RemoteVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTrueBoolBool v)
        {
            return LocalCanCreate52(v);
        }

        public Authorized LocalCanCreate52(RemoteTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTrueBoolString v)
        {
            return LocalCanCreate53(v);
        }

        public Authorized LocalCanCreate53(RemoteTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolTaskBool v)
        {
            return LocalCanCreate54(v);
        }

        public async Task<Authorized> LocalCanCreate54(RemoteTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolTaskString v)
        {
            return LocalCanCreate55(v);
        }

        public async Task<Authorized> LocalCanCreate55(RemoteTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTrueBoolBool v)
        {
            return LocalCanInsert52(v);
        }

        public Authorized LocalCanInsert52(RemoteTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTrueBoolString v)
        {
            return LocalCanInsert53(v);
        }

        public Authorized LocalCanInsert53(RemoteTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolTaskBool v)
        {
            return LocalCanInsert54(v);
        }

        public async Task<Authorized> LocalCanInsert54(RemoteTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolTaskString v)
        {
            return LocalCanInsert55(v);
        }

        public async Task<Authorized> LocalCanInsert55(RemoteTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteFalseBoolBool v)
        {
            return LocalCanCreate56(v);
        }

        public Authorized LocalCanCreate56(RemoteFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteFalseBoolString v)
        {
            return LocalCanCreate57(v);
        }

        public Authorized LocalCanCreate57(RemoteFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolTaskBool v)
        {
            return LocalCanCreate58(v);
        }

        public async Task<Authorized> LocalCanCreate58(RemoteFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolTaskString v)
        {
            return LocalCanCreate59(v);
        }

        public async Task<Authorized> LocalCanCreate59(RemoteFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteFalseBoolBool v)
        {
            return LocalCanInsert56(v);
        }

        public Authorized LocalCanInsert56(RemoteFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteFalseBoolString v)
        {
            return LocalCanInsert57(v);
        }

        public Authorized LocalCanInsert57(RemoteFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolTaskBool v)
        {
            return LocalCanInsert58(v);
        }

        public async Task<Authorized> LocalCanInsert58(RemoteFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolTaskString v)
        {
            return LocalCanInsert59(v);
        }

        public async Task<Authorized> LocalCanInsert59(RemoteFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskVoidBool v)
        {
            return LocalCanCreate60(v);
        }

        public Authorized LocalCanCreate60(RemoteTaskVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskVoidString v)
        {
            return LocalCanCreate61(v);
        }

        public Authorized LocalCanCreate61(RemoteTaskVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidTaskBool v)
        {
            return LocalCanCreate62(v);
        }

        public async Task<Authorized> LocalCanCreate62(RemoteTaskVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidTaskString v)
        {
            return LocalCanCreate63(v);
        }

        public async Task<Authorized> LocalCanCreate63(RemoteTaskVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskVoidBool v)
        {
            return LocalCanInsert60(v);
        }

        public Authorized LocalCanInsert60(RemoteTaskVoidBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskVoidString v)
        {
            return LocalCanInsert61(v);
        }

        public Authorized LocalCanInsert61(RemoteTaskVoidString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidTaskBool v)
        {
            return LocalCanInsert62(v);
        }

        public async Task<Authorized> LocalCanInsert62(RemoteTaskVoidTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidTaskString v)
        {
            return LocalCanInsert63(v);
        }

        public async Task<Authorized> LocalCanInsert63(RemoteTaskVoidTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskTrueBoolBool v)
        {
            return LocalCanCreate64(v);
        }

        public Authorized LocalCanCreate64(RemoteTaskTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskTrueBoolString v)
        {
            return LocalCanCreate65(v);
        }

        public Authorized LocalCanCreate65(RemoteTaskTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskBool v)
        {
            return LocalCanCreate66(v);
        }

        public async Task<Authorized> LocalCanCreate66(RemoteTaskTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskString v)
        {
            return LocalCanCreate67(v);
        }

        public async Task<Authorized> LocalCanCreate67(RemoteTaskTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskTrueBoolBool v)
        {
            return LocalCanInsert64(v);
        }

        public Authorized LocalCanInsert64(RemoteTaskTrueBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskTrueBoolString v)
        {
            return LocalCanInsert65(v);
        }

        public Authorized LocalCanInsert65(RemoteTaskTrueBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskBool v)
        {
            return LocalCanInsert66(v);
        }

        public async Task<Authorized> LocalCanInsert66(RemoteTaskTrueBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskString v)
        {
            return LocalCanInsert67(v);
        }

        public async Task<Authorized> LocalCanInsert67(RemoteTaskTrueBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskFalseBoolBool v)
        {
            return LocalCanCreate68(v);
        }

        public Authorized LocalCanCreate68(RemoteTaskFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskFalseBoolString v)
        {
            return LocalCanCreate69(v);
        }

        public Authorized LocalCanCreate69(RemoteTaskFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskBool v)
        {
            return LocalCanCreate70(v);
        }

        public async Task<Authorized> LocalCanCreate70(RemoteTaskFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskString v)
        {
            return LocalCanCreate71(v);
        }

        public async Task<Authorized> LocalCanCreate71(RemoteTaskFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskFalseBoolBool v)
        {
            return LocalCanInsert68(v);
        }

        public Authorized LocalCanInsert68(RemoteTaskFalseBoolBool v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskFalseBoolString v)
        {
            return LocalCanInsert69(v);
        }

        public Authorized LocalCanInsert69(RemoteTaskFalseBoolString v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskBool v)
        {
            return LocalCanInsert70(v);
        }

        public async Task<Authorized> LocalCanInsert70(RemoteTaskFalseBoolTaskBool v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskString v)
        {
            return LocalCanInsert71(v);
        }

        public async Task<Authorized> LocalCanInsert71(RemoteTaskFalseBoolTaskString v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidBoolRemote v)
        {
            return CanCreate72Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate72(RemoteVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate72Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate72(RemoteVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidStringRemote v)
        {
            return CanCreate73Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate73(RemoteVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate73Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate73(RemoteVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidTaskBoolRemote v)
        {
            return CanCreate74Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate74(RemoteVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate74Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate74(RemoteVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidTaskStringRemote v)
        {
            return CanCreate75Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate75(RemoteVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate75Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate75(RemoteVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidBoolRemote v)
        {
            return CanInsert72Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert72(RemoteVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert72Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert72(RemoteVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidStringRemote v)
        {
            return CanInsert73Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert73(RemoteVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert73Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert73(RemoteVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidTaskBoolRemote v)
        {
            return CanInsert74Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert74(RemoteVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert74Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert74(RemoteVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidTaskStringRemote v)
        {
            return CanInsert75Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert75(RemoteVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert75Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert75(RemoteVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolBoolRemote v)
        {
            return CanCreate76Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate76(RemoteTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate76Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate76(RemoteTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolStringRemote v)
        {
            return CanCreate77Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate77(RemoteTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate77Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate77(RemoteTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolTaskBoolRemote v)
        {
            return CanCreate78Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate78(RemoteTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate78Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate78(RemoteTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolTaskStringRemote v)
        {
            return CanCreate79Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate79(RemoteTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate79Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate79(RemoteTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolBoolRemote v)
        {
            return CanInsert76Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert76(RemoteTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert76Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert76(RemoteTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolStringRemote v)
        {
            return CanInsert77Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert77(RemoteTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert77Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert77(RemoteTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolTaskBoolRemote v)
        {
            return CanInsert78Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert78(RemoteTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert78Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert78(RemoteTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolTaskStringRemote v)
        {
            return CanInsert79Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert79(RemoteTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert79Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert79(RemoteTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolBoolRemote v)
        {
            return CanCreate80Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate80(RemoteFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate80Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate80(RemoteFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolStringRemote v)
        {
            return CanCreate81Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate81(RemoteFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate81Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate81(RemoteFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolTaskBoolRemote v)
        {
            return CanCreate82Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate82(RemoteFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate82Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate82(RemoteFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolTaskStringRemote v)
        {
            return CanCreate83Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate83(RemoteFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate83Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate83(RemoteFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolBoolRemote v)
        {
            return CanInsert80Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert80(RemoteFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert80Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert80(RemoteFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolStringRemote v)
        {
            return CanInsert81Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert81(RemoteFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert81Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert81(RemoteFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolTaskBoolRemote v)
        {
            return CanInsert82Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert82(RemoteFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert82Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert82(RemoteFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolTaskStringRemote v)
        {
            return CanInsert83Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert83(RemoteFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert83Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert83(RemoteFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidBoolRemote v)
        {
            return CanCreate84Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate84(RemoteTaskVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate84Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate84(RemoteTaskVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidStringRemote v)
        {
            return CanCreate85Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate85(RemoteTaskVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate85Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate85(RemoteTaskVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidTaskBoolRemote v)
        {
            return CanCreate86Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate86(RemoteTaskVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate86Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate86(RemoteTaskVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidTaskStringRemote v)
        {
            return CanCreate87Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate87(RemoteTaskVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate87Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate87(RemoteTaskVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidBoolRemote v)
        {
            return CanInsert84Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert84(RemoteTaskVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert84Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert84(RemoteTaskVoidBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidStringRemote v)
        {
            return CanInsert85Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert85(RemoteTaskVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert85Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert85(RemoteTaskVoidStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidTaskBoolRemote v)
        {
            return CanInsert86Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert86(RemoteTaskVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert86Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert86(RemoteTaskVoidTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidTaskStringRemote v)
        {
            return CanInsert87Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert87(RemoteTaskVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert87Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert87(RemoteTaskVoidTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolBoolRemote v)
        {
            return CanCreate88Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate88(RemoteTaskTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate88Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate88(RemoteTaskTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolStringRemote v)
        {
            return CanCreate89Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate89(RemoteTaskTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate89Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate89(RemoteTaskTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskBoolRemote v)
        {
            return CanCreate90Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate90(RemoteTaskTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate90Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate90(RemoteTaskTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskStringRemote v)
        {
            return CanCreate91Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate91(RemoteTaskTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate91Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate91(RemoteTaskTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolBoolRemote v)
        {
            return CanInsert88Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert88(RemoteTaskTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert88Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert88(RemoteTaskTrueBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolStringRemote v)
        {
            return CanInsert89Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert89(RemoteTaskTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert89Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert89(RemoteTaskTrueBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskBoolRemote v)
        {
            return CanInsert90Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert90(RemoteTaskTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert90Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert90(RemoteTaskTrueBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskStringRemote v)
        {
            return CanInsert91Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert91(RemoteTaskTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert91Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert91(RemoteTaskTrueBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolBoolRemote v)
        {
            return CanCreate92Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate92(RemoteTaskFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate92Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate92(RemoteTaskFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolStringRemote v)
        {
            return CanCreate93Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate93(RemoteTaskFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate93Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate93(RemoteTaskFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskBoolRemote v)
        {
            return CanCreate94Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate94(RemoteTaskFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate94Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate94(RemoteTaskFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskStringRemote v)
        {
            return CanCreate95Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate95(RemoteTaskFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate95Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate95(RemoteTaskFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolBoolRemote v)
        {
            return CanInsert92Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert92(RemoteTaskFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert92Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert92(RemoteTaskFalseBoolBoolRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolStringRemote v)
        {
            return CanInsert93Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert93(RemoteTaskFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert93Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert93(RemoteTaskFalseBoolStringRemote v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskBoolRemote v)
        {
            return CanInsert94Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert94(RemoteTaskFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert94Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert94(RemoteTaskFalseBoolTaskBoolRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskStringRemote v)
        {
            return CanInsert95Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert95(RemoteTaskFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert95Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert95(RemoteTaskFalseBoolTaskStringRemote v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(VoidBoolDeny v)
        {
            return LocalCanCreate96(v);
        }

        public Authorized LocalCanCreate96(VoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(VoidStringDeny v)
        {
            return LocalCanCreate97(v);
        }

        public Authorized LocalCanCreate97(VoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(VoidTaskBoolDeny v)
        {
            return LocalCanCreate98(v);
        }

        public async Task<Authorized> LocalCanCreate98(VoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(VoidTaskStringDeny v)
        {
            return LocalCanCreate99(v);
        }

        public async Task<Authorized> LocalCanCreate99(VoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(VoidBoolDeny v)
        {
            return LocalCanInsert96(v);
        }

        public Authorized LocalCanInsert96(VoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(VoidStringDeny v)
        {
            return LocalCanInsert97(v);
        }

        public Authorized LocalCanInsert97(VoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(VoidTaskBoolDeny v)
        {
            return LocalCanInsert98(v);
        }

        public async Task<Authorized> LocalCanInsert98(VoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(VoidTaskStringDeny v)
        {
            return LocalCanInsert99(v);
        }

        public async Task<Authorized> LocalCanInsert99(VoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TrueBoolBoolDeny v)
        {
            return LocalCanCreate100(v);
        }

        public Authorized LocalCanCreate100(TrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TrueBoolStringDeny v)
        {
            return LocalCanCreate101(v);
        }

        public Authorized LocalCanCreate101(TrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TrueBoolTaskBoolDeny v)
        {
            return LocalCanCreate102(v);
        }

        public async Task<Authorized> LocalCanCreate102(TrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TrueBoolTaskStringDeny v)
        {
            return LocalCanCreate103(v);
        }

        public async Task<Authorized> LocalCanCreate103(TrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TrueBoolBoolDeny v)
        {
            return LocalCanInsert100(v);
        }

        public Authorized LocalCanInsert100(TrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TrueBoolStringDeny v)
        {
            return LocalCanInsert101(v);
        }

        public Authorized LocalCanInsert101(TrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TrueBoolTaskBoolDeny v)
        {
            return LocalCanInsert102(v);
        }

        public async Task<Authorized> LocalCanInsert102(TrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TrueBoolTaskStringDeny v)
        {
            return LocalCanInsert103(v);
        }

        public async Task<Authorized> LocalCanInsert103(TrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(FalseBoolBoolDeny v)
        {
            return LocalCanCreate104(v);
        }

        public Authorized LocalCanCreate104(FalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(FalseBoolStringDeny v)
        {
            return LocalCanCreate105(v);
        }

        public Authorized LocalCanCreate105(FalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(FalseBoolTaskBoolDeny v)
        {
            return LocalCanCreate106(v);
        }

        public async Task<Authorized> LocalCanCreate106(FalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(FalseBoolTaskStringDeny v)
        {
            return LocalCanCreate107(v);
        }

        public async Task<Authorized> LocalCanCreate107(FalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(FalseBoolBoolDeny v)
        {
            return LocalCanInsert104(v);
        }

        public Authorized LocalCanInsert104(FalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(FalseBoolStringDeny v)
        {
            return LocalCanInsert105(v);
        }

        public Authorized LocalCanInsert105(FalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(FalseBoolTaskBoolDeny v)
        {
            return LocalCanInsert106(v);
        }

        public async Task<Authorized> LocalCanInsert106(FalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(FalseBoolTaskStringDeny v)
        {
            return LocalCanInsert107(v);
        }

        public async Task<Authorized> LocalCanInsert107(FalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskVoidBoolDeny v)
        {
            return LocalCanCreate108(v);
        }

        public Authorized LocalCanCreate108(TaskVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskVoidStringDeny v)
        {
            return LocalCanCreate109(v);
        }

        public Authorized LocalCanCreate109(TaskVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskVoidTaskBoolDeny v)
        {
            return LocalCanCreate110(v);
        }

        public async Task<Authorized> LocalCanCreate110(TaskVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskVoidTaskStringDeny v)
        {
            return LocalCanCreate111(v);
        }

        public async Task<Authorized> LocalCanCreate111(TaskVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskVoidBoolDeny v)
        {
            return LocalCanInsert108(v);
        }

        public Authorized LocalCanInsert108(TaskVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskVoidStringDeny v)
        {
            return LocalCanInsert109(v);
        }

        public Authorized LocalCanInsert109(TaskVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskVoidTaskBoolDeny v)
        {
            return LocalCanInsert110(v);
        }

        public async Task<Authorized> LocalCanInsert110(TaskVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskVoidTaskStringDeny v)
        {
            return LocalCanInsert111(v);
        }

        public async Task<Authorized> LocalCanInsert111(TaskVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskTrueBoolBoolDeny v)
        {
            return LocalCanCreate112(v);
        }

        public Authorized LocalCanCreate112(TaskTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskTrueBoolStringDeny v)
        {
            return LocalCanCreate113(v);
        }

        public Authorized LocalCanCreate113(TaskTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolTaskBoolDeny v)
        {
            return LocalCanCreate114(v);
        }

        public async Task<Authorized> LocalCanCreate114(TaskTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolTaskStringDeny v)
        {
            return LocalCanCreate115(v);
        }

        public async Task<Authorized> LocalCanCreate115(TaskTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskTrueBoolBoolDeny v)
        {
            return LocalCanInsert112(v);
        }

        public Authorized LocalCanInsert112(TaskTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskTrueBoolStringDeny v)
        {
            return LocalCanInsert113(v);
        }

        public Authorized LocalCanInsert113(TaskTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolTaskBoolDeny v)
        {
            return LocalCanInsert114(v);
        }

        public async Task<Authorized> LocalCanInsert114(TaskTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolTaskStringDeny v)
        {
            return LocalCanInsert115(v);
        }

        public async Task<Authorized> LocalCanInsert115(TaskTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskFalseBoolBoolDeny v)
        {
            return LocalCanCreate116(v);
        }

        public Authorized LocalCanCreate116(TaskFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(TaskFalseBoolStringDeny v)
        {
            return LocalCanCreate117(v);
        }

        public Authorized LocalCanCreate117(TaskFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolTaskBoolDeny v)
        {
            return LocalCanCreate118(v);
        }

        public async Task<Authorized> LocalCanCreate118(TaskFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolTaskStringDeny v)
        {
            return LocalCanCreate119(v);
        }

        public async Task<Authorized> LocalCanCreate119(TaskFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskFalseBoolBoolDeny v)
        {
            return LocalCanInsert116(v);
        }

        public Authorized LocalCanInsert116(TaskFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(TaskFalseBoolStringDeny v)
        {
            return LocalCanInsert117(v);
        }

        public Authorized LocalCanInsert117(TaskFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolTaskBoolDeny v)
        {
            return LocalCanInsert118(v);
        }

        public async Task<Authorized> LocalCanInsert118(TaskFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolTaskStringDeny v)
        {
            return LocalCanInsert119(v);
        }

        public async Task<Authorized> LocalCanInsert119(TaskFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(VoidBoolRemoteDeny v)
        {
            return CanCreate120Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate120(VoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate120Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate120(VoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(VoidStringRemoteDeny v)
        {
            return CanCreate121Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate121(VoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate121Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate121(VoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(VoidTaskBoolRemoteDeny v)
        {
            return CanCreate122Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate122(VoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate122Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate122(VoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(VoidTaskStringRemoteDeny v)
        {
            return CanCreate123Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate123(VoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate123Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate123(VoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(VoidBoolRemoteDeny v)
        {
            return CanInsert120Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert120(VoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert120Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert120(VoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(VoidStringRemoteDeny v)
        {
            return CanInsert121Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert121(VoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert121Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert121(VoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(VoidTaskBoolRemoteDeny v)
        {
            return CanInsert122Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert122(VoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert122Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert122(VoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(VoidTaskStringRemoteDeny v)
        {
            return CanInsert123Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert123(VoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert123Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert123(VoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TrueBoolBoolRemoteDeny v)
        {
            return CanCreate124Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate124(TrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate124Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate124(TrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TrueBoolStringRemoteDeny v)
        {
            return CanCreate125Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate125(TrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate125Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate125(TrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TrueBoolTaskBoolRemoteDeny v)
        {
            return CanCreate126Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate126(TrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate126Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate126(TrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TrueBoolTaskStringRemoteDeny v)
        {
            return CanCreate127Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate127(TrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate127Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate127(TrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TrueBoolBoolRemoteDeny v)
        {
            return CanInsert124Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert124(TrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert124Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert124(TrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TrueBoolStringRemoteDeny v)
        {
            return CanInsert125Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert125(TrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert125Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert125(TrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TrueBoolTaskBoolRemoteDeny v)
        {
            return CanInsert126Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert126(TrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert126Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert126(TrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TrueBoolTaskStringRemoteDeny v)
        {
            return CanInsert127Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert127(TrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert127Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert127(TrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(FalseBoolBoolRemoteDeny v)
        {
            return CanCreate128Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate128(FalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate128Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate128(FalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(FalseBoolStringRemoteDeny v)
        {
            return CanCreate129Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate129(FalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate129Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate129(FalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(FalseBoolTaskBoolRemoteDeny v)
        {
            return CanCreate130Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate130(FalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate130Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate130(FalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(FalseBoolTaskStringRemoteDeny v)
        {
            return CanCreate131Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate131(FalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate131Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate131(FalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(FalseBoolBoolRemoteDeny v)
        {
            return CanInsert128Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert128(FalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert128Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert128(FalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(FalseBoolStringRemoteDeny v)
        {
            return CanInsert129Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert129(FalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert129Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert129(FalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(FalseBoolTaskBoolRemoteDeny v)
        {
            return CanInsert130Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert130(FalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert130Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert130(FalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(FalseBoolTaskStringRemoteDeny v)
        {
            return CanInsert131Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert131(FalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert131Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert131(FalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskVoidBoolRemoteDeny v)
        {
            return CanCreate132Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate132(TaskVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate132Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate132(TaskVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskVoidStringRemoteDeny v)
        {
            return CanCreate133Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate133(TaskVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate133Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate133(TaskVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskVoidTaskBoolRemoteDeny v)
        {
            return CanCreate134Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate134(TaskVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate134Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate134(TaskVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskVoidTaskStringRemoteDeny v)
        {
            return CanCreate135Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate135(TaskVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate135Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate135(TaskVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskVoidBoolRemoteDeny v)
        {
            return CanInsert132Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert132(TaskVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert132Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert132(TaskVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskVoidStringRemoteDeny v)
        {
            return CanInsert133Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert133(TaskVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert133Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert133(TaskVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskVoidTaskBoolRemoteDeny v)
        {
            return CanInsert134Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert134(TaskVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert134Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert134(TaskVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskVoidTaskStringRemoteDeny v)
        {
            return CanInsert135Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert135(TaskVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert135Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert135(TaskVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolBoolRemoteDeny v)
        {
            return CanCreate136Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate136(TaskTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate136Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate136(TaskTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolStringRemoteDeny v)
        {
            return CanCreate137Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate137(TaskTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate137Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate137(TaskTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolTaskBoolRemoteDeny v)
        {
            return CanCreate138Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate138(TaskTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate138Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate138(TaskTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskTrueBoolTaskStringRemoteDeny v)
        {
            return CanCreate139Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate139(TaskTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate139Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate139(TaskTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolBoolRemoteDeny v)
        {
            return CanInsert136Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert136(TaskTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert136Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert136(TaskTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolStringRemoteDeny v)
        {
            return CanInsert137Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert137(TaskTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert137Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert137(TaskTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolTaskBoolRemoteDeny v)
        {
            return CanInsert138Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert138(TaskTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert138Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert138(TaskTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskTrueBoolTaskStringRemoteDeny v)
        {
            return CanInsert139Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert139(TaskTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert139Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert139(TaskTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolBoolRemoteDeny v)
        {
            return CanCreate140Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate140(TaskFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate140Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate140(TaskFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolStringRemoteDeny v)
        {
            return CanCreate141Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate141(TaskFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate141Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate141(TaskFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolTaskBoolRemoteDeny v)
        {
            return CanCreate142Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate142(TaskFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate142Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate142(TaskFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(TaskFalseBoolTaskStringRemoteDeny v)
        {
            return CanCreate143Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate143(TaskFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate143Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate143(TaskFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolBoolRemoteDeny v)
        {
            return CanInsert140Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert140(TaskFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert140Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert140(TaskFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolStringRemoteDeny v)
        {
            return CanInsert141Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert141(TaskFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert141Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert141(TaskFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolTaskBoolRemoteDeny v)
        {
            return CanInsert142Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert142(TaskFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert142Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert142(TaskFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(TaskFalseBoolTaskStringRemoteDeny v)
        {
            return CanInsert143Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert143(TaskFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert143Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert143(TaskFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteVoidBoolDeny v)
        {
            return LocalCanCreate144(v);
        }

        public Authorized LocalCanCreate144(RemoteVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteVoidStringDeny v)
        {
            return LocalCanCreate145(v);
        }

        public Authorized LocalCanCreate145(RemoteVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidTaskBoolDeny v)
        {
            return LocalCanCreate146(v);
        }

        public async Task<Authorized> LocalCanCreate146(RemoteVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidTaskStringDeny v)
        {
            return LocalCanCreate147(v);
        }

        public async Task<Authorized> LocalCanCreate147(RemoteVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteVoidBoolDeny v)
        {
            return LocalCanInsert144(v);
        }

        public Authorized LocalCanInsert144(RemoteVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteVoidStringDeny v)
        {
            return LocalCanInsert145(v);
        }

        public Authorized LocalCanInsert145(RemoteVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidTaskBoolDeny v)
        {
            return LocalCanInsert146(v);
        }

        public async Task<Authorized> LocalCanInsert146(RemoteVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidTaskStringDeny v)
        {
            return LocalCanInsert147(v);
        }

        public async Task<Authorized> LocalCanInsert147(RemoteVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTrueBoolBoolDeny v)
        {
            return LocalCanCreate148(v);
        }

        public Authorized LocalCanCreate148(RemoteTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTrueBoolStringDeny v)
        {
            return LocalCanCreate149(v);
        }

        public Authorized LocalCanCreate149(RemoteTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolTaskBoolDeny v)
        {
            return LocalCanCreate150(v);
        }

        public async Task<Authorized> LocalCanCreate150(RemoteTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolTaskStringDeny v)
        {
            return LocalCanCreate151(v);
        }

        public async Task<Authorized> LocalCanCreate151(RemoteTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTrueBoolBoolDeny v)
        {
            return LocalCanInsert148(v);
        }

        public Authorized LocalCanInsert148(RemoteTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTrueBoolStringDeny v)
        {
            return LocalCanInsert149(v);
        }

        public Authorized LocalCanInsert149(RemoteTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolTaskBoolDeny v)
        {
            return LocalCanInsert150(v);
        }

        public async Task<Authorized> LocalCanInsert150(RemoteTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolTaskStringDeny v)
        {
            return LocalCanInsert151(v);
        }

        public async Task<Authorized> LocalCanInsert151(RemoteTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteFalseBoolBoolDeny v)
        {
            return LocalCanCreate152(v);
        }

        public Authorized LocalCanCreate152(RemoteFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteFalseBoolStringDeny v)
        {
            return LocalCanCreate153(v);
        }

        public Authorized LocalCanCreate153(RemoteFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolTaskBoolDeny v)
        {
            return LocalCanCreate154(v);
        }

        public async Task<Authorized> LocalCanCreate154(RemoteFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolTaskStringDeny v)
        {
            return LocalCanCreate155(v);
        }

        public async Task<Authorized> LocalCanCreate155(RemoteFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteFalseBoolBoolDeny v)
        {
            return LocalCanInsert152(v);
        }

        public Authorized LocalCanInsert152(RemoteFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteFalseBoolStringDeny v)
        {
            return LocalCanInsert153(v);
        }

        public Authorized LocalCanInsert153(RemoteFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolTaskBoolDeny v)
        {
            return LocalCanInsert154(v);
        }

        public async Task<Authorized> LocalCanInsert154(RemoteFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolTaskStringDeny v)
        {
            return LocalCanInsert155(v);
        }

        public async Task<Authorized> LocalCanInsert155(RemoteFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskVoidBoolDeny v)
        {
            return LocalCanCreate156(v);
        }

        public Authorized LocalCanCreate156(RemoteTaskVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskVoidStringDeny v)
        {
            return LocalCanCreate157(v);
        }

        public Authorized LocalCanCreate157(RemoteTaskVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidTaskBoolDeny v)
        {
            return LocalCanCreate158(v);
        }

        public async Task<Authorized> LocalCanCreate158(RemoteTaskVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidTaskStringDeny v)
        {
            return LocalCanCreate159(v);
        }

        public async Task<Authorized> LocalCanCreate159(RemoteTaskVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskVoidBoolDeny v)
        {
            return LocalCanInsert156(v);
        }

        public Authorized LocalCanInsert156(RemoteTaskVoidBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskVoidStringDeny v)
        {
            return LocalCanInsert157(v);
        }

        public Authorized LocalCanInsert157(RemoteTaskVoidStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidTaskBoolDeny v)
        {
            return LocalCanInsert158(v);
        }

        public async Task<Authorized> LocalCanInsert158(RemoteTaskVoidTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidTaskStringDeny v)
        {
            return LocalCanInsert159(v);
        }

        public async Task<Authorized> LocalCanInsert159(RemoteTaskVoidTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskTrueBoolBoolDeny v)
        {
            return LocalCanCreate160(v);
        }

        public Authorized LocalCanCreate160(RemoteTaskTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskTrueBoolStringDeny v)
        {
            return LocalCanCreate161(v);
        }

        public Authorized LocalCanCreate161(RemoteTaskTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskBoolDeny v)
        {
            return LocalCanCreate162(v);
        }

        public async Task<Authorized> LocalCanCreate162(RemoteTaskTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskStringDeny v)
        {
            return LocalCanCreate163(v);
        }

        public async Task<Authorized> LocalCanCreate163(RemoteTaskTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskTrueBoolBoolDeny v)
        {
            return LocalCanInsert160(v);
        }

        public Authorized LocalCanInsert160(RemoteTaskTrueBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskTrueBoolStringDeny v)
        {
            return LocalCanInsert161(v);
        }

        public Authorized LocalCanInsert161(RemoteTaskTrueBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskBoolDeny v)
        {
            return LocalCanInsert162(v);
        }

        public async Task<Authorized> LocalCanInsert162(RemoteTaskTrueBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskStringDeny v)
        {
            return LocalCanInsert163(v);
        }

        public async Task<Authorized> LocalCanInsert163(RemoteTaskTrueBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskFalseBoolBoolDeny v)
        {
            return LocalCanCreate164(v);
        }

        public Authorized LocalCanCreate164(RemoteTaskFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanCreate(RemoteTaskFalseBoolStringDeny v)
        {
            return LocalCanCreate165(v);
        }

        public Authorized LocalCanCreate165(RemoteTaskFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskBoolDeny v)
        {
            return LocalCanCreate166(v);
        }

        public async Task<Authorized> LocalCanCreate166(RemoteTaskFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskStringDeny v)
        {
            return LocalCanCreate167(v);
        }

        public async Task<Authorized> LocalCanCreate167(RemoteTaskFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskFalseBoolBoolDeny v)
        {
            return LocalCanInsert164(v);
        }

        public Authorized LocalCanInsert164(RemoteTaskFalseBoolBoolDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert(RemoteTaskFalseBoolStringDeny v)
        {
            return LocalCanInsert165(v);
        }

        public Authorized LocalCanInsert165(RemoteTaskFalseBoolStringDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskBoolDeny v)
        {
            return LocalCanInsert166(v);
        }

        public async Task<Authorized> LocalCanInsert166(RemoteTaskFalseBoolTaskBoolDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskStringDeny v)
        {
            return LocalCanInsert167(v);
        }

        public async Task<Authorized> LocalCanInsert167(RemoteTaskFalseBoolTaskStringDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidBoolRemoteDeny v)
        {
            return CanCreate168Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate168(RemoteVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate168Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate168(RemoteVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidStringRemoteDeny v)
        {
            return CanCreate169Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate169(RemoteVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate169Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate169(RemoteVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidTaskBoolRemoteDeny v)
        {
            return CanCreate170Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate170(RemoteVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate170Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate170(RemoteVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteVoidTaskStringRemoteDeny v)
        {
            return CanCreate171Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate171(RemoteVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate171Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate171(RemoteVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidBoolRemoteDeny v)
        {
            return CanInsert168Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert168(RemoteVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert168Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert168(RemoteVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidStringRemoteDeny v)
        {
            return CanInsert169Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert169(RemoteVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert169Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert169(RemoteVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidTaskBoolRemoteDeny v)
        {
            return CanInsert170Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert170(RemoteVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert170Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert170(RemoteVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteVoidTaskStringRemoteDeny v)
        {
            return CanInsert171Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert171(RemoteVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert171Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert171(RemoteVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolBoolRemoteDeny v)
        {
            return CanCreate172Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate172(RemoteTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate172Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate172(RemoteTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolStringRemoteDeny v)
        {
            return CanCreate173Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate173(RemoteTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate173Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate173(RemoteTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            return CanCreate174Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate174(RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate174Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate174(RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTrueBoolTaskStringRemoteDeny v)
        {
            return CanCreate175Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate175(RemoteTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate175Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate175(RemoteTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolBoolRemoteDeny v)
        {
            return CanInsert172Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert172(RemoteTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert172Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert172(RemoteTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolStringRemoteDeny v)
        {
            return CanInsert173Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert173(RemoteTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert173Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert173(RemoteTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            return CanInsert174Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert174(RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert174Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert174(RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTrueBoolTaskStringRemoteDeny v)
        {
            return CanInsert175Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert175(RemoteTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert175Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert175(RemoteTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolBoolRemoteDeny v)
        {
            return CanCreate176Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate176(RemoteFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate176Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate176(RemoteFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolStringRemoteDeny v)
        {
            return CanCreate177Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate177(RemoteFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate177Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate177(RemoteFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            return CanCreate178Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate178(RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate178Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate178(RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteFalseBoolTaskStringRemoteDeny v)
        {
            return CanCreate179Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate179(RemoteFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate179Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate179(RemoteFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolBoolRemoteDeny v)
        {
            return CanInsert176Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert176(RemoteFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert176Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert176(RemoteFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolStringRemoteDeny v)
        {
            return CanInsert177Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert177(RemoteFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert177Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert177(RemoteFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            return CanInsert178Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert178(RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert178Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert178(RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteFalseBoolTaskStringRemoteDeny v)
        {
            return CanInsert179Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert179(RemoteFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert179Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert179(RemoteFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidBoolRemoteDeny v)
        {
            return CanCreate180Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate180(RemoteTaskVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate180Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate180(RemoteTaskVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidStringRemoteDeny v)
        {
            return CanCreate181Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate181(RemoteTaskVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate181Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate181(RemoteTaskVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            return CanCreate182Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate182(RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate182Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate182(RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskVoidTaskStringRemoteDeny v)
        {
            return CanCreate183Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate183(RemoteTaskVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate183Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate183(RemoteTaskVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidBoolRemoteDeny v)
        {
            return CanInsert180Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert180(RemoteTaskVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert180Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert180(RemoteTaskVoidBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidStringRemoteDeny v)
        {
            return CanInsert181Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert181(RemoteTaskVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert181Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert181(RemoteTaskVoidStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            return CanInsert182Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert182(RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert182Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert182(RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskVoidTaskStringRemoteDeny v)
        {
            return CanInsert183Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert183(RemoteTaskVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert183Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert183(RemoteTaskVoidTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            return CanCreate184Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate184(RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate184Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate184(RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolStringRemoteDeny v)
        {
            return CanCreate185Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate185(RemoteTaskTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate185Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate185(RemoteTaskTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            return CanCreate186Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate186(RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate186Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate186(RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            return CanCreate187Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate187(RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate187Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate187(RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            return CanInsert184Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert184(RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert184Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert184(RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolStringRemoteDeny v)
        {
            return CanInsert185Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert185(RemoteTaskTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert185Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert185(RemoteTaskTrueBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            return CanInsert186Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert186(RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert186Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert186(RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            return CanInsert187Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert187(RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert187Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert187(RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            return CanCreate188Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate188(RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate188Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate188(RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolStringRemoteDeny v)
        {
            return CanCreate189Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate189(RemoteTaskFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate189Delegate), [v]);
        }

        public Task<Authorized> LocalCanCreate189(RemoteTaskFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            return CanCreate190Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate190(RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate190Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate190(RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanCreate(RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            return CanCreate191Property(v);
        }

        public virtual async Task<Authorized> RemoteCanCreate191(RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanCreate191Delegate), [v]);
        }

        public async Task<Authorized> LocalCanCreate191(RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Read(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            return CanInsert188Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert188(RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert188Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert188(RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolStringRemoteDeny v)
        {
            return CanInsert189Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert189(RemoteTaskFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert189Delegate), [v]);
        }

        public Task<Authorized> LocalCanInsert189(RemoteTaskFalseBoolStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return Task.FromResult(authorized);
            }

            return Task.FromResult(new Authorized(true));
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            return CanInsert190Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert190(RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert190Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert190(RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Task<Authorized> CanInsert(RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            return CanInsert191Property(v);
        }

        public virtual async Task<Authorized> RemoteCanInsert191(RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized>(typeof(CanInsert191Delegate), [v]);
        }

        public async Task<Authorized> LocalCanInsert191(RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            Authorized authorized;
            authorized = await AuthorizationAllCombinations.Write(v);
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, VoidBool v)
        {
            var authorized = (LocalSave(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, VoidBool v)
        {
            return LocalSave(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave(IAuthorizedAllCombinations target, VoidBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, VoidString v)
        {
            var authorized = (LocalSave1(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, VoidString v)
        {
            return LocalSave1(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave1(IAuthorizedAllCombinations target, VoidString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert1(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskBool v)
        {
            var authorized = (await LocalSave2(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskBool v)
        {
            return LocalSave2(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave2(IAuthorizedAllCombinations target, VoidTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert2(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskString v)
        {
            var authorized = (await LocalSave3(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskString v)
        {
            return LocalSave3(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave3(IAuthorizedAllCombinations target, VoidTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert3(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, TrueBoolBool v)
        {
            var authorized = (LocalSave4(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, TrueBoolBool v)
        {
            return LocalSave4(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave4(IAuthorizedAllCombinations target, TrueBoolBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert4(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, TrueBoolString v)
        {
            var authorized = (LocalSave5(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, TrueBoolString v)
        {
            return LocalSave5(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave5(IAuthorizedAllCombinations target, TrueBoolString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert5(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskBool v)
        {
            var authorized = (await LocalSave6(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskBool v)
        {
            return LocalSave6(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave6(IAuthorizedAllCombinations target, TrueBoolTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert6(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskString v)
        {
            var authorized = (await LocalSave7(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskString v)
        {
            return LocalSave7(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave7(IAuthorizedAllCombinations target, TrueBoolTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert7(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, FalseBoolBool v)
        {
            var authorized = (LocalSave8(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, FalseBoolBool v)
        {
            return LocalSave8(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave8(IAuthorizedAllCombinations target, FalseBoolBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert8(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, FalseBoolString v)
        {
            var authorized = (LocalSave9(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, FalseBoolString v)
        {
            return LocalSave9(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave9(IAuthorizedAllCombinations target, FalseBoolString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert9(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskBool v)
        {
            var authorized = (await LocalSave10(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskBool v)
        {
            return LocalSave10(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave10(IAuthorizedAllCombinations target, FalseBoolTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert10(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskString v)
        {
            var authorized = (await LocalSave11(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskString v)
        {
            return LocalSave11(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave11(IAuthorizedAllCombinations target, FalseBoolTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert11(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidBool v)
        {
            var authorized = (await LocalSave12(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidBool v)
        {
            return LocalSave12(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave12(IAuthorizedAllCombinations target, TaskVoidBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert12(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidString v)
        {
            var authorized = (await LocalSave13(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidString v)
        {
            return LocalSave13(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave13(IAuthorizedAllCombinations target, TaskVoidString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert13(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskBool v)
        {
            var authorized = (await LocalSave14(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskBool v)
        {
            return LocalSave14(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave14(IAuthorizedAllCombinations target, TaskVoidTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert14(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskString v)
        {
            var authorized = (await LocalSave15(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskString v)
        {
            return LocalSave15(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave15(IAuthorizedAllCombinations target, TaskVoidTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert15(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolBool v)
        {
            var authorized = (await LocalSave16(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolBool v)
        {
            return LocalSave16(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave16(IAuthorizedAllCombinations target, TaskTrueBoolBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert16(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolString v)
        {
            var authorized = (await LocalSave17(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolString v)
        {
            return LocalSave17(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave17(IAuthorizedAllCombinations target, TaskTrueBoolString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert17(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskBool v)
        {
            var authorized = (await LocalSave18(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskBool v)
        {
            return LocalSave18(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave18(IAuthorizedAllCombinations target, TaskTrueBoolTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert18(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskString v)
        {
            var authorized = (await LocalSave19(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskString v)
        {
            return LocalSave19(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave19(IAuthorizedAllCombinations target, TaskTrueBoolTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert19(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolBool v)
        {
            var authorized = (await LocalSave20(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolBool v)
        {
            return LocalSave20(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave20(IAuthorizedAllCombinations target, TaskFalseBoolBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert20(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolString v)
        {
            var authorized = (await LocalSave21(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolString v)
        {
            return LocalSave21(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave21(IAuthorizedAllCombinations target, TaskFalseBoolString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert21(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskBool v)
        {
            var authorized = (await LocalSave22(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskBool v)
        {
            return LocalSave22(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave22(IAuthorizedAllCombinations target, TaskFalseBoolTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert22(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskString v)
        {
            var authorized = (await LocalSave23(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskString v)
        {
            return LocalSave23(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave23(IAuthorizedAllCombinations target, TaskFalseBoolTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert23(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidBoolRemote v)
        {
            var authorized = (await Save24Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidBoolRemote v)
        {
            return Save24Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave24(IAuthorizedAllCombinations target, VoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save24Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave24(IAuthorizedAllCombinations target, VoidBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert24(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidStringRemote v)
        {
            var authorized = (await Save25Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidStringRemote v)
        {
            return Save25Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave25(IAuthorizedAllCombinations target, VoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save25Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave25(IAuthorizedAllCombinations target, VoidStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert25(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskBoolRemote v)
        {
            var authorized = (await Save26Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskBoolRemote v)
        {
            return Save26Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave26(IAuthorizedAllCombinations target, VoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save26Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave26(IAuthorizedAllCombinations target, VoidTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert26(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskStringRemote v)
        {
            var authorized = (await Save27Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskStringRemote v)
        {
            return Save27Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave27(IAuthorizedAllCombinations target, VoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save27Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave27(IAuthorizedAllCombinations target, VoidTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert27(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolBoolRemote v)
        {
            var authorized = (await Save28Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolBoolRemote v)
        {
            return Save28Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave28(IAuthorizedAllCombinations target, TrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save28Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave28(IAuthorizedAllCombinations target, TrueBoolBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert28(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolStringRemote v)
        {
            var authorized = (await Save29Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolStringRemote v)
        {
            return Save29Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave29(IAuthorizedAllCombinations target, TrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save29Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave29(IAuthorizedAllCombinations target, TrueBoolStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert29(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemote v)
        {
            var authorized = (await Save30Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemote v)
        {
            return Save30Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave30(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save30Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave30(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert30(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskStringRemote v)
        {
            var authorized = (await Save31Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskStringRemote v)
        {
            return Save31Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave31(IAuthorizedAllCombinations target, TrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save31Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave31(IAuthorizedAllCombinations target, TrueBoolTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert31(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolBoolRemote v)
        {
            var authorized = (await Save32Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolBoolRemote v)
        {
            return Save32Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave32(IAuthorizedAllCombinations target, FalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save32Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave32(IAuthorizedAllCombinations target, FalseBoolBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert32(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolStringRemote v)
        {
            var authorized = (await Save33Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolStringRemote v)
        {
            return Save33Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave33(IAuthorizedAllCombinations target, FalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save33Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave33(IAuthorizedAllCombinations target, FalseBoolStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert33(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemote v)
        {
            var authorized = (await Save34Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemote v)
        {
            return Save34Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave34(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save34Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave34(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert34(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskStringRemote v)
        {
            var authorized = (await Save35Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskStringRemote v)
        {
            return Save35Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave35(IAuthorizedAllCombinations target, FalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save35Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave35(IAuthorizedAllCombinations target, FalseBoolTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert35(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidBoolRemote v)
        {
            var authorized = (await Save36Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidBoolRemote v)
        {
            return Save36Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave36(IAuthorizedAllCombinations target, TaskVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save36Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave36(IAuthorizedAllCombinations target, TaskVoidBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert36(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidStringRemote v)
        {
            var authorized = (await Save37Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidStringRemote v)
        {
            return Save37Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave37(IAuthorizedAllCombinations target, TaskVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save37Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave37(IAuthorizedAllCombinations target, TaskVoidStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert37(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemote v)
        {
            var authorized = (await Save38Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemote v)
        {
            return Save38Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave38(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save38Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave38(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert38(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskStringRemote v)
        {
            var authorized = (await Save39Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskStringRemote v)
        {
            return Save39Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave39(IAuthorizedAllCombinations target, TaskVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save39Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave39(IAuthorizedAllCombinations target, TaskVoidTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert39(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemote v)
        {
            var authorized = (await Save40Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemote v)
        {
            return Save40Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave40(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save40Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave40(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert40(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolStringRemote v)
        {
            var authorized = (await Save41Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolStringRemote v)
        {
            return Save41Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave41(IAuthorizedAllCombinations target, TaskTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save41Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave41(IAuthorizedAllCombinations target, TaskTrueBoolStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert41(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemote v)
        {
            var authorized = (await Save42Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemote v)
        {
            return Save42Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave42(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save42Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave42(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert42(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemote v)
        {
            var authorized = (await Save43Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemote v)
        {
            return Save43Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave43(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save43Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave43(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert43(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemote v)
        {
            var authorized = (await Save44Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemote v)
        {
            return Save44Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave44(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save44Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave44(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert44(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolStringRemote v)
        {
            var authorized = (await Save45Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolStringRemote v)
        {
            return Save45Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave45(IAuthorizedAllCombinations target, TaskFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save45Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave45(IAuthorizedAllCombinations target, TaskFalseBoolStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert45(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemote v)
        {
            var authorized = (await Save46Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemote v)
        {
            return Save46Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave46(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save46Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave46(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert46(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemote v)
        {
            var authorized = (await Save47Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemote v)
        {
            return Save47Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave47(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save47Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave47(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert47(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidBool v)
        {
            var authorized = (await Save48Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidBool v)
        {
            return Save48Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave48(IAuthorizedAllCombinations target, RemoteVoidBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save48Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave48(IAuthorizedAllCombinations target, RemoteVoidBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert48(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidString v)
        {
            var authorized = (await Save49Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidString v)
        {
            return Save49Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave49(IAuthorizedAllCombinations target, RemoteVoidString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save49Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave49(IAuthorizedAllCombinations target, RemoteVoidString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert49(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskBool v)
        {
            var authorized = (await Save50Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskBool v)
        {
            return Save50Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave50(IAuthorizedAllCombinations target, RemoteVoidTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save50Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave50(IAuthorizedAllCombinations target, RemoteVoidTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert50(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskString v)
        {
            var authorized = (await Save51Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskString v)
        {
            return Save51Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave51(IAuthorizedAllCombinations target, RemoteVoidTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save51Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave51(IAuthorizedAllCombinations target, RemoteVoidTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert51(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolBool v)
        {
            var authorized = (await Save52Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolBool v)
        {
            return Save52Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave52(IAuthorizedAllCombinations target, RemoteTrueBoolBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save52Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave52(IAuthorizedAllCombinations target, RemoteTrueBoolBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert52(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolString v)
        {
            var authorized = (await Save53Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolString v)
        {
            return Save53Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave53(IAuthorizedAllCombinations target, RemoteTrueBoolString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save53Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave53(IAuthorizedAllCombinations target, RemoteTrueBoolString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert53(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBool v)
        {
            var authorized = (await Save54Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBool v)
        {
            return Save54Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave54(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save54Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave54(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert54(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskString v)
        {
            var authorized = (await Save55Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskString v)
        {
            return Save55Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave55(IAuthorizedAllCombinations target, RemoteTrueBoolTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save55Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave55(IAuthorizedAllCombinations target, RemoteTrueBoolTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert55(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolBool v)
        {
            var authorized = (await Save56Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolBool v)
        {
            return Save56Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave56(IAuthorizedAllCombinations target, RemoteFalseBoolBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save56Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave56(IAuthorizedAllCombinations target, RemoteFalseBoolBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert56(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolString v)
        {
            var authorized = (await Save57Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolString v)
        {
            return Save57Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave57(IAuthorizedAllCombinations target, RemoteFalseBoolString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save57Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave57(IAuthorizedAllCombinations target, RemoteFalseBoolString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert57(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBool v)
        {
            var authorized = (await Save58Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBool v)
        {
            return Save58Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave58(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save58Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave58(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert58(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskString v)
        {
            var authorized = (await Save59Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskString v)
        {
            return Save59Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave59(IAuthorizedAllCombinations target, RemoteFalseBoolTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save59Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave59(IAuthorizedAllCombinations target, RemoteFalseBoolTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert59(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidBool v)
        {
            var authorized = (await Save60Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidBool v)
        {
            return Save60Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave60(IAuthorizedAllCombinations target, RemoteTaskVoidBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save60Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave60(IAuthorizedAllCombinations target, RemoteTaskVoidBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert60(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidString v)
        {
            var authorized = (await Save61Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidString v)
        {
            return Save61Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave61(IAuthorizedAllCombinations target, RemoteTaskVoidString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save61Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave61(IAuthorizedAllCombinations target, RemoteTaskVoidString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert61(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBool v)
        {
            var authorized = (await Save62Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBool v)
        {
            return Save62Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave62(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save62Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave62(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert62(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskString v)
        {
            var authorized = (await Save63Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskString v)
        {
            return Save63Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave63(IAuthorizedAllCombinations target, RemoteTaskVoidTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save63Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave63(IAuthorizedAllCombinations target, RemoteTaskVoidTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert63(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBool v)
        {
            var authorized = (await Save64Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBool v)
        {
            return Save64Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave64(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save64Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave64(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert64(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolString v)
        {
            var authorized = (await Save65Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolString v)
        {
            return Save65Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave65(IAuthorizedAllCombinations target, RemoteTaskTrueBoolString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save65Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave65(IAuthorizedAllCombinations target, RemoteTaskTrueBoolString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert65(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBool v)
        {
            var authorized = (await Save66Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBool v)
        {
            return Save66Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave66(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save66Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave66(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert66(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskString v)
        {
            var authorized = (await Save67Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskString v)
        {
            return Save67Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave67(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save67Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave67(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert67(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBool v)
        {
            var authorized = (await Save68Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBool v)
        {
            return Save68Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave68(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save68Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave68(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert68(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolString v)
        {
            var authorized = (await Save69Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolString v)
        {
            return Save69Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave69(IAuthorizedAllCombinations target, RemoteTaskFalseBoolString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save69Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave69(IAuthorizedAllCombinations target, RemoteTaskFalseBoolString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert69(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBool v)
        {
            var authorized = (await Save70Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBool v)
        {
            return Save70Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave70(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBool v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save70Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave70(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBool v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert70(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskString v)
        {
            var authorized = (await Save71Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskString v)
        {
            return Save71Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave71(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskString v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save71Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave71(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskString v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert71(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidBoolRemote v)
        {
            var authorized = (await Save72Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidBoolRemote v)
        {
            return Save72Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave72(IAuthorizedAllCombinations target, RemoteVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save72Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave72(IAuthorizedAllCombinations target, RemoteVoidBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert72(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidStringRemote v)
        {
            var authorized = (await Save73Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidStringRemote v)
        {
            return Save73Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave73(IAuthorizedAllCombinations target, RemoteVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save73Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave73(IAuthorizedAllCombinations target, RemoteVoidStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert73(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemote v)
        {
            var authorized = (await Save74Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemote v)
        {
            return Save74Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave74(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save74Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave74(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert74(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemote v)
        {
            var authorized = (await Save75Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemote v)
        {
            return Save75Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave75(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save75Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave75(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert75(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemote v)
        {
            var authorized = (await Save76Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemote v)
        {
            return Save76Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave76(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save76Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave76(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert76(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemote v)
        {
            var authorized = (await Save77Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemote v)
        {
            return Save77Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave77(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save77Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave77(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert77(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemote v)
        {
            var authorized = (await Save78Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemote v)
        {
            return Save78Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave78(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save78Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave78(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert78(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemote v)
        {
            var authorized = (await Save79Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemote v)
        {
            return Save79Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave79(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save79Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave79(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert79(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemote v)
        {
            var authorized = (await Save80Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemote v)
        {
            return Save80Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave80(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save80Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave80(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert80(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemote v)
        {
            var authorized = (await Save81Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemote v)
        {
            return Save81Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave81(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save81Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave81(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert81(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemote v)
        {
            var authorized = (await Save82Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemote v)
        {
            return Save82Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave82(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save82Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave82(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert82(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemote v)
        {
            var authorized = (await Save83Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemote v)
        {
            return Save83Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave83(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save83Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave83(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert83(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemote v)
        {
            var authorized = (await Save84Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemote v)
        {
            return Save84Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave84(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save84Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave84(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert84(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemote v)
        {
            var authorized = (await Save85Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemote v)
        {
            return Save85Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave85(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save85Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave85(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert85(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemote v)
        {
            var authorized = (await Save86Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemote v)
        {
            return Save86Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave86(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save86Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave86(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert86(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemote v)
        {
            var authorized = (await Save87Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemote v)
        {
            return Save87Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave87(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save87Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave87(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert87(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemote v)
        {
            var authorized = (await Save88Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemote v)
        {
            return Save88Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave88(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save88Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave88(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert88(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemote v)
        {
            var authorized = (await Save89Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemote v)
        {
            return Save89Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave89(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save89Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave89(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert89(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemote v)
        {
            var authorized = (await Save90Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemote v)
        {
            return Save90Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave90(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save90Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave90(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert90(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemote v)
        {
            var authorized = (await Save91Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemote v)
        {
            return Save91Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave91(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save91Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave91(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert91(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemote v)
        {
            var authorized = (await Save92Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemote v)
        {
            return Save92Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave92(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save92Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave92(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert92(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemote v)
        {
            var authorized = (await Save93Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemote v)
        {
            return Save93Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave93(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save93Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave93(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert93(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemote v)
        {
            var authorized = (await Save94Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemote v)
        {
            return Save94Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave94(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save94Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave94(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert94(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemote v)
        {
            var authorized = (await Save95Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemote v)
        {
            return Save95Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave95(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemote v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save95Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave95(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemote v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert95(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, VoidBoolDeny v)
        {
            var authorized = (LocalSave96(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, VoidBoolDeny v)
        {
            return LocalSave96(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave96(IAuthorizedAllCombinations target, VoidBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert96(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, VoidStringDeny v)
        {
            var authorized = (LocalSave97(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, VoidStringDeny v)
        {
            return LocalSave97(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave97(IAuthorizedAllCombinations target, VoidStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert97(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskBoolDeny v)
        {
            var authorized = (await LocalSave98(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskBoolDeny v)
        {
            return LocalSave98(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave98(IAuthorizedAllCombinations target, VoidTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert98(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskStringDeny v)
        {
            var authorized = (await LocalSave99(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskStringDeny v)
        {
            return LocalSave99(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave99(IAuthorizedAllCombinations target, VoidTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert99(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, TrueBoolBoolDeny v)
        {
            var authorized = (LocalSave100(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, TrueBoolBoolDeny v)
        {
            return LocalSave100(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave100(IAuthorizedAllCombinations target, TrueBoolBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert100(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, TrueBoolStringDeny v)
        {
            var authorized = (LocalSave101(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, TrueBoolStringDeny v)
        {
            return LocalSave101(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave101(IAuthorizedAllCombinations target, TrueBoolStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert101(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskBoolDeny v)
        {
            var authorized = (await LocalSave102(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskBoolDeny v)
        {
            return LocalSave102(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave102(IAuthorizedAllCombinations target, TrueBoolTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert102(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskStringDeny v)
        {
            var authorized = (await LocalSave103(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskStringDeny v)
        {
            return LocalSave103(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave103(IAuthorizedAllCombinations target, TrueBoolTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert103(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, FalseBoolBoolDeny v)
        {
            var authorized = (LocalSave104(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, FalseBoolBoolDeny v)
        {
            return LocalSave104(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave104(IAuthorizedAllCombinations target, FalseBoolBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert104(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual IAuthorizedAllCombinations? Save(IAuthorizedAllCombinations target, FalseBoolStringDeny v)
        {
            var authorized = (LocalSave105(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Authorized<IAuthorizedAllCombinations> TrySave(IAuthorizedAllCombinations target, FalseBoolStringDeny v)
        {
            return LocalSave105(target, v);
        }

        public virtual Authorized<IAuthorizedAllCombinations> LocalSave105(IAuthorizedAllCombinations target, FalseBoolStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert105(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskBoolDeny v)
        {
            var authorized = (await LocalSave106(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskBoolDeny v)
        {
            return LocalSave106(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave106(IAuthorizedAllCombinations target, FalseBoolTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert106(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskStringDeny v)
        {
            var authorized = (await LocalSave107(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskStringDeny v)
        {
            return LocalSave107(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave107(IAuthorizedAllCombinations target, FalseBoolTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert107(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidBoolDeny v)
        {
            var authorized = (await LocalSave108(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidBoolDeny v)
        {
            return LocalSave108(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave108(IAuthorizedAllCombinations target, TaskVoidBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert108(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidStringDeny v)
        {
            var authorized = (await LocalSave109(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidStringDeny v)
        {
            return LocalSave109(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave109(IAuthorizedAllCombinations target, TaskVoidStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert109(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskBoolDeny v)
        {
            var authorized = (await LocalSave110(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskBoolDeny v)
        {
            return LocalSave110(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave110(IAuthorizedAllCombinations target, TaskVoidTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert110(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskStringDeny v)
        {
            var authorized = (await LocalSave111(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskStringDeny v)
        {
            return LocalSave111(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave111(IAuthorizedAllCombinations target, TaskVoidTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert111(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolBoolDeny v)
        {
            var authorized = (await LocalSave112(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolBoolDeny v)
        {
            return LocalSave112(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave112(IAuthorizedAllCombinations target, TaskTrueBoolBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert112(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolStringDeny v)
        {
            var authorized = (await LocalSave113(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolStringDeny v)
        {
            return LocalSave113(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave113(IAuthorizedAllCombinations target, TaskTrueBoolStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert113(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolDeny v)
        {
            var authorized = (await LocalSave114(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolDeny v)
        {
            return LocalSave114(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave114(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert114(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringDeny v)
        {
            var authorized = (await LocalSave115(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringDeny v)
        {
            return LocalSave115(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave115(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert115(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolBoolDeny v)
        {
            var authorized = (await LocalSave116(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolBoolDeny v)
        {
            return LocalSave116(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave116(IAuthorizedAllCombinations target, TaskFalseBoolBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert116(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolStringDeny v)
        {
            var authorized = (await LocalSave117(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolStringDeny v)
        {
            return LocalSave117(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave117(IAuthorizedAllCombinations target, TaskFalseBoolStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert117(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolDeny v)
        {
            var authorized = (await LocalSave118(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolDeny v)
        {
            return LocalSave118(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave118(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert118(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringDeny v)
        {
            var authorized = (await LocalSave119(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringDeny v)
        {
            return LocalSave119(target, v);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave119(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert119(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidBoolRemoteDeny v)
        {
            var authorized = (await Save120Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidBoolRemoteDeny v)
        {
            return Save120Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave120(IAuthorizedAllCombinations target, VoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save120Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave120(IAuthorizedAllCombinations target, VoidBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert120(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidStringRemoteDeny v)
        {
            var authorized = (await Save121Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidStringRemoteDeny v)
        {
            return Save121Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave121(IAuthorizedAllCombinations target, VoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save121Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave121(IAuthorizedAllCombinations target, VoidStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert121(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskBoolRemoteDeny v)
        {
            var authorized = (await Save122Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskBoolRemoteDeny v)
        {
            return Save122Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave122(IAuthorizedAllCombinations target, VoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save122Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave122(IAuthorizedAllCombinations target, VoidTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert122(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, VoidTaskStringRemoteDeny v)
        {
            var authorized = (await Save123Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, VoidTaskStringRemoteDeny v)
        {
            return Save123Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave123(IAuthorizedAllCombinations target, VoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save123Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave123(IAuthorizedAllCombinations target, VoidTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert123(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolBoolRemoteDeny v)
        {
            var authorized = (await Save124Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolBoolRemoteDeny v)
        {
            return Save124Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave124(IAuthorizedAllCombinations target, TrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save124Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave124(IAuthorizedAllCombinations target, TrueBoolBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert124(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolStringRemoteDeny v)
        {
            var authorized = (await Save125Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolStringRemoteDeny v)
        {
            return Save125Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave125(IAuthorizedAllCombinations target, TrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save125Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave125(IAuthorizedAllCombinations target, TrueBoolStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert125(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemoteDeny v)
        {
            var authorized = (await Save126Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemoteDeny v)
        {
            return Save126Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave126(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save126Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave126(IAuthorizedAllCombinations target, TrueBoolTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert126(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TrueBoolTaskStringRemoteDeny v)
        {
            var authorized = (await Save127Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TrueBoolTaskStringRemoteDeny v)
        {
            return Save127Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave127(IAuthorizedAllCombinations target, TrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save127Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave127(IAuthorizedAllCombinations target, TrueBoolTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert127(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolBoolRemoteDeny v)
        {
            var authorized = (await Save128Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolBoolRemoteDeny v)
        {
            return Save128Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave128(IAuthorizedAllCombinations target, FalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save128Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave128(IAuthorizedAllCombinations target, FalseBoolBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert128(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolStringRemoteDeny v)
        {
            var authorized = (await Save129Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolStringRemoteDeny v)
        {
            return Save129Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave129(IAuthorizedAllCombinations target, FalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save129Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave129(IAuthorizedAllCombinations target, FalseBoolStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert129(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemoteDeny v)
        {
            var authorized = (await Save130Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemoteDeny v)
        {
            return Save130Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave130(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save130Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave130(IAuthorizedAllCombinations target, FalseBoolTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert130(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, FalseBoolTaskStringRemoteDeny v)
        {
            var authorized = (await Save131Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, FalseBoolTaskStringRemoteDeny v)
        {
            return Save131Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave131(IAuthorizedAllCombinations target, FalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save131Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave131(IAuthorizedAllCombinations target, FalseBoolTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert131(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidBoolRemoteDeny v)
        {
            var authorized = (await Save132Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidBoolRemoteDeny v)
        {
            return Save132Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave132(IAuthorizedAllCombinations target, TaskVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save132Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave132(IAuthorizedAllCombinations target, TaskVoidBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert132(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidStringRemoteDeny v)
        {
            var authorized = (await Save133Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidStringRemoteDeny v)
        {
            return Save133Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave133(IAuthorizedAllCombinations target, TaskVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save133Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave133(IAuthorizedAllCombinations target, TaskVoidStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert133(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemoteDeny v)
        {
            var authorized = (await Save134Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemoteDeny v)
        {
            return Save134Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave134(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save134Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave134(IAuthorizedAllCombinations target, TaskVoidTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert134(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskVoidTaskStringRemoteDeny v)
        {
            var authorized = (await Save135Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskVoidTaskStringRemoteDeny v)
        {
            return Save135Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave135(IAuthorizedAllCombinations target, TaskVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save135Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave135(IAuthorizedAllCombinations target, TaskVoidTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert135(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemoteDeny v)
        {
            var authorized = (await Save136Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemoteDeny v)
        {
            return Save136Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave136(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save136Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave136(IAuthorizedAllCombinations target, TaskTrueBoolBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert136(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolStringRemoteDeny v)
        {
            var authorized = (await Save137Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolStringRemoteDeny v)
        {
            return Save137Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave137(IAuthorizedAllCombinations target, TaskTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save137Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave137(IAuthorizedAllCombinations target, TaskTrueBoolStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert137(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemoteDeny v)
        {
            var authorized = (await Save138Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemoteDeny v)
        {
            return Save138Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave138(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save138Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave138(IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert138(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemoteDeny v)
        {
            var authorized = (await Save139Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemoteDeny v)
        {
            return Save139Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave139(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save139Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave139(IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert139(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemoteDeny v)
        {
            var authorized = (await Save140Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemoteDeny v)
        {
            return Save140Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave140(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save140Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave140(IAuthorizedAllCombinations target, TaskFalseBoolBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert140(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolStringRemoteDeny v)
        {
            var authorized = (await Save141Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolStringRemoteDeny v)
        {
            return Save141Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave141(IAuthorizedAllCombinations target, TaskFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save141Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave141(IAuthorizedAllCombinations target, TaskFalseBoolStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert141(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemoteDeny v)
        {
            var authorized = (await Save142Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemoteDeny v)
        {
            return Save142Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave142(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save142Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave142(IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert142(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemoteDeny v)
        {
            var authorized = (await Save143Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemoteDeny v)
        {
            return Save143Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave143(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save143Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave143(IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert143(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidBoolDeny v)
        {
            var authorized = (await Save144Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidBoolDeny v)
        {
            return Save144Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave144(IAuthorizedAllCombinations target, RemoteVoidBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save144Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave144(IAuthorizedAllCombinations target, RemoteVoidBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert144(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidStringDeny v)
        {
            var authorized = (await Save145Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidStringDeny v)
        {
            return Save145Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave145(IAuthorizedAllCombinations target, RemoteVoidStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save145Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave145(IAuthorizedAllCombinations target, RemoteVoidStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert145(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskBoolDeny v)
        {
            var authorized = (await Save146Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskBoolDeny v)
        {
            return Save146Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave146(IAuthorizedAllCombinations target, RemoteVoidTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save146Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave146(IAuthorizedAllCombinations target, RemoteVoidTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert146(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskStringDeny v)
        {
            var authorized = (await Save147Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskStringDeny v)
        {
            return Save147Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave147(IAuthorizedAllCombinations target, RemoteVoidTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save147Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave147(IAuthorizedAllCombinations target, RemoteVoidTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert147(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolBoolDeny v)
        {
            var authorized = (await Save148Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolBoolDeny v)
        {
            return Save148Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave148(IAuthorizedAllCombinations target, RemoteTrueBoolBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save148Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave148(IAuthorizedAllCombinations target, RemoteTrueBoolBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert148(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolStringDeny v)
        {
            var authorized = (await Save149Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolStringDeny v)
        {
            return Save149Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave149(IAuthorizedAllCombinations target, RemoteTrueBoolStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save149Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave149(IAuthorizedAllCombinations target, RemoteTrueBoolStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert149(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolDeny v)
        {
            var authorized = (await Save150Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolDeny v)
        {
            return Save150Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave150(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save150Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave150(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert150(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringDeny v)
        {
            var authorized = (await Save151Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringDeny v)
        {
            return Save151Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave151(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save151Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave151(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert151(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolBoolDeny v)
        {
            var authorized = (await Save152Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolBoolDeny v)
        {
            return Save152Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave152(IAuthorizedAllCombinations target, RemoteFalseBoolBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save152Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave152(IAuthorizedAllCombinations target, RemoteFalseBoolBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert152(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolStringDeny v)
        {
            var authorized = (await Save153Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolStringDeny v)
        {
            return Save153Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave153(IAuthorizedAllCombinations target, RemoteFalseBoolStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save153Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave153(IAuthorizedAllCombinations target, RemoteFalseBoolStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert153(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolDeny v)
        {
            var authorized = (await Save154Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolDeny v)
        {
            return Save154Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave154(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save154Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave154(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert154(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringDeny v)
        {
            var authorized = (await Save155Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringDeny v)
        {
            return Save155Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave155(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save155Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave155(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert155(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidBoolDeny v)
        {
            var authorized = (await Save156Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidBoolDeny v)
        {
            return Save156Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave156(IAuthorizedAllCombinations target, RemoteTaskVoidBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save156Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave156(IAuthorizedAllCombinations target, RemoteTaskVoidBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert156(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidStringDeny v)
        {
            var authorized = (await Save157Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidStringDeny v)
        {
            return Save157Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave157(IAuthorizedAllCombinations target, RemoteTaskVoidStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save157Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave157(IAuthorizedAllCombinations target, RemoteTaskVoidStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert157(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolDeny v)
        {
            var authorized = (await Save158Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolDeny v)
        {
            return Save158Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave158(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save158Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave158(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert158(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringDeny v)
        {
            var authorized = (await Save159Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringDeny v)
        {
            return Save159Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave159(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save159Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave159(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert159(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolDeny v)
        {
            var authorized = (await Save160Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolDeny v)
        {
            return Save160Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave160(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save160Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave160(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert160(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringDeny v)
        {
            var authorized = (await Save161Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringDeny v)
        {
            return Save161Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave161(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save161Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave161(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert161(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolDeny v)
        {
            var authorized = (await Save162Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolDeny v)
        {
            return Save162Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave162(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save162Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave162(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert162(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringDeny v)
        {
            var authorized = (await Save163Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringDeny v)
        {
            return Save163Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave163(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save163Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave163(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert163(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolDeny v)
        {
            var authorized = (await Save164Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolDeny v)
        {
            return Save164Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave164(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save164Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave164(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert164(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringDeny v)
        {
            var authorized = (await Save165Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringDeny v)
        {
            return Save165Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave165(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save165Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave165(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert165(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolDeny v)
        {
            var authorized = (await Save166Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolDeny v)
        {
            return Save166Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave166(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save166Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave166(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert166(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringDeny v)
        {
            var authorized = (await Save167Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringDeny v)
        {
            return Save167Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave167(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save167Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave167(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert167(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidBoolRemoteDeny v)
        {
            var authorized = (await Save168Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidBoolRemoteDeny v)
        {
            return Save168Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave168(IAuthorizedAllCombinations target, RemoteVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save168Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave168(IAuthorizedAllCombinations target, RemoteVoidBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert168(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidStringRemoteDeny v)
        {
            var authorized = (await Save169Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidStringRemoteDeny v)
        {
            return Save169Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave169(IAuthorizedAllCombinations target, RemoteVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save169Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave169(IAuthorizedAllCombinations target, RemoteVoidStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert169(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemoteDeny v)
        {
            var authorized = (await Save170Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemoteDeny v)
        {
            return Save170Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave170(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save170Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave170(IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert170(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemoteDeny v)
        {
            var authorized = (await Save171Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemoteDeny v)
        {
            return Save171Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave171(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save171Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave171(IAuthorizedAllCombinations target, RemoteVoidTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert171(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemoteDeny v)
        {
            var authorized = (await Save172Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemoteDeny v)
        {
            return Save172Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave172(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save172Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave172(IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert172(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemoteDeny v)
        {
            var authorized = (await Save173Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemoteDeny v)
        {
            return Save173Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave173(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save173Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave173(IAuthorizedAllCombinations target, RemoteTrueBoolStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert173(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            var authorized = (await Save174Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            return Save174Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave174(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save174Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave174(IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert174(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemoteDeny v)
        {
            var authorized = (await Save175Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemoteDeny v)
        {
            return Save175Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave175(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save175Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave175(IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert175(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemoteDeny v)
        {
            var authorized = (await Save176Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemoteDeny v)
        {
            return Save176Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave176(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save176Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave176(IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert176(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemoteDeny v)
        {
            var authorized = (await Save177Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemoteDeny v)
        {
            return Save177Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave177(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save177Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave177(IAuthorizedAllCombinations target, RemoteFalseBoolStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert177(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            var authorized = (await Save178Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            return Save178Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave178(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save178Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave178(IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert178(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemoteDeny v)
        {
            var authorized = (await Save179Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemoteDeny v)
        {
            return Save179Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave179(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save179Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave179(IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert179(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemoteDeny v)
        {
            var authorized = (await Save180Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemoteDeny v)
        {
            return Save180Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave180(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save180Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave180(IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert180(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemoteDeny v)
        {
            var authorized = (await Save181Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemoteDeny v)
        {
            return Save181Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave181(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save181Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave181(IAuthorizedAllCombinations target, RemoteTaskVoidStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert181(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            var authorized = (await Save182Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            return Save182Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave182(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save182Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave182(IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert182(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemoteDeny v)
        {
            var authorized = (await Save183Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemoteDeny v)
        {
            return Save183Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave183(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save183Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave183(IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert183(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            var authorized = (await Save184Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            return Save184Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave184(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save184Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave184(IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert184(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemoteDeny v)
        {
            var authorized = (await Save185Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemoteDeny v)
        {
            return Save185Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave185(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save185Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave185(IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert185(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            var authorized = (await Save186Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            return Save186Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave186(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save186Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave186(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert186(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            var authorized = (await Save187Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            return Save187Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave187(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save187Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave187(IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert187(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            var authorized = (await Save188Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            return Save188Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave188(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save188Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave188(IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert188(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemoteDeny v)
        {
            var authorized = (await Save189Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemoteDeny v)
        {
            return Save189Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave189(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save189Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave189(IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert189(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            var authorized = (await Save190Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            return Save190Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave190(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save190Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave190(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert190(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public virtual async Task<IAuthorizedAllCombinations?> Save(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            var authorized = (await Save191Property(target, v));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized.Message);
            }

            return authorized.Result;
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> TrySave(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            return Save191Property(target, v);
        }

        public virtual async Task<Authorized<IAuthorizedAllCombinations>> RemoteSave191(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            return await DoRemoteRequest.ForDelegate<Authorized<IAuthorizedAllCombinations>>(typeof(Save191Delegate), [target, v]);
        }

        public virtual Task<Authorized<IAuthorizedAllCombinations>> LocalSave191(IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemoteDeny v)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return null;
                }

                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return LocalInsert191(target, v);
            }
            else
            {
                throw new NotImplementedException();
            }
        }

        public static void FactoryServiceRegistrar(IServiceCollection services)
        {
            services.AddTransient<AuthorizedAllCombinations>();
            services.AddScoped<AuthorizedAllCombinationsFactory>();
            services.AddScoped<IAuthorizedAllCombinationsFactory, AuthorizedAllCombinationsFactory>();
            services.AddTransient<IAuthorizedAllCombinations, AuthorizedAllCombinations>();
            services.AddScoped<Create24Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidBoolRemote v) => factory.LocalCreate24(v);
            });
            services.AddScoped<Create25Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidStringRemote v) => factory.LocalCreate25(v);
            });
            services.AddScoped<Create26Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskBoolRemote v) => factory.LocalCreate26(v);
            });
            services.AddScoped<Create27Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskStringRemote v) => factory.LocalCreate27(v);
            });
            services.AddScoped<Create28Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolBoolRemote v) => factory.LocalCreate28(v);
            });
            services.AddScoped<Create29Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolStringRemote v) => factory.LocalCreate29(v);
            });
            services.AddScoped<Create30Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskBoolRemote v) => factory.LocalCreate30(v);
            });
            services.AddScoped<Create31Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskStringRemote v) => factory.LocalCreate31(v);
            });
            services.AddScoped<Create32Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolBoolRemote v) => factory.LocalCreate32(v);
            });
            services.AddScoped<Create33Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolStringRemote v) => factory.LocalCreate33(v);
            });
            services.AddScoped<Create34Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskBoolRemote v) => factory.LocalCreate34(v);
            });
            services.AddScoped<Create35Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskStringRemote v) => factory.LocalCreate35(v);
            });
            services.AddScoped<Create36Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidBoolRemote v) => factory.LocalCreate36(v);
            });
            services.AddScoped<Create37Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidStringRemote v) => factory.LocalCreate37(v);
            });
            services.AddScoped<Create38Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskBoolRemote v) => factory.LocalCreate38(v);
            });
            services.AddScoped<Create39Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskStringRemote v) => factory.LocalCreate39(v);
            });
            services.AddScoped<Create40Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolBoolRemote v) => factory.LocalCreate40(v);
            });
            services.AddScoped<Create41Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolStringRemote v) => factory.LocalCreate41(v);
            });
            services.AddScoped<Create42Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskBoolRemote v) => factory.LocalCreate42(v);
            });
            services.AddScoped<Create43Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskStringRemote v) => factory.LocalCreate43(v);
            });
            services.AddScoped<Create44Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolBoolRemote v) => factory.LocalCreate44(v);
            });
            services.AddScoped<Create45Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolStringRemote v) => factory.LocalCreate45(v);
            });
            services.AddScoped<Create46Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskBoolRemote v) => factory.LocalCreate46(v);
            });
            services.AddScoped<Create47Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskStringRemote v) => factory.LocalCreate47(v);
            });
            services.AddScoped<Create48Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidBool v) => factory.LocalCreate48(v);
            });
            services.AddScoped<Create49Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidString v) => factory.LocalCreate49(v);
            });
            services.AddScoped<Create50Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskBool v) => factory.LocalCreate50(v);
            });
            services.AddScoped<Create51Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskString v) => factory.LocalCreate51(v);
            });
            services.AddScoped<Create52Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolBool v) => factory.LocalCreate52(v);
            });
            services.AddScoped<Create53Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolString v) => factory.LocalCreate53(v);
            });
            services.AddScoped<Create54Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskBool v) => factory.LocalCreate54(v);
            });
            services.AddScoped<Create55Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskString v) => factory.LocalCreate55(v);
            });
            services.AddScoped<Create56Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolBool v) => factory.LocalCreate56(v);
            });
            services.AddScoped<Create57Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolString v) => factory.LocalCreate57(v);
            });
            services.AddScoped<Create58Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskBool v) => factory.LocalCreate58(v);
            });
            services.AddScoped<Create59Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskString v) => factory.LocalCreate59(v);
            });
            services.AddScoped<Create60Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidBool v) => factory.LocalCreate60(v);
            });
            services.AddScoped<Create61Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidString v) => factory.LocalCreate61(v);
            });
            services.AddScoped<Create62Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskBool v) => factory.LocalCreate62(v);
            });
            services.AddScoped<Create63Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskString v) => factory.LocalCreate63(v);
            });
            services.AddScoped<Create64Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolBool v) => factory.LocalCreate64(v);
            });
            services.AddScoped<Create65Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolString v) => factory.LocalCreate65(v);
            });
            services.AddScoped<Create66Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskBool v) => factory.LocalCreate66(v);
            });
            services.AddScoped<Create67Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskString v) => factory.LocalCreate67(v);
            });
            services.AddScoped<Create68Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolBool v) => factory.LocalCreate68(v);
            });
            services.AddScoped<Create69Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolString v) => factory.LocalCreate69(v);
            });
            services.AddScoped<Create70Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskBool v) => factory.LocalCreate70(v);
            });
            services.AddScoped<Create71Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskString v) => factory.LocalCreate71(v);
            });
            services.AddScoped<Create72Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidBoolRemote v) => factory.LocalCreate72(v);
            });
            services.AddScoped<Create73Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidStringRemote v) => factory.LocalCreate73(v);
            });
            services.AddScoped<Create74Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskBoolRemote v) => factory.LocalCreate74(v);
            });
            services.AddScoped<Create75Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskStringRemote v) => factory.LocalCreate75(v);
            });
            services.AddScoped<Create76Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolBoolRemote v) => factory.LocalCreate76(v);
            });
            services.AddScoped<Create77Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolStringRemote v) => factory.LocalCreate77(v);
            });
            services.AddScoped<Create78Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskBoolRemote v) => factory.LocalCreate78(v);
            });
            services.AddScoped<Create79Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskStringRemote v) => factory.LocalCreate79(v);
            });
            services.AddScoped<Create80Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolBoolRemote v) => factory.LocalCreate80(v);
            });
            services.AddScoped<Create81Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolStringRemote v) => factory.LocalCreate81(v);
            });
            services.AddScoped<Create82Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskBoolRemote v) => factory.LocalCreate82(v);
            });
            services.AddScoped<Create83Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskStringRemote v) => factory.LocalCreate83(v);
            });
            services.AddScoped<Create84Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidBoolRemote v) => factory.LocalCreate84(v);
            });
            services.AddScoped<Create85Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidStringRemote v) => factory.LocalCreate85(v);
            });
            services.AddScoped<Create86Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskBoolRemote v) => factory.LocalCreate86(v);
            });
            services.AddScoped<Create87Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskStringRemote v) => factory.LocalCreate87(v);
            });
            services.AddScoped<Create88Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolBoolRemote v) => factory.LocalCreate88(v);
            });
            services.AddScoped<Create89Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolStringRemote v) => factory.LocalCreate89(v);
            });
            services.AddScoped<Create90Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskBoolRemote v) => factory.LocalCreate90(v);
            });
            services.AddScoped<Create91Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskStringRemote v) => factory.LocalCreate91(v);
            });
            services.AddScoped<Create92Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolBoolRemote v) => factory.LocalCreate92(v);
            });
            services.AddScoped<Create93Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolStringRemote v) => factory.LocalCreate93(v);
            });
            services.AddScoped<Create94Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskBoolRemote v) => factory.LocalCreate94(v);
            });
            services.AddScoped<Create95Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskStringRemote v) => factory.LocalCreate95(v);
            });
            services.AddScoped<Create120Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidBoolRemoteDeny v) => factory.LocalCreate120(v);
            });
            services.AddScoped<Create121Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidStringRemoteDeny v) => factory.LocalCreate121(v);
            });
            services.AddScoped<Create122Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskBoolRemoteDeny v) => factory.LocalCreate122(v);
            });
            services.AddScoped<Create123Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskStringRemoteDeny v) => factory.LocalCreate123(v);
            });
            services.AddScoped<Create124Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolBoolRemoteDeny v) => factory.LocalCreate124(v);
            });
            services.AddScoped<Create125Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolStringRemoteDeny v) => factory.LocalCreate125(v);
            });
            services.AddScoped<Create126Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskBoolRemoteDeny v) => factory.LocalCreate126(v);
            });
            services.AddScoped<Create127Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskStringRemoteDeny v) => factory.LocalCreate127(v);
            });
            services.AddScoped<Create128Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolBoolRemoteDeny v) => factory.LocalCreate128(v);
            });
            services.AddScoped<Create129Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolStringRemoteDeny v) => factory.LocalCreate129(v);
            });
            services.AddScoped<Create130Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskBoolRemoteDeny v) => factory.LocalCreate130(v);
            });
            services.AddScoped<Create131Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskStringRemoteDeny v) => factory.LocalCreate131(v);
            });
            services.AddScoped<Create132Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidBoolRemoteDeny v) => factory.LocalCreate132(v);
            });
            services.AddScoped<Create133Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidStringRemoteDeny v) => factory.LocalCreate133(v);
            });
            services.AddScoped<Create134Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskBoolRemoteDeny v) => factory.LocalCreate134(v);
            });
            services.AddScoped<Create135Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskStringRemoteDeny v) => factory.LocalCreate135(v);
            });
            services.AddScoped<Create136Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolBoolRemoteDeny v) => factory.LocalCreate136(v);
            });
            services.AddScoped<Create137Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolStringRemoteDeny v) => factory.LocalCreate137(v);
            });
            services.AddScoped<Create138Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskBoolRemoteDeny v) => factory.LocalCreate138(v);
            });
            services.AddScoped<Create139Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskStringRemoteDeny v) => factory.LocalCreate139(v);
            });
            services.AddScoped<Create140Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolBoolRemoteDeny v) => factory.LocalCreate140(v);
            });
            services.AddScoped<Create141Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolStringRemoteDeny v) => factory.LocalCreate141(v);
            });
            services.AddScoped<Create142Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskBoolRemoteDeny v) => factory.LocalCreate142(v);
            });
            services.AddScoped<Create143Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskStringRemoteDeny v) => factory.LocalCreate143(v);
            });
            services.AddScoped<Create144Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidBoolDeny v) => factory.LocalCreate144(v);
            });
            services.AddScoped<Create145Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidStringDeny v) => factory.LocalCreate145(v);
            });
            services.AddScoped<Create146Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskBoolDeny v) => factory.LocalCreate146(v);
            });
            services.AddScoped<Create147Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskStringDeny v) => factory.LocalCreate147(v);
            });
            services.AddScoped<Create148Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolBoolDeny v) => factory.LocalCreate148(v);
            });
            services.AddScoped<Create149Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolStringDeny v) => factory.LocalCreate149(v);
            });
            services.AddScoped<Create150Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskBoolDeny v) => factory.LocalCreate150(v);
            });
            services.AddScoped<Create151Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskStringDeny v) => factory.LocalCreate151(v);
            });
            services.AddScoped<Create152Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolBoolDeny v) => factory.LocalCreate152(v);
            });
            services.AddScoped<Create153Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolStringDeny v) => factory.LocalCreate153(v);
            });
            services.AddScoped<Create154Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskBoolDeny v) => factory.LocalCreate154(v);
            });
            services.AddScoped<Create155Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskStringDeny v) => factory.LocalCreate155(v);
            });
            services.AddScoped<Create156Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidBoolDeny v) => factory.LocalCreate156(v);
            });
            services.AddScoped<Create157Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidStringDeny v) => factory.LocalCreate157(v);
            });
            services.AddScoped<Create158Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskBoolDeny v) => factory.LocalCreate158(v);
            });
            services.AddScoped<Create159Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskStringDeny v) => factory.LocalCreate159(v);
            });
            services.AddScoped<Create160Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolBoolDeny v) => factory.LocalCreate160(v);
            });
            services.AddScoped<Create161Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolStringDeny v) => factory.LocalCreate161(v);
            });
            services.AddScoped<Create162Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskBoolDeny v) => factory.LocalCreate162(v);
            });
            services.AddScoped<Create163Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskStringDeny v) => factory.LocalCreate163(v);
            });
            services.AddScoped<Create164Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolBoolDeny v) => factory.LocalCreate164(v);
            });
            services.AddScoped<Create165Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolStringDeny v) => factory.LocalCreate165(v);
            });
            services.AddScoped<Create166Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskBoolDeny v) => factory.LocalCreate166(v);
            });
            services.AddScoped<Create167Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskStringDeny v) => factory.LocalCreate167(v);
            });
            services.AddScoped<Create168Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidBoolRemoteDeny v) => factory.LocalCreate168(v);
            });
            services.AddScoped<Create169Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidStringRemoteDeny v) => factory.LocalCreate169(v);
            });
            services.AddScoped<Create170Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskBoolRemoteDeny v) => factory.LocalCreate170(v);
            });
            services.AddScoped<Create171Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskStringRemoteDeny v) => factory.LocalCreate171(v);
            });
            services.AddScoped<Create172Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolBoolRemoteDeny v) => factory.LocalCreate172(v);
            });
            services.AddScoped<Create173Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolStringRemoteDeny v) => factory.LocalCreate173(v);
            });
            services.AddScoped<Create174Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskBoolRemoteDeny v) => factory.LocalCreate174(v);
            });
            services.AddScoped<Create175Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskStringRemoteDeny v) => factory.LocalCreate175(v);
            });
            services.AddScoped<Create176Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolBoolRemoteDeny v) => factory.LocalCreate176(v);
            });
            services.AddScoped<Create177Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolStringRemoteDeny v) => factory.LocalCreate177(v);
            });
            services.AddScoped<Create178Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskBoolRemoteDeny v) => factory.LocalCreate178(v);
            });
            services.AddScoped<Create179Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskStringRemoteDeny v) => factory.LocalCreate179(v);
            });
            services.AddScoped<Create180Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidBoolRemoteDeny v) => factory.LocalCreate180(v);
            });
            services.AddScoped<Create181Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidStringRemoteDeny v) => factory.LocalCreate181(v);
            });
            services.AddScoped<Create182Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskBoolRemoteDeny v) => factory.LocalCreate182(v);
            });
            services.AddScoped<Create183Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskStringRemoteDeny v) => factory.LocalCreate183(v);
            });
            services.AddScoped<Create184Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolBoolRemoteDeny v) => factory.LocalCreate184(v);
            });
            services.AddScoped<Create185Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolStringRemoteDeny v) => factory.LocalCreate185(v);
            });
            services.AddScoped<Create186Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskBoolRemoteDeny v) => factory.LocalCreate186(v);
            });
            services.AddScoped<Create187Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskStringRemoteDeny v) => factory.LocalCreate187(v);
            });
            services.AddScoped<Create188Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolBoolRemoteDeny v) => factory.LocalCreate188(v);
            });
            services.AddScoped<Create189Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolStringRemoteDeny v) => factory.LocalCreate189(v);
            });
            services.AddScoped<Create190Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskBoolRemoteDeny v) => factory.LocalCreate190(v);
            });
            services.AddScoped<Create191Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskStringRemoteDeny v) => factory.LocalCreate191(v);
            });
            services.AddScoped<CanCreate24Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidBoolRemote v) => factory.LocalCanCreate24(v);
            });
            services.AddScoped<CanCreate25Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidStringRemote v) => factory.LocalCanCreate25(v);
            });
            services.AddScoped<CanCreate26Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskBoolRemote v) => factory.LocalCanCreate26(v);
            });
            services.AddScoped<CanCreate27Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskStringRemote v) => factory.LocalCanCreate27(v);
            });
            services.AddScoped<CanInsert24Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidBoolRemote v) => factory.LocalCanInsert24(v);
            });
            services.AddScoped<CanInsert25Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidStringRemote v) => factory.LocalCanInsert25(v);
            });
            services.AddScoped<CanInsert26Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskBoolRemote v) => factory.LocalCanInsert26(v);
            });
            services.AddScoped<CanInsert27Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskStringRemote v) => factory.LocalCanInsert27(v);
            });
            services.AddScoped<CanCreate28Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolBoolRemote v) => factory.LocalCanCreate28(v);
            });
            services.AddScoped<CanCreate29Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolStringRemote v) => factory.LocalCanCreate29(v);
            });
            services.AddScoped<CanCreate30Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskBoolRemote v) => factory.LocalCanCreate30(v);
            });
            services.AddScoped<CanCreate31Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskStringRemote v) => factory.LocalCanCreate31(v);
            });
            services.AddScoped<CanInsert28Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolBoolRemote v) => factory.LocalCanInsert28(v);
            });
            services.AddScoped<CanInsert29Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolStringRemote v) => factory.LocalCanInsert29(v);
            });
            services.AddScoped<CanInsert30Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskBoolRemote v) => factory.LocalCanInsert30(v);
            });
            services.AddScoped<CanInsert31Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskStringRemote v) => factory.LocalCanInsert31(v);
            });
            services.AddScoped<CanCreate32Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolBoolRemote v) => factory.LocalCanCreate32(v);
            });
            services.AddScoped<CanCreate33Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolStringRemote v) => factory.LocalCanCreate33(v);
            });
            services.AddScoped<CanCreate34Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskBoolRemote v) => factory.LocalCanCreate34(v);
            });
            services.AddScoped<CanCreate35Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskStringRemote v) => factory.LocalCanCreate35(v);
            });
            services.AddScoped<CanInsert32Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolBoolRemote v) => factory.LocalCanInsert32(v);
            });
            services.AddScoped<CanInsert33Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolStringRemote v) => factory.LocalCanInsert33(v);
            });
            services.AddScoped<CanInsert34Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskBoolRemote v) => factory.LocalCanInsert34(v);
            });
            services.AddScoped<CanInsert35Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskStringRemote v) => factory.LocalCanInsert35(v);
            });
            services.AddScoped<CanCreate36Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidBoolRemote v) => factory.LocalCanCreate36(v);
            });
            services.AddScoped<CanCreate37Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidStringRemote v) => factory.LocalCanCreate37(v);
            });
            services.AddScoped<CanCreate38Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskBoolRemote v) => factory.LocalCanCreate38(v);
            });
            services.AddScoped<CanCreate39Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskStringRemote v) => factory.LocalCanCreate39(v);
            });
            services.AddScoped<CanInsert36Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidBoolRemote v) => factory.LocalCanInsert36(v);
            });
            services.AddScoped<CanInsert37Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidStringRemote v) => factory.LocalCanInsert37(v);
            });
            services.AddScoped<CanInsert38Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskBoolRemote v) => factory.LocalCanInsert38(v);
            });
            services.AddScoped<CanInsert39Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskStringRemote v) => factory.LocalCanInsert39(v);
            });
            services.AddScoped<CanCreate40Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolBoolRemote v) => factory.LocalCanCreate40(v);
            });
            services.AddScoped<CanCreate41Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolStringRemote v) => factory.LocalCanCreate41(v);
            });
            services.AddScoped<CanCreate42Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskBoolRemote v) => factory.LocalCanCreate42(v);
            });
            services.AddScoped<CanCreate43Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskStringRemote v) => factory.LocalCanCreate43(v);
            });
            services.AddScoped<CanInsert40Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolBoolRemote v) => factory.LocalCanInsert40(v);
            });
            services.AddScoped<CanInsert41Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolStringRemote v) => factory.LocalCanInsert41(v);
            });
            services.AddScoped<CanInsert42Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskBoolRemote v) => factory.LocalCanInsert42(v);
            });
            services.AddScoped<CanInsert43Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskStringRemote v) => factory.LocalCanInsert43(v);
            });
            services.AddScoped<CanCreate44Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolBoolRemote v) => factory.LocalCanCreate44(v);
            });
            services.AddScoped<CanCreate45Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolStringRemote v) => factory.LocalCanCreate45(v);
            });
            services.AddScoped<CanCreate46Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskBoolRemote v) => factory.LocalCanCreate46(v);
            });
            services.AddScoped<CanCreate47Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskStringRemote v) => factory.LocalCanCreate47(v);
            });
            services.AddScoped<CanInsert44Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolBoolRemote v) => factory.LocalCanInsert44(v);
            });
            services.AddScoped<CanInsert45Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolStringRemote v) => factory.LocalCanInsert45(v);
            });
            services.AddScoped<CanInsert46Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskBoolRemote v) => factory.LocalCanInsert46(v);
            });
            services.AddScoped<CanInsert47Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskStringRemote v) => factory.LocalCanInsert47(v);
            });
            services.AddScoped<CanCreate72Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidBoolRemote v) => factory.LocalCanCreate72(v);
            });
            services.AddScoped<CanCreate73Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidStringRemote v) => factory.LocalCanCreate73(v);
            });
            services.AddScoped<CanCreate74Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskBoolRemote v) => factory.LocalCanCreate74(v);
            });
            services.AddScoped<CanCreate75Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskStringRemote v) => factory.LocalCanCreate75(v);
            });
            services.AddScoped<CanInsert72Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidBoolRemote v) => factory.LocalCanInsert72(v);
            });
            services.AddScoped<CanInsert73Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidStringRemote v) => factory.LocalCanInsert73(v);
            });
            services.AddScoped<CanInsert74Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskBoolRemote v) => factory.LocalCanInsert74(v);
            });
            services.AddScoped<CanInsert75Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskStringRemote v) => factory.LocalCanInsert75(v);
            });
            services.AddScoped<CanCreate76Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolBoolRemote v) => factory.LocalCanCreate76(v);
            });
            services.AddScoped<CanCreate77Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolStringRemote v) => factory.LocalCanCreate77(v);
            });
            services.AddScoped<CanCreate78Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskBoolRemote v) => factory.LocalCanCreate78(v);
            });
            services.AddScoped<CanCreate79Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskStringRemote v) => factory.LocalCanCreate79(v);
            });
            services.AddScoped<CanInsert76Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolBoolRemote v) => factory.LocalCanInsert76(v);
            });
            services.AddScoped<CanInsert77Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolStringRemote v) => factory.LocalCanInsert77(v);
            });
            services.AddScoped<CanInsert78Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskBoolRemote v) => factory.LocalCanInsert78(v);
            });
            services.AddScoped<CanInsert79Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskStringRemote v) => factory.LocalCanInsert79(v);
            });
            services.AddScoped<CanCreate80Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolBoolRemote v) => factory.LocalCanCreate80(v);
            });
            services.AddScoped<CanCreate81Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolStringRemote v) => factory.LocalCanCreate81(v);
            });
            services.AddScoped<CanCreate82Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskBoolRemote v) => factory.LocalCanCreate82(v);
            });
            services.AddScoped<CanCreate83Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskStringRemote v) => factory.LocalCanCreate83(v);
            });
            services.AddScoped<CanInsert80Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolBoolRemote v) => factory.LocalCanInsert80(v);
            });
            services.AddScoped<CanInsert81Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolStringRemote v) => factory.LocalCanInsert81(v);
            });
            services.AddScoped<CanInsert82Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskBoolRemote v) => factory.LocalCanInsert82(v);
            });
            services.AddScoped<CanInsert83Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskStringRemote v) => factory.LocalCanInsert83(v);
            });
            services.AddScoped<CanCreate84Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidBoolRemote v) => factory.LocalCanCreate84(v);
            });
            services.AddScoped<CanCreate85Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidStringRemote v) => factory.LocalCanCreate85(v);
            });
            services.AddScoped<CanCreate86Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskBoolRemote v) => factory.LocalCanCreate86(v);
            });
            services.AddScoped<CanCreate87Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskStringRemote v) => factory.LocalCanCreate87(v);
            });
            services.AddScoped<CanInsert84Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidBoolRemote v) => factory.LocalCanInsert84(v);
            });
            services.AddScoped<CanInsert85Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidStringRemote v) => factory.LocalCanInsert85(v);
            });
            services.AddScoped<CanInsert86Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskBoolRemote v) => factory.LocalCanInsert86(v);
            });
            services.AddScoped<CanInsert87Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskStringRemote v) => factory.LocalCanInsert87(v);
            });
            services.AddScoped<CanCreate88Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolBoolRemote v) => factory.LocalCanCreate88(v);
            });
            services.AddScoped<CanCreate89Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolStringRemote v) => factory.LocalCanCreate89(v);
            });
            services.AddScoped<CanCreate90Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskBoolRemote v) => factory.LocalCanCreate90(v);
            });
            services.AddScoped<CanCreate91Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskStringRemote v) => factory.LocalCanCreate91(v);
            });
            services.AddScoped<CanInsert88Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolBoolRemote v) => factory.LocalCanInsert88(v);
            });
            services.AddScoped<CanInsert89Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolStringRemote v) => factory.LocalCanInsert89(v);
            });
            services.AddScoped<CanInsert90Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskBoolRemote v) => factory.LocalCanInsert90(v);
            });
            services.AddScoped<CanInsert91Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskStringRemote v) => factory.LocalCanInsert91(v);
            });
            services.AddScoped<CanCreate92Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolBoolRemote v) => factory.LocalCanCreate92(v);
            });
            services.AddScoped<CanCreate93Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolStringRemote v) => factory.LocalCanCreate93(v);
            });
            services.AddScoped<CanCreate94Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskBoolRemote v) => factory.LocalCanCreate94(v);
            });
            services.AddScoped<CanCreate95Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskStringRemote v) => factory.LocalCanCreate95(v);
            });
            services.AddScoped<CanInsert92Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolBoolRemote v) => factory.LocalCanInsert92(v);
            });
            services.AddScoped<CanInsert93Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolStringRemote v) => factory.LocalCanInsert93(v);
            });
            services.AddScoped<CanInsert94Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskBoolRemote v) => factory.LocalCanInsert94(v);
            });
            services.AddScoped<CanInsert95Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskStringRemote v) => factory.LocalCanInsert95(v);
            });
            services.AddScoped<CanCreate120Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidBoolRemoteDeny v) => factory.LocalCanCreate120(v);
            });
            services.AddScoped<CanCreate121Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidStringRemoteDeny v) => factory.LocalCanCreate121(v);
            });
            services.AddScoped<CanCreate122Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskBoolRemoteDeny v) => factory.LocalCanCreate122(v);
            });
            services.AddScoped<CanCreate123Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskStringRemoteDeny v) => factory.LocalCanCreate123(v);
            });
            services.AddScoped<CanInsert120Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidBoolRemoteDeny v) => factory.LocalCanInsert120(v);
            });
            services.AddScoped<CanInsert121Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidStringRemoteDeny v) => factory.LocalCanInsert121(v);
            });
            services.AddScoped<CanInsert122Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskBoolRemoteDeny v) => factory.LocalCanInsert122(v);
            });
            services.AddScoped<CanInsert123Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (VoidTaskStringRemoteDeny v) => factory.LocalCanInsert123(v);
            });
            services.AddScoped<CanCreate124Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolBoolRemoteDeny v) => factory.LocalCanCreate124(v);
            });
            services.AddScoped<CanCreate125Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolStringRemoteDeny v) => factory.LocalCanCreate125(v);
            });
            services.AddScoped<CanCreate126Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskBoolRemoteDeny v) => factory.LocalCanCreate126(v);
            });
            services.AddScoped<CanCreate127Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskStringRemoteDeny v) => factory.LocalCanCreate127(v);
            });
            services.AddScoped<CanInsert124Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolBoolRemoteDeny v) => factory.LocalCanInsert124(v);
            });
            services.AddScoped<CanInsert125Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolStringRemoteDeny v) => factory.LocalCanInsert125(v);
            });
            services.AddScoped<CanInsert126Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskBoolRemoteDeny v) => factory.LocalCanInsert126(v);
            });
            services.AddScoped<CanInsert127Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TrueBoolTaskStringRemoteDeny v) => factory.LocalCanInsert127(v);
            });
            services.AddScoped<CanCreate128Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolBoolRemoteDeny v) => factory.LocalCanCreate128(v);
            });
            services.AddScoped<CanCreate129Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolStringRemoteDeny v) => factory.LocalCanCreate129(v);
            });
            services.AddScoped<CanCreate130Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskBoolRemoteDeny v) => factory.LocalCanCreate130(v);
            });
            services.AddScoped<CanCreate131Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskStringRemoteDeny v) => factory.LocalCanCreate131(v);
            });
            services.AddScoped<CanInsert128Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolBoolRemoteDeny v) => factory.LocalCanInsert128(v);
            });
            services.AddScoped<CanInsert129Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolStringRemoteDeny v) => factory.LocalCanInsert129(v);
            });
            services.AddScoped<CanInsert130Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskBoolRemoteDeny v) => factory.LocalCanInsert130(v);
            });
            services.AddScoped<CanInsert131Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (FalseBoolTaskStringRemoteDeny v) => factory.LocalCanInsert131(v);
            });
            services.AddScoped<CanCreate132Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidBoolRemoteDeny v) => factory.LocalCanCreate132(v);
            });
            services.AddScoped<CanCreate133Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidStringRemoteDeny v) => factory.LocalCanCreate133(v);
            });
            services.AddScoped<CanCreate134Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskBoolRemoteDeny v) => factory.LocalCanCreate134(v);
            });
            services.AddScoped<CanCreate135Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskStringRemoteDeny v) => factory.LocalCanCreate135(v);
            });
            services.AddScoped<CanInsert132Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidBoolRemoteDeny v) => factory.LocalCanInsert132(v);
            });
            services.AddScoped<CanInsert133Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidStringRemoteDeny v) => factory.LocalCanInsert133(v);
            });
            services.AddScoped<CanInsert134Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskBoolRemoteDeny v) => factory.LocalCanInsert134(v);
            });
            services.AddScoped<CanInsert135Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskVoidTaskStringRemoteDeny v) => factory.LocalCanInsert135(v);
            });
            services.AddScoped<CanCreate136Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolBoolRemoteDeny v) => factory.LocalCanCreate136(v);
            });
            services.AddScoped<CanCreate137Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolStringRemoteDeny v) => factory.LocalCanCreate137(v);
            });
            services.AddScoped<CanCreate138Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskBoolRemoteDeny v) => factory.LocalCanCreate138(v);
            });
            services.AddScoped<CanCreate139Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskStringRemoteDeny v) => factory.LocalCanCreate139(v);
            });
            services.AddScoped<CanInsert136Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolBoolRemoteDeny v) => factory.LocalCanInsert136(v);
            });
            services.AddScoped<CanInsert137Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolStringRemoteDeny v) => factory.LocalCanInsert137(v);
            });
            services.AddScoped<CanInsert138Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskBoolRemoteDeny v) => factory.LocalCanInsert138(v);
            });
            services.AddScoped<CanInsert139Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskTrueBoolTaskStringRemoteDeny v) => factory.LocalCanInsert139(v);
            });
            services.AddScoped<CanCreate140Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolBoolRemoteDeny v) => factory.LocalCanCreate140(v);
            });
            services.AddScoped<CanCreate141Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolStringRemoteDeny v) => factory.LocalCanCreate141(v);
            });
            services.AddScoped<CanCreate142Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskBoolRemoteDeny v) => factory.LocalCanCreate142(v);
            });
            services.AddScoped<CanCreate143Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskStringRemoteDeny v) => factory.LocalCanCreate143(v);
            });
            services.AddScoped<CanInsert140Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolBoolRemoteDeny v) => factory.LocalCanInsert140(v);
            });
            services.AddScoped<CanInsert141Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolStringRemoteDeny v) => factory.LocalCanInsert141(v);
            });
            services.AddScoped<CanInsert142Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskBoolRemoteDeny v) => factory.LocalCanInsert142(v);
            });
            services.AddScoped<CanInsert143Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (TaskFalseBoolTaskStringRemoteDeny v) => factory.LocalCanInsert143(v);
            });
            services.AddScoped<CanCreate168Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidBoolRemoteDeny v) => factory.LocalCanCreate168(v);
            });
            services.AddScoped<CanCreate169Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidStringRemoteDeny v) => factory.LocalCanCreate169(v);
            });
            services.AddScoped<CanCreate170Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskBoolRemoteDeny v) => factory.LocalCanCreate170(v);
            });
            services.AddScoped<CanCreate171Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskStringRemoteDeny v) => factory.LocalCanCreate171(v);
            });
            services.AddScoped<CanInsert168Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidBoolRemoteDeny v) => factory.LocalCanInsert168(v);
            });
            services.AddScoped<CanInsert169Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidStringRemoteDeny v) => factory.LocalCanInsert169(v);
            });
            services.AddScoped<CanInsert170Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskBoolRemoteDeny v) => factory.LocalCanInsert170(v);
            });
            services.AddScoped<CanInsert171Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteVoidTaskStringRemoteDeny v) => factory.LocalCanInsert171(v);
            });
            services.AddScoped<CanCreate172Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolBoolRemoteDeny v) => factory.LocalCanCreate172(v);
            });
            services.AddScoped<CanCreate173Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolStringRemoteDeny v) => factory.LocalCanCreate173(v);
            });
            services.AddScoped<CanCreate174Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskBoolRemoteDeny v) => factory.LocalCanCreate174(v);
            });
            services.AddScoped<CanCreate175Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskStringRemoteDeny v) => factory.LocalCanCreate175(v);
            });
            services.AddScoped<CanInsert172Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolBoolRemoteDeny v) => factory.LocalCanInsert172(v);
            });
            services.AddScoped<CanInsert173Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolStringRemoteDeny v) => factory.LocalCanInsert173(v);
            });
            services.AddScoped<CanInsert174Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskBoolRemoteDeny v) => factory.LocalCanInsert174(v);
            });
            services.AddScoped<CanInsert175Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTrueBoolTaskStringRemoteDeny v) => factory.LocalCanInsert175(v);
            });
            services.AddScoped<CanCreate176Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolBoolRemoteDeny v) => factory.LocalCanCreate176(v);
            });
            services.AddScoped<CanCreate177Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolStringRemoteDeny v) => factory.LocalCanCreate177(v);
            });
            services.AddScoped<CanCreate178Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskBoolRemoteDeny v) => factory.LocalCanCreate178(v);
            });
            services.AddScoped<CanCreate179Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskStringRemoteDeny v) => factory.LocalCanCreate179(v);
            });
            services.AddScoped<CanInsert176Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolBoolRemoteDeny v) => factory.LocalCanInsert176(v);
            });
            services.AddScoped<CanInsert177Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolStringRemoteDeny v) => factory.LocalCanInsert177(v);
            });
            services.AddScoped<CanInsert178Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskBoolRemoteDeny v) => factory.LocalCanInsert178(v);
            });
            services.AddScoped<CanInsert179Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteFalseBoolTaskStringRemoteDeny v) => factory.LocalCanInsert179(v);
            });
            services.AddScoped<CanCreate180Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidBoolRemoteDeny v) => factory.LocalCanCreate180(v);
            });
            services.AddScoped<CanCreate181Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidStringRemoteDeny v) => factory.LocalCanCreate181(v);
            });
            services.AddScoped<CanCreate182Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskBoolRemoteDeny v) => factory.LocalCanCreate182(v);
            });
            services.AddScoped<CanCreate183Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskStringRemoteDeny v) => factory.LocalCanCreate183(v);
            });
            services.AddScoped<CanInsert180Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidBoolRemoteDeny v) => factory.LocalCanInsert180(v);
            });
            services.AddScoped<CanInsert181Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidStringRemoteDeny v) => factory.LocalCanInsert181(v);
            });
            services.AddScoped<CanInsert182Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskBoolRemoteDeny v) => factory.LocalCanInsert182(v);
            });
            services.AddScoped<CanInsert183Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskVoidTaskStringRemoteDeny v) => factory.LocalCanInsert183(v);
            });
            services.AddScoped<CanCreate184Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolBoolRemoteDeny v) => factory.LocalCanCreate184(v);
            });
            services.AddScoped<CanCreate185Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolStringRemoteDeny v) => factory.LocalCanCreate185(v);
            });
            services.AddScoped<CanCreate186Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskBoolRemoteDeny v) => factory.LocalCanCreate186(v);
            });
            services.AddScoped<CanCreate187Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskStringRemoteDeny v) => factory.LocalCanCreate187(v);
            });
            services.AddScoped<CanInsert184Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolBoolRemoteDeny v) => factory.LocalCanInsert184(v);
            });
            services.AddScoped<CanInsert185Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolStringRemoteDeny v) => factory.LocalCanInsert185(v);
            });
            services.AddScoped<CanInsert186Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskBoolRemoteDeny v) => factory.LocalCanInsert186(v);
            });
            services.AddScoped<CanInsert187Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskTrueBoolTaskStringRemoteDeny v) => factory.LocalCanInsert187(v);
            });
            services.AddScoped<CanCreate188Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolBoolRemoteDeny v) => factory.LocalCanCreate188(v);
            });
            services.AddScoped<CanCreate189Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolStringRemoteDeny v) => factory.LocalCanCreate189(v);
            });
            services.AddScoped<CanCreate190Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskBoolRemoteDeny v) => factory.LocalCanCreate190(v);
            });
            services.AddScoped<CanCreate191Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskStringRemoteDeny v) => factory.LocalCanCreate191(v);
            });
            services.AddScoped<CanInsert188Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolBoolRemoteDeny v) => factory.LocalCanInsert188(v);
            });
            services.AddScoped<CanInsert189Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolStringRemoteDeny v) => factory.LocalCanInsert189(v);
            });
            services.AddScoped<CanInsert190Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskBoolRemoteDeny v) => factory.LocalCanInsert190(v);
            });
            services.AddScoped<CanInsert191Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (RemoteTaskFalseBoolTaskStringRemoteDeny v) => factory.LocalCanInsert191(v);
            });
            services.AddScoped<Save24Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, VoidBoolRemote v) => factory.LocalSave24(target, v);
            });
            services.AddScoped<Save25Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, VoidStringRemote v) => factory.LocalSave25(target, v);
            });
            services.AddScoped<Save26Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, VoidTaskBoolRemote v) => factory.LocalSave26(target, v);
            });
            services.AddScoped<Save27Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, VoidTaskStringRemote v) => factory.LocalSave27(target, v);
            });
            services.AddScoped<Save28Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TrueBoolBoolRemote v) => factory.LocalSave28(target, v);
            });
            services.AddScoped<Save29Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TrueBoolStringRemote v) => factory.LocalSave29(target, v);
            });
            services.AddScoped<Save30Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TrueBoolTaskBoolRemote v) => factory.LocalSave30(target, v);
            });
            services.AddScoped<Save31Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TrueBoolTaskStringRemote v) => factory.LocalSave31(target, v);
            });
            services.AddScoped<Save32Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, FalseBoolBoolRemote v) => factory.LocalSave32(target, v);
            });
            services.AddScoped<Save33Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, FalseBoolStringRemote v) => factory.LocalSave33(target, v);
            });
            services.AddScoped<Save34Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, FalseBoolTaskBoolRemote v) => factory.LocalSave34(target, v);
            });
            services.AddScoped<Save35Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, FalseBoolTaskStringRemote v) => factory.LocalSave35(target, v);
            });
            services.AddScoped<Save36Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskVoidBoolRemote v) => factory.LocalSave36(target, v);
            });
            services.AddScoped<Save37Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskVoidStringRemote v) => factory.LocalSave37(target, v);
            });
            services.AddScoped<Save38Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskVoidTaskBoolRemote v) => factory.LocalSave38(target, v);
            });
            services.AddScoped<Save39Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskVoidTaskStringRemote v) => factory.LocalSave39(target, v);
            });
            services.AddScoped<Save40Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskTrueBoolBoolRemote v) => factory.LocalSave40(target, v);
            });
            services.AddScoped<Save41Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskTrueBoolStringRemote v) => factory.LocalSave41(target, v);
            });
            services.AddScoped<Save42Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemote v) => factory.LocalSave42(target, v);
            });
            services.AddScoped<Save43Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemote v) => factory.LocalSave43(target, v);
            });
            services.AddScoped<Save44Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskFalseBoolBoolRemote v) => factory.LocalSave44(target, v);
            });
            services.AddScoped<Save45Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskFalseBoolStringRemote v) => factory.LocalSave45(target, v);
            });
            services.AddScoped<Save46Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemote v) => factory.LocalSave46(target, v);
            });
            services.AddScoped<Save47Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemote v) => factory.LocalSave47(target, v);
            });
            services.AddScoped<Save48Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidBool v) => factory.LocalSave48(target, v);
            });
            services.AddScoped<Save49Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidString v) => factory.LocalSave49(target, v);
            });
            services.AddScoped<Save50Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidTaskBool v) => factory.LocalSave50(target, v);
            });
            services.AddScoped<Save51Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidTaskString v) => factory.LocalSave51(target, v);
            });
            services.AddScoped<Save52Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolBool v) => factory.LocalSave52(target, v);
            });
            services.AddScoped<Save53Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolString v) => factory.LocalSave53(target, v);
            });
            services.AddScoped<Save54Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolTaskBool v) => factory.LocalSave54(target, v);
            });
            services.AddScoped<Save55Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolTaskString v) => factory.LocalSave55(target, v);
            });
            services.AddScoped<Save56Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolBool v) => factory.LocalSave56(target, v);
            });
            services.AddScoped<Save57Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolString v) => factory.LocalSave57(target, v);
            });
            services.AddScoped<Save58Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolTaskBool v) => factory.LocalSave58(target, v);
            });
            services.AddScoped<Save59Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolTaskString v) => factory.LocalSave59(target, v);
            });
            services.AddScoped<Save60Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidBool v) => factory.LocalSave60(target, v);
            });
            services.AddScoped<Save61Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidString v) => factory.LocalSave61(target, v);
            });
            services.AddScoped<Save62Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidTaskBool v) => factory.LocalSave62(target, v);
            });
            services.AddScoped<Save63Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidTaskString v) => factory.LocalSave63(target, v);
            });
            services.AddScoped<Save64Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolBool v) => factory.LocalSave64(target, v);
            });
            services.AddScoped<Save65Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolString v) => factory.LocalSave65(target, v);
            });
            services.AddScoped<Save66Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBool v) => factory.LocalSave66(target, v);
            });
            services.AddScoped<Save67Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskString v) => factory.LocalSave67(target, v);
            });
            services.AddScoped<Save68Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolBool v) => factory.LocalSave68(target, v);
            });
            services.AddScoped<Save69Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolString v) => factory.LocalSave69(target, v);
            });
            services.AddScoped<Save70Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBool v) => factory.LocalSave70(target, v);
            });
            services.AddScoped<Save71Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskString v) => factory.LocalSave71(target, v);
            });
            services.AddScoped<Save72Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidBoolRemote v) => factory.LocalSave72(target, v);
            });
            services.AddScoped<Save73Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidStringRemote v) => factory.LocalSave73(target, v);
            });
            services.AddScoped<Save74Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemote v) => factory.LocalSave74(target, v);
            });
            services.AddScoped<Save75Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidTaskStringRemote v) => factory.LocalSave75(target, v);
            });
            services.AddScoped<Save76Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemote v) => factory.LocalSave76(target, v);
            });
            services.AddScoped<Save77Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolStringRemote v) => factory.LocalSave77(target, v);
            });
            services.AddScoped<Save78Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemote v) => factory.LocalSave78(target, v);
            });
            services.AddScoped<Save79Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemote v) => factory.LocalSave79(target, v);
            });
            services.AddScoped<Save80Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemote v) => factory.LocalSave80(target, v);
            });
            services.AddScoped<Save81Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolStringRemote v) => factory.LocalSave81(target, v);
            });
            services.AddScoped<Save82Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemote v) => factory.LocalSave82(target, v);
            });
            services.AddScoped<Save83Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemote v) => factory.LocalSave83(target, v);
            });
            services.AddScoped<Save84Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemote v) => factory.LocalSave84(target, v);
            });
            services.AddScoped<Save85Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidStringRemote v) => factory.LocalSave85(target, v);
            });
            services.AddScoped<Save86Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemote v) => factory.LocalSave86(target, v);
            });
            services.AddScoped<Save87Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemote v) => factory.LocalSave87(target, v);
            });
            services.AddScoped<Save88Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemote v) => factory.LocalSave88(target, v);
            });
            services.AddScoped<Save89Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemote v) => factory.LocalSave89(target, v);
            });
            services.AddScoped<Save90Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemote v) => factory.LocalSave90(target, v);
            });
            services.AddScoped<Save91Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemote v) => factory.LocalSave91(target, v);
            });
            services.AddScoped<Save92Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemote v) => factory.LocalSave92(target, v);
            });
            services.AddScoped<Save93Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemote v) => factory.LocalSave93(target, v);
            });
            services.AddScoped<Save94Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemote v) => factory.LocalSave94(target, v);
            });
            services.AddScoped<Save95Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemote v) => factory.LocalSave95(target, v);
            });
            services.AddScoped<Save120Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, VoidBoolRemoteDeny v) => factory.LocalSave120(target, v);
            });
            services.AddScoped<Save121Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, VoidStringRemoteDeny v) => factory.LocalSave121(target, v);
            });
            services.AddScoped<Save122Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, VoidTaskBoolRemoteDeny v) => factory.LocalSave122(target, v);
            });
            services.AddScoped<Save123Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, VoidTaskStringRemoteDeny v) => factory.LocalSave123(target, v);
            });
            services.AddScoped<Save124Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TrueBoolBoolRemoteDeny v) => factory.LocalSave124(target, v);
            });
            services.AddScoped<Save125Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TrueBoolStringRemoteDeny v) => factory.LocalSave125(target, v);
            });
            services.AddScoped<Save126Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TrueBoolTaskBoolRemoteDeny v) => factory.LocalSave126(target, v);
            });
            services.AddScoped<Save127Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TrueBoolTaskStringRemoteDeny v) => factory.LocalSave127(target, v);
            });
            services.AddScoped<Save128Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, FalseBoolBoolRemoteDeny v) => factory.LocalSave128(target, v);
            });
            services.AddScoped<Save129Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, FalseBoolStringRemoteDeny v) => factory.LocalSave129(target, v);
            });
            services.AddScoped<Save130Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, FalseBoolTaskBoolRemoteDeny v) => factory.LocalSave130(target, v);
            });
            services.AddScoped<Save131Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, FalseBoolTaskStringRemoteDeny v) => factory.LocalSave131(target, v);
            });
            services.AddScoped<Save132Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskVoidBoolRemoteDeny v) => factory.LocalSave132(target, v);
            });
            services.AddScoped<Save133Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskVoidStringRemoteDeny v) => factory.LocalSave133(target, v);
            });
            services.AddScoped<Save134Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskVoidTaskBoolRemoteDeny v) => factory.LocalSave134(target, v);
            });
            services.AddScoped<Save135Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskVoidTaskStringRemoteDeny v) => factory.LocalSave135(target, v);
            });
            services.AddScoped<Save136Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskTrueBoolBoolRemoteDeny v) => factory.LocalSave136(target, v);
            });
            services.AddScoped<Save137Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskTrueBoolStringRemoteDeny v) => factory.LocalSave137(target, v);
            });
            services.AddScoped<Save138Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskTrueBoolTaskBoolRemoteDeny v) => factory.LocalSave138(target, v);
            });
            services.AddScoped<Save139Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskTrueBoolTaskStringRemoteDeny v) => factory.LocalSave139(target, v);
            });
            services.AddScoped<Save140Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskFalseBoolBoolRemoteDeny v) => factory.LocalSave140(target, v);
            });
            services.AddScoped<Save141Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskFalseBoolStringRemoteDeny v) => factory.LocalSave141(target, v);
            });
            services.AddScoped<Save142Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskFalseBoolTaskBoolRemoteDeny v) => factory.LocalSave142(target, v);
            });
            services.AddScoped<Save143Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, TaskFalseBoolTaskStringRemoteDeny v) => factory.LocalSave143(target, v);
            });
            services.AddScoped<Save144Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidBoolDeny v) => factory.LocalSave144(target, v);
            });
            services.AddScoped<Save145Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidStringDeny v) => factory.LocalSave145(target, v);
            });
            services.AddScoped<Save146Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidTaskBoolDeny v) => factory.LocalSave146(target, v);
            });
            services.AddScoped<Save147Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidTaskStringDeny v) => factory.LocalSave147(target, v);
            });
            services.AddScoped<Save148Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolBoolDeny v) => factory.LocalSave148(target, v);
            });
            services.AddScoped<Save149Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolStringDeny v) => factory.LocalSave149(target, v);
            });
            services.AddScoped<Save150Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolDeny v) => factory.LocalSave150(target, v);
            });
            services.AddScoped<Save151Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringDeny v) => factory.LocalSave151(target, v);
            });
            services.AddScoped<Save152Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolBoolDeny v) => factory.LocalSave152(target, v);
            });
            services.AddScoped<Save153Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolStringDeny v) => factory.LocalSave153(target, v);
            });
            services.AddScoped<Save154Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolDeny v) => factory.LocalSave154(target, v);
            });
            services.AddScoped<Save155Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringDeny v) => factory.LocalSave155(target, v);
            });
            services.AddScoped<Save156Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidBoolDeny v) => factory.LocalSave156(target, v);
            });
            services.AddScoped<Save157Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidStringDeny v) => factory.LocalSave157(target, v);
            });
            services.AddScoped<Save158Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolDeny v) => factory.LocalSave158(target, v);
            });
            services.AddScoped<Save159Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringDeny v) => factory.LocalSave159(target, v);
            });
            services.AddScoped<Save160Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolDeny v) => factory.LocalSave160(target, v);
            });
            services.AddScoped<Save161Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringDeny v) => factory.LocalSave161(target, v);
            });
            services.AddScoped<Save162Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolDeny v) => factory.LocalSave162(target, v);
            });
            services.AddScoped<Save163Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringDeny v) => factory.LocalSave163(target, v);
            });
            services.AddScoped<Save164Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolDeny v) => factory.LocalSave164(target, v);
            });
            services.AddScoped<Save165Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringDeny v) => factory.LocalSave165(target, v);
            });
            services.AddScoped<Save166Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolDeny v) => factory.LocalSave166(target, v);
            });
            services.AddScoped<Save167Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringDeny v) => factory.LocalSave167(target, v);
            });
            services.AddScoped<Save168Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidBoolRemoteDeny v) => factory.LocalSave168(target, v);
            });
            services.AddScoped<Save169Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidStringRemoteDeny v) => factory.LocalSave169(target, v);
            });
            services.AddScoped<Save170Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidTaskBoolRemoteDeny v) => factory.LocalSave170(target, v);
            });
            services.AddScoped<Save171Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteVoidTaskStringRemoteDeny v) => factory.LocalSave171(target, v);
            });
            services.AddScoped<Save172Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolBoolRemoteDeny v) => factory.LocalSave172(target, v);
            });
            services.AddScoped<Save173Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolStringRemoteDeny v) => factory.LocalSave173(target, v);
            });
            services.AddScoped<Save174Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolTaskBoolRemoteDeny v) => factory.LocalSave174(target, v);
            });
            services.AddScoped<Save175Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTrueBoolTaskStringRemoteDeny v) => factory.LocalSave175(target, v);
            });
            services.AddScoped<Save176Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolBoolRemoteDeny v) => factory.LocalSave176(target, v);
            });
            services.AddScoped<Save177Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolStringRemoteDeny v) => factory.LocalSave177(target, v);
            });
            services.AddScoped<Save178Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolTaskBoolRemoteDeny v) => factory.LocalSave178(target, v);
            });
            services.AddScoped<Save179Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteFalseBoolTaskStringRemoteDeny v) => factory.LocalSave179(target, v);
            });
            services.AddScoped<Save180Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidBoolRemoteDeny v) => factory.LocalSave180(target, v);
            });
            services.AddScoped<Save181Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidStringRemoteDeny v) => factory.LocalSave181(target, v);
            });
            services.AddScoped<Save182Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidTaskBoolRemoteDeny v) => factory.LocalSave182(target, v);
            });
            services.AddScoped<Save183Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskVoidTaskStringRemoteDeny v) => factory.LocalSave183(target, v);
            });
            services.AddScoped<Save184Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolBoolRemoteDeny v) => factory.LocalSave184(target, v);
            });
            services.AddScoped<Save185Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolStringRemoteDeny v) => factory.LocalSave185(target, v);
            });
            services.AddScoped<Save186Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskBoolRemoteDeny v) => factory.LocalSave186(target, v);
            });
            services.AddScoped<Save187Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskTrueBoolTaskStringRemoteDeny v) => factory.LocalSave187(target, v);
            });
            services.AddScoped<Save188Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolBoolRemoteDeny v) => factory.LocalSave188(target, v);
            });
            services.AddScoped<Save189Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolStringRemoteDeny v) => factory.LocalSave189(target, v);
            });
            services.AddScoped<Save190Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskBoolRemoteDeny v) => factory.LocalSave190(target, v);
            });
            services.AddScoped<Save191Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<AuthorizedAllCombinationsFactory>();
                return (IAuthorizedAllCombinations target, RemoteTaskFalseBoolTaskStringRemoteDeny v) => factory.LocalSave191(target, v);
            });
            services.AddScoped<IFactoryEditBase<AuthorizedAllCombinations>, AuthorizedAllCombinationsFactory>();
        }
    }
}