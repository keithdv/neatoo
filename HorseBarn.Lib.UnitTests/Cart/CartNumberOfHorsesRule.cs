using HorseBarn.lib.Horse;
using Moq;
using Neatoo.Rules;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;

namespace HorseBarn.lib.Cart.Tests
{
    /// <summary>
    /// This entire class - every method - was generated by GitHub CoPilot. :-)
    /// </summary>
    [TestClass]
    public class CartNumberOfHorsesRuleTests
    {
        private Mock<ICart> mockCart = null!;
        private CartNumberOfHorsesRule rule = null!;

        [TestInitialize]
        public void TestInitialize()
        {
            mockCart = new Mock<ICart>();
            rule = new CartNumberOfHorsesRule();
        }

        [TestMethod]
        public void Execute_HorseCountExceedsNumberOfHorses()
        {
            // Arrange
            var horses = new List<IHorse> { new Mock<IHorse>().Object, new Mock<IHorse>().Object };
            mockCart.Setup(c => c.Horses).Returns(horses);
            mockCart.Setup(c => c.NumberOfHorses).Returns(1);

            // Act
            rule.Execute(mockCart.Object);

            // Assert
            mockCart.VerifySet(c => c.NumberOfHorses = horses.Count, Times.Once);
        }

        [TestMethod]
        public void Execute_NumberOfHorsesIsZero()
        {
            // Arrange
            var horses = new List<IHorse>();
            mockCart.Setup(c => c.Horses).Returns(horses);
            mockCart.Setup(c => c.NumberOfHorses).Returns(0);

            // Act
            var result = rule.Execute(mockCart.Object);

            // Assert
            Assert.IsTrue(result.Count == 0);
            mockCart.VerifySet(c => c.NumberOfHorses = 1, Times.Once);
        }

        [TestMethod]
        public void Execute_HorseCountDoesNotMatchNumberOfHorses()
        {
            // Arrange
            var horses = new List<IHorse> { new Mock<IHorse>().Object };
            mockCart.Setup(c => c.Horses).Returns(horses);
            mockCart.Setup(c => c.NumberOfHorses).Returns(2);

            // Act
            var result = rule.Execute(mockCart.Object);

            // Assert
            Assert.IsTrue(result.Count == 1);
            Assert.AreEqual($"There are {horses.Count} but there need to be {mockCart.Object.NumberOfHorses}", result[nameof(ICart.NumberOfHorses)].Single());
        }

        [TestMethod]
        public void Execute_HorseCountMatchesNumberOfHorses()
        {
            // Arrange
            var horses = new List<IHorse> { new Mock<IHorse>().Object };
            mockCart.Setup(c => c.Horses).Returns(horses);
            mockCart.Setup(c => c.NumberOfHorses).Returns(1);

            // Act
            var result = rule.Execute(mockCart.Object);

            // Assert
            Assert.IsTrue(result.Count == 0);
        }
    }
}