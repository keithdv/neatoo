using HorseBarn.lib.Horse;
using Moq;

namespace HorseBarn.lib.Cart.Tests;

/// <summary>
/// This entire class - every method - was generated by GitHub CoPilot. :-)
/// </summary>

public class CartNumberOfHorsesRuleTests
{
    private readonly Mock<ICart> mockCart;
    private readonly CartNumberOfHorsesRule rule;

    public CartNumberOfHorsesRuleTests()
    {
        mockCart = new Mock<ICart>();
        rule = new CartNumberOfHorsesRule();
    }

    [Fact]
    public void Execute_HorseCountExceedsNumberOfHorses()
    {
        // Arrange
        var horses = new List<IHorse> { new Mock<IHorse>().Object, new Mock<IHorse>().Object };
        mockCart.Setup(c => c.Horses).Returns(horses);
        mockCart.Setup(c => c.NumberOfHorses).Returns(1);

        // Act
        rule.Execute(mockCart.Object);

        // Assert
        mockCart.VerifySet(c => c.NumberOfHorses = horses.Count, Times.Once);
    }

    [Fact]
    public void Execute_NumberOfHorsesIsZero()
    {
        // Arrange
        var horses = new List<IHorse>();
        mockCart.Setup(c => c.Horses).Returns(horses);
        mockCart.Setup(c => c.NumberOfHorses).Returns(0);

        // Act
        var result = rule.Execute(mockCart.Object);

        // Assert
        Assert.True(result.Count == 0);
        mockCart.VerifySet(c => c.NumberOfHorses = 1, Times.Once);
    }

    [Fact]
    public void Execute_HorseCountDoesNotMatchNumberOfHorses()
    {
        // Arrange
        var horses = new List<IHorse> { new Mock<IHorse>().Object };
        mockCart.Setup(c => c.Horses).Returns(horses);
        mockCart.Setup(c => c.NumberOfHorses).Returns(2);

        // Act
        var result = rule.Execute(mockCart.Object);

        // Assert
        Assert.True(result.Count == 1);
        Assert.Equal($"There are {horses.Count} but there need to be {mockCart.Object.NumberOfHorses}", result[nameof(ICart.NumberOfHorses)].Single());
    }

    [Fact]
    public void Execute_HorseCountMatchesNumberOfHorses()
    {
        // Arrange
        var horses = new List<IHorse> { new Mock<IHorse>().Object };
        mockCart.Setup(c => c.Horses).Returns(horses);
        mockCart.Setup(c => c.NumberOfHorses).Returns(1);

        // Act
        var result = rule.Execute(mockCart.Object);

        // Assert
        Assert.True(result.Count == 0);
    }
}